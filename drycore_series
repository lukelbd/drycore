#!/bin/bash
################################################################################
# NOTE: Previously sweeped parameter space with ugly hodgpodge of exact doubling;
# dividing into 1, 2.5, 5; and diving into 1, 2, 4; now, we always use the 1, 2, 4
# to logarithmically sweep space. Existing directories have been moved to their
# closest values in this new spacing. White lie, but probably insignificant differences.
################################################################################
doc="Use this to run a parameter sweep for the given input sereis and list(s) of parameters.

Usage:
     drycore_batch \"force_sweep_resolution\" [flags] --1=[rvalue1:]value1,[rvalue2:]value2,... --2=...

Force specification:
     hs,pk,da - Held-Suarez 1994, Polvani-Kushner 2004, or Davis custom parameterization

Sweep specifications:
     base              just run forcing scheme with default settings, once
     troprad[123]      change tropospheric damping; number is boundary layer option
     fric              change friction
     diag[123]         change both friction and tropospheric damping
     stratrad[XX][cl]  change stratospheric damping, XX is the depth of
                       transition layer and the suffix controls upper stratosphere option

Resolution specification: t[XX]l[YY][spe]
    * First number is truncation number.
    * Second number is level count.
    * Suffix controls level spacing option: [s]imple/even [s]igma, [p]olvani
      kushner spacing, or [e]ra-interim spacing.

Parameter specification flags: Use --1, --2:
    * Which parameter(s) are being changed depends on the experiment series. Most
      just change 1 as diagonal parameter spaces are a huge PITA.
    * To start the run from the end of a *previous* run in the same experiment
      series, use restart_parameter:current_parameter; e.g. call this script
      with --1=10,20,40,40:100,100:200,200:400
    * The final directory name for experiments will be
          force_sweep_resolution_p[XXX]p[YYY]...
      for each parameter. If the parameter has the *base* value (i.e.,
      corresponding roughly to Held-Suarez standard) the sweep will be renamed
      to 'base', and the directory will be named force_*base*_resolution.

Other flags:
    --test  Run quick test, just a few days, maybe 3 restarts.
    --init  Run model for 1 second, save netcdf file with forcing scheme data.
    --mode  The experiment mode, where:
        * 0 is control run
        * 1 for radiation off spindown
        * 2 for radiation off but surface on spindown
        * 3 for everything off (radiation, surface, and friction) spindown
        * 4 for friction off spindown

To customize other things, make direct edits to this script.
"
################################################################################
# Default settings
# For runmode:
# For testmode: 0 is normal, 1 is quick test, 2 is spit out the
# initial conditions (i.e. forcing environment)
cores=8
runmode=0
testmode=0
dryrun=false # just print function calls
resume=false # do not overwrite existing dXXXX-dYYYY directories?
new=false # do not write to existing experiment directories?
# Parse input
unset series flags
while [ $# -gt 0 ]; do # echo "Flag: $1"
  case "$1" in
    --help|-h) echo "$doc" && exit 0 ;;
    --new|-n)        new=true ;;
    --test|-t)       testmode=1 ;;
    --init|-i)       testmode=2 ;;
    --resume|-r)     resume=true ;; # no override
    --dryrun|-d)     dryrun=true ;;
    --cores=*|-c=*)  cores=${1#*=} ;;
    --1=*|-1=)       params1=($(echo ${1#*=} | tr ',' ' ')) ;;
    --2=*|-2=)       params2=($(echo ${1#*=} | tr ',' ' ')) ;;
    --mode=*|-m=)    runmode=${1#*=} ;;
    -*) echo "Error: Unknown flag \"$1\"." && exit 1 ;;
    *) [ -n "$series" ] && echo "Error: More than one experiment series specified." && exit 1
       series="$1" ;;
  esac; shift # shift by at least one
done
# [ -z "$series" ] && echo "Error: Must input experiment name." && exit 1
if [ -z "$series" ]; then
  echo "Warning: No experiment name specified. Running default experiment hs_base_t42l40s."
  series='hs_base_t42l40s'
fi

# Parse experiment series
force="${series%%_*}"
sweep="${series#*_}"
sweep="${sweep%%_*}"
reso="${series#*_}"
reso="${reso#*_}"
reso="${reso%%_*}"

# Next parameter sweeps and timing
secs=0 # normally is zero
case $testmode in 0)
  filename=4xdaily_inst # name for output files
  frequnits=hours # hours
  outfreq=6       # every 6
  dt=600    # for other experiments
  days=100  # make resolution dependent?
  tstart=0  # first day of integration; set to 0 for new run.
  tend=1200 # for new experiments just do 1200 day integrations, first 200 are spinup
  txyzdata=1000,1100 # when to retain longitude info? try just a couple 100 days
  # tnodata=0,100 # when to throw out all data, even y-z cross-sections? good idea to keep it, so we can verify spinup was complete
  # tspindown=1000
  # tspindown="$(seq 1000 100 5900 | xargs | tr ' ' ',')" # for spindown initiation
# Run really fast test run
;; 1)
  # rdir="${force}_base_t42l40s" # override previous directory
  # rdays=d1100-d1200 # set restart directory days (leave empty to just use the last subfolder in directory)
  days=5
  nrestart=3
  filename=test
  dt=600
  outfreq=6 frequnits=hours
  tstart=0 tend=$(($days * $nrestart))
  new=false resume=false
  process="--debug " # don't move/delete anything; also implies flags="--keep-xyz "
  tspindown=3
# Initial conditions, for sanity checks
;; 2)
  filename=init
  cores=1 # easier for debugging, otherwise print statements executed simultaneously
  dt=1
  days=0 secs=1
  outfreq=1 frequnits=seconds
  tstart=0 tend=0
  new=false resume=false
  process="--combine-only --debug " # don't post-process anything
  tspindown=0
;; *) echo "Error: Unknown testmode \"$testmode\"." && exit 1
;; esac

#------------------------------------------------------------------------------#
# Paths
#------------------------------------------------------------------------------#
# Storage information for runscript and post-processing script
storage=$HOME
scratch=$HOME # on Euclid, home is unmounted/not backed up; so disk I/O is quick
f90dir=$HOME/gfdl-drycore # model code folder
bindir=./drycore-${HOSTNAME%%.*} # compiled model code folder (should be in this folder)
case ${HOSTNAME%%.*} in
  # olbers)
  #   scratch=''
  # ;; gauss)
  #   scratch=/birner-scratch/ldavis # need to use special scratch directory
  euclid)
    storage=/birner-home/ldavis # this directory is backed up; synced with GAUSS home folder
  ;; monde)
    scratch=/mdata1/ldavis
  ;; cheyenne*)
    storage=/glade/u/home/davislu
    scratch=/glade/scratch/davislu # https://www2.cisl.ucar.edu/resources/storage-and-file-systems/glade-file-spaces
    bindir=drycore-cheyenne
  ;; *) echo "Error: Unknown host, must edit batch script before continuing." && exit 1 ;;
esac
[ ! -d "$storage/data" ] && { mkdir "$storage/data"; echo "Created storage directory."; }
# Copy over the appropriate executable file
cp $bindir/fms.x ./ # location of executables
[ $? -ne 0 ] && echo "Error: fms.x not found in \"$bindir\"." && exit 1
cp $bindir/mppnccombine.x ./ # location of executables
[ $? -ne 0 ] && echo "Error: mppnccombine.x not found in \"$bindir\"." && exit 1

#------------------------------------------------------------------------------#
# Helper function
#------------------------------------------------------------------------------#
# Call this function as Add param v<value> param v<value>
# Modifies ***global*** arrays 'params' and 'values'
# * If the <value> part is empty (e.g., if this particular experiment
#   series does not change that value), will not add to arrays
# * Function accounts for situation when you pass an empty string parameter
#   or negative number, and have weird strings like "v-" and "v''"
array_in() {
  # Array membership
  [[ " ${@:2} " =~ " ${1} " ]]
  return $?
}
array_add() {
  # Add to arrays
  while [ $# -ne 0 ]; do
    if [ -n "$2" ] && [ "${#2}" -gt 1 ] && [ "$2" != "v-" ] && [ "$2" != "v''" ]; then
      [ "${2:0:1}" != v ] && echo "Error: Values must be input as v<value>." && exit 1
      params+=("$1")
      values+=("${2#v}")
    fi
    shift 2
  done
}

#------------------------------------------------------------------------------#
# Run multiple experiments consecutively
#------------------------------------------------------------------------------#
# Setup
echo
echo "Forcing: $force, Sweep: $sweep, Resolution: $reso"
exps=() # record completed experiments
cwd=$(pwd)
counter=0
if [[ $sweep =~ base ]]; then
  params1=(na)
  params2=(na)
elif [ -z "$params1" ]; then
  echo "Error: You must define an array of parameters with e.g. --1=10,20,30" && exit 1
elif [[ $sweep =~ diag[0-9] ]]; then
  echo "Error: You must define a second array of parameters with e.g. --2=10,20,30" && exit 1
else
  params2=(na)
fi
for param1 in ${params1[@]}; do
  for param2 in ${params2[@]}; do
    #--------------------------------------------------------------------------#
    # Setup
    #--------------------------------------------------------------------------#
    # Detect restart params
    unset rparam1 rparam2
    if [[ $param1 =~ : ]]; then
      rparam1=${param1%:*}
      param1=${param1#*:}
    fi
    if [[ $param2 =~ : ]]; then
      rparam2=${param2%:*}
      param2=${param2#*:}
    fi
    # Optionally iterate through possible timesteps, try new one if failed
    # if [[ $param1 =~ ^0000.0??$ ]] || [[ "$sweep" =~ "fixedmean" ]]; then
    #   echo "Using teeny timestep." # because to hold temp 'fixed', use 1 hour damping!
    #   dts=(100) # when damping rate on order of .0something need to *really* increase dt
    # elif [[ $param1 =~ ^0000.???$ ]]; then
    #   echo "Using small timestep."
    #   dts=(200)
    # else
    #   echo "Using big timestep."
    #   dts=(600)
    # fi
    dts=(600) # this is fine
    cd $cwd # ensure are still in same directory
    # Detect if the so-called "ktrop" is of the form "40 80" e.g., which means
    # pick up from ktrop=40 experiment, and start a ktrop=80 experiment
    let counter=$counter+1
    [ $counter -gt 1 ] && unset rdir # allow override for first experiment

    #------------------------------------------------------------------------#
    # This loop enables "continuation experiments" -- picking up for new timescale
    # experiment from the end of the control run from an old experiment
    #------------------------------------------------------------------------#
    # Check whether this is a 'base' experiment. Experiment series can
    # 'intersect' each other, and this ensures we aren't duplicating model runs
    unset exp
    if [ -n "$rparam1" ] && [ -n "$rparam2" ]; then
      echo "Error: Cannot do 'diagonal' continuation experiments." && exit 1
    fi
    for p1 in $rparam1 $param1; do
      for p2 in $rparam2 $param2; do
        unset c
        name=$sweep
        [ -n "$exp" ] && c=c rdir=${exp} && [[ ! $rdir =~ base ]] && rdir=${rdir}c
        case $sweep in
          *troprad[0-9]-fixedmean*) [[ $p1 == 40 ]] && name=base-fixedmean p1= ;; # no 'base' because background damping always huge
          *troprad[0-9]*) [[ $p1 == 40 ]] && name=base p1= ;; # base is 40 day zonal-mean or anomaly damping
          *tgrad*)        [[ $p1 == 60 ]] && name=base p1= ;; # base is 60K contrast
          *fric*)         [[ $p1 == 1  ]] && name=base p1= ;;
          *stratrad*)     [[ $p1 == 40 ]] && name=base p1= ;;
          *diag[0-9]*)    [[ $p1 == 40 && $p2 == 1 ]] && name=base p1= p2= ;;
        esac
        [ "$p1" == na ] && unset p1
        [ "$p2" == na ] && unset p2
        [ -n "$p1" ] && p1="_p$(printf "%08.3f" $p1)"
        [ -n "$p2" ] && p2="_p$(printf "%08.3f" $p2)"
        exp=${force}_${name}_${reso}${p1}${p2}${c}
      done
    done
    if array_in $exp ${exps[@]}; then
      echo "Already processed ${exp} in this loop."
      continue
    else
      echo "Experiment name: ${exp}."
      exps+=($exp) # record in list
    fi
    # Full experiment directory path
    case $testmode in
      0) expdir="$scratch/$exp" ;; # running model
      1) expdir="$scratch/test" ;;
      2) expdir="$scratch/init" ;;
    esac
    [ ! -d "$expdir" ] && mkdir "$expdir"

    # Optionally experiment with different timesteps by iteratively going from
    # coarse to fine timesteps, finding when model is stable
    for dt in ${dts[@]}; do
      #----------------------------------------------------------------------------#
      # Determine namelist changes
      #----------------------------------------------------------------------------#
      # Parse the experiment name, figure out what needs to be written
      unset params values message
      [ -z "$exp" ] && echo "Error: Requires one argument." && exit 1
      if [[ $name =~ base ]]; then
        vals=()
      else
        vals="${exp##*_}"
        vals="${vals%c}"
        vals=($(echo $vals | tr -t 'p' ' ' | xargs printf "%.3f "))
      fi
      # Add to this as you design new experiment series
      fixed="-0.1" # timescale used to 'fix' temperature field; difficult to prevent model blowup!
      case $name in
        base*) # Dun do shit
          if [[ $name =~ -fixedmean$ ]]; then
            ktrop="$fixed,-40"
            kbl="$fixed,-4"
          fi
        ;; troprad[0-9]*|diag[0-9])
          # First set mean and anomaly components of troposphere damping
          prefix=${name%-*}
          suffix=${name#*-}
          ktrop=-${vals[0]}
          [[ $name =~ diag[0-9] ]] && kfric=-${vals[1]} # diagaonal experiment
          if [ "$suffix" == anom ]; then
            ktrop="-40,$ktrop"
          elif [ "$suffix" == mean ]; then
            ktrop="$ktrop,-40"
          elif [ "$suffix" != fixedmean ] && [ -n "$suffix" ]; then
            echo "Error: Unknown suffix option ${suffix}."
          fi
          kstrat=$ktrop # if hs forcing, will not change anything
          kmeso=$ktrop
          # Next, separately scale boundary layer damping rate
          unset kbl
          blopt=${prefix##*[a-z]} # get number
          for iktrop in ${ktrop/,/ }; do
            case "$blopt" in
              [01]) ikbl=-4 ;; # hold boundary layer value constant
              2)    ikbl=-$(bc -l <<< "scale=3; ${iktrop#-}/10") ;; # hold ratio constant; i.e. keep it at 10
              3)    ikbl=-$(bc -l <<< "scale=3; (4^-1 + (${iktrop#-}^-1 - 40^-1))^-1") ;; # preserve 'boundary layer' component
              *) echo "Error: Unknown blopt ${blopt}." && exit 1 ;;
            esac
            kbl=$kbl,$ikbl # mean and anomaly components
          done
          kbl=${kbl#,} # trim leading comma
          # Special fixes background state case
          if [ "$suffix" == fixedmean ]; then
            ktrop="$fixed,$ktrop" # model breaks on scale of minutes, but seems to handle 1 hour o.k. (i.e. 0.05days)
            kbl="$fixed,$kbl"
          fi
        ;; tgrad*) # temp gradient experiments
          delh=${vals[0]} # easy peasy!
        ;; stratrad*) # stratosphere damping experiments
          # Parse the depth and stuff
          prefix=${name%-*}
          suffix=${name#*-}
          kstrat=-${vals[0]}
          kdepth=${prefix#stratrad}
          kdepth=${kdepth%[a-z]}
          stratdamp=${prefix##*[0-9]}
          case "$stratdamp" in
            l) stratdamp=linear ;;
            c) stratdamp=constant ;;
            *) echo "Error: Unknown stratosphere damping option ${stratdamp}." && exit 1 ;;
          esac
          # Detect other options
          if [ "$suffix" == anom ]; then
            kstrat="-40,$kstrat"
          elif [ "$suffix" == fixedmean ]; then
            kstrat="$fixed,$kstrat" # model breaks on scale of minutes, but seems to handle 1 hour o.k. (i.e. 0.05days)
          elif [ "$suffix" == mean ]; then
            kstrat="$kstrat,-40"
          elif [ -n "$suffix" ]; then
            echo "Error: Unknown suffix option ${suffix}." && exit 1
          fi
        ;; fric) # friction experiments
          kfric=-${vals[0]}
        ;; *) echo "Error: Unknown experiment series \"$name\"." && exit 1 ;;
      esac

      #----------------------------------------------------------------------------#
      # Add parameters to lists
      #----------------------------------------------------------------------------#
      # Forcing settings
      array_add delh v$delh
      array_add strat_mode v\'$force\' strat_damp v\'$stratdamp\'
      array_add ktrop v$ktrop kfric v$kfric kbl v$kbl kstrat v$kstrat kmeso v$kmeso z_kdepth v$kdepth
      # Timing variables
      # These ones are not experiment dependent so far, and are *global*
      array_add dt_atmos v$dt days v$days seconds v$secs
      # Set horizontal coordinates
      ntrunc=${reso%l*}
      ntrunc=${ntrunc#t}
      case $ntrunc in
        42)  nlat=64  ;;
        63)  nlat=96  ;;
        85)  nlat=128 ;;
        106) nlat=160 ;;
        170) nlat=256 ;;
        *) echo "Error: Invalid truncation number \"$ntrunc\"."; exit 1 ;;
      esac
      nsphere=$(($ntrunc + 1)) # forget what difference between num fourier and num spherical means
      nlon=$(($nlat * 2)) # always twice the res
      array_add num_fourier v$ntrunc num_spherical v$nsphere lat_max v$nlat lon_max v$nlon
      # Now vertical resolution options
      # Will raise error if string-specifier is unknown
      vert=${reso#*l}
      case $vert in
        *e) coord=input;      nlev=60;        levels=$f90dir/levels_era.nml ;; # ERA-Interim coordinates
        *p) coord=pk_sigma;   nlev=${vert%p}; levels= ;;
        *s) coord=even_sigma; nlev=${vert%s}; levels= ;;
        *) echo "Error: Unknown vertical coordinate identifier \"${vert}\"."; exit 1; ;;
      esac
      array_add num_levels v$nlev vert_coord_option v\'$coord\'

      #----------------------------------------------------------------------------#
      # Add 'params' keys with 'values' values to namelist
      #----------------------------------------------------------------------------#
      # Message
      echo "Updating namelist with:"
      index=0; width=6; while [ $index -le ${#params[@]} ]; do
        message+="${params[@]:$index:$width}\n${values[@]:$index:$width}\n\n"
        let index+=$width
      done
      printf "$message" | column -t
      # Copy over the default namelist
      nml=$expdir/input.nml
      nml_default=$f90dir/drycore_default.nml
      echo "Copy $nml_default to $nml"
      cp $nml_default $nml # move over defaut
      # Add forcing namelist
      nml_forcing=$f90dir/forcing_default.nml
      [ ! -r "$nml_forcing" ] && echo "Error: File \"$nml_forcing\" not found." && exit 1
      cat $nml_forcing >>$nml # append that shit
      # Add coordinate namelist, potentially
      if [ ! -z "$levels" ]; then
        [ ! -r "$levels" ] && echo "Error: File \"$levels\" not found." && exit 1
        cat $levels >>$nml
      fi
      # Now loop through variables and assign them
      # Only modify the parameter sweep variables, resolution variables, and
      # timing variables. For others, just change in the namelist file directly.
      [ ${#params[@]} -ne ${#values[@]} ] && echo "Error: One of the batch script namelist params is unset." && exit 1
      for i in $(seq 0 $((${#params[@]}-1))); do
        # echo param $param, value $value, namelist $nml
        param=${params[$i]}
        value=${values[$i]}
        [ -z "$param" ] && continue # e.g. stratosphere timescale should be empty
        ! grep '^[ \t]*\b'${param}'\b' $nml &>/dev/null && \
          echo "Error: Param \"${param}\" not found in namelist." && exit 1
        space='\([ \t]*\)' # space atom; more readable to set it as a variable
        sed -i 's/^'"${space}${param}${space}"'='"${space}"'.*$/\1'${param}'\2=\3'${value}',/g' $nml
        sed -i 's/^'"${space}${param}${space}"'='"${space}"'.*$/\1'${param}'\2=\3'${value}',/g' $nml
      done
      # Remove comments to be safe
      sed -i 's/!.*$//g;/^[ \t]*$/d' $nml # remove comments

      #------------------------------------------------------------------------#
      # Set up diag table
      #------------------------------------------------------------------------#
      diag="$expdir/diag_table"
      [ $testmode -eq 2 ] && diag_default=$f90dir/diag_table_init || diag_default=$f90dir/diag_table_default
      cp $diag_default $diag
      sed -i 's/filename/"'$filename'"/g;s/outfreq/'$outfreq'/g;s/frequnits/"'$frequnits'"/g' $diag
      sed -i 's/#.*$//g;/^[ \t]*$/d' $diag # remove comments, empty lines, for clarity

      #------------------------------------------------------------------------#
      # Run model
      #------------------------------------------------------------------------#
      # Flags
      unset flags_exp
      $new    && flags_exp+="--new "    # do not write to existing experiment folders?
      $resume && flags_exp+="--resume " # do not overwrite existing dXXXX-dYYYY days?
      [ ! -z "$rdir" ] && [ $runmode -eq 0 ] && echo "Warning: Using \"${rdir}\" for restart files." \
                            && flags_exp+="--restart=$scratch/$rdir/$rdays " # override with this restart directory
      [ ! -z "$txyzdata" ]  && flags_exp+="--days-xyzdata=$txyzdata " # keep XYZ data
      [ ! -z "$tnodata" ]   && flags_exp+="--days-nodata=$tnodata " # record zero data
      [ ! -z "$tspindown" ] && flags_exp+="--days-spindown=$tspindown " # record zero data
      # Run experiment (or just echo command for dryrun)
      $dryrun && cmd="echo ./drycore_run" || cmd="./drycore_run"
      $cmd $expdir $flags $flags_exp --mode=$runmode --start=$tstart --end=$tend --cores=$cores --process="$process" # could be empty string
      [ $? -ne 0 ] && echo "Warning: $exp integration failed." && echo && echo && echo && continue # keyboard interruption does not trigger this
      # Move initialization files
      if [ $testmode -eq 2 ]; then
        cp $expdir/d0000-d0000/init.nc $HOME/data/init_${exp}.nc
      fi
      break # out of the loop through different model timesteps
      echo
      echo next!
    done
  done
done
echo # space
