#!/bin/bash
# Script for compiling fortran source code, as user has specified. Then the runscript will integrate
# it forward, produce output, etc.
#------------------------------------------------------------------------------
# Fix host-specific settings
#------------------------------------------------------------------------------
expname=hs
hostname=${HOSTNAME%%.*} # trims e.g. monde.atmos.colostate.edu
case $hostname in
  monde)
    include=(/usr/include/mpich-x86_64) # location of C header files
    links=(/usr/lib64/mpich/lib) # location of lib files to be linked
    root=/home/ldavis/gfdl # location of source code
    pgi=/opt/pgi/linux86-64/17.10/bin # location of PGI compilers
    ;;
  *)
    echo "Error: Unknown host \"$hostname\", must configure library and binary locations before running."
    exit 1 ;;
esac
#------------------------------------------------------------------------------
# Build executable model code and post-processing tool
#------------------------------------------------------------------------------
execdir=$(pwd)/exe_${expname}_${hostname}      # where code is compiled and executable is created
src=$root/src_$expname                         # path to directory containing model source code
mkmf=$root/bin/mkmf                            # path to executable mkmf
pathnames=$src/path_names                      # stored in source directory
mkmftemplate=$root/bin/mkmf.template           # template of most basic settings
mppnsource=$root/postprocessing/mppnccombine.c # source code
cppdefs="-Duse_libMPI -Duse_netCDF"            # not sure what this does
flags_links="${links[@]/#/-L}"                 # search these paths for library files
flags_include="${include[@]/#/-I}"             # include flags
flags_libs="-lmpl -lmpich -lfmpich -lmpichf90 -lnetcdff -lnetcdf -lhdf5_hl -lhdf5 -lm -lz" # for mppnccombine
# Make sure necessary things tools are in path
if [ ! -d $execdir ]; then
  mkdir $execdir
else echo "Warning: Leaving old compiled source. To do a completely fresh compilation, remove all *.mod and *.o files from \"$execdir\"."
fi
if [ ! -r $pathnames ]; then
  echo "Error: Could not find path_names file $pathnames.."
  exit
fi
if [ ! -d $src ]; then
  echo "Error: Could not find source code directory $src."
  exit
fi
if [ ! -r $mppnsource ]; then
  echo "Error: Could not find mppnccombine source code."
  exit
fi
if [ ! -r $mkmftemplate ]; then
  echo "Error: Could not find mppnccombine source code."
  exit
fi
if [ ! -r $mkmf ]; then
  echo "Error: Could not find mkmf Makefile-generating outility $mkmf."
  exit
fi
# Create mppnccombine; should supply with same libraries supplied to model executable through its makefile
time=$(date +%s)
echo "Generating mppnccombine executable..."
$pgi/pgcc -O -o mppnccombine $flags_include $mppnsource $flags_links $flags_libs
  # -O[level] = set optimization level; sets to 2 if number not specified
  # -o file = use this file as name of executable
  # -Idirectory = add directory to compiler search path; these are 'header' files
  # -Ldirectory = change the directory in which "linker" searches for libraries
  # -llibrary = load lib<library>.a from the standard library directory (supplied by L?)
# Build makefile template (assumes pgi bin is on $PATH)
cd $execdir # move to source directory
cat > mkmf.template << DELIM
CC = $pgi/pgcc
FC = $pgi/pgf90
LD = $pgi/pgf90
CPPFLAGS = -Mmpi=mpich
FFLAGS = -Mmpi=mpich -r8 -Ktrap=fp -pc 64 -O2
LDFLAGS = $flags_links $flags_libs -Mmpi=mpich
LIST = -Mlist
DELIM
cat $mkmftemplate >> mkmf.template # appends provided template to custom defs
# Create makefile
echo "Generating Makefile..."
cat mkmf.template
$mkmf -p fms.x -t mkmf.template -c "$cppdefs" -a $src $pathnames \
  $src/shared/mpp/include $src/shared/include ${include[@]} # the other include files
  # -p = program (name of final target)
  # -t = template (list of MACROS/COMMANDS that get appended to beginning of final Makefile)
  # -c = list of 'cpp #define's passed to source files (what?)
  # -a = abspath, attaches 'abspath' (here, $src) to the FRONT of RELATIVE paths to the source file
  # args (all the later stuff) = list of directories/files to be searched for targets and dependencies
# Compile source
echo "Compiling source code..."
make -f Makefile
echo "This script took $(($(date +%s) - $time)) seconds."

