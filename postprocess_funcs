#!/bin/bash
# This contains functions that can be used by postprocess script
flags="-s -O" # overwrite, and only issue warnings
shopt -s nullglob # will return empty if no match
[ -z $CLIMOSTART ] && CLIMOSTART=0 # start of climate days
[ -z $CLIMOEND ] && CLIMOEND=9999 # end of climate days
[ -z $SPINDOWNSTART ] && SPINDOWNSTART=9999
[ -z $SPINDOWNEND ] && SPINDOWNEND=0
# Climate files
# Used for climate means and climate variability stuff
climofiles=()
allfiles=($input/${fprefix}.d[0-9][0-9][0-9][0-9]-d[0-9][0-9][0-9][0-9].nc)
for file in ${allfiles[@]}; do
  daystring=${file#$input/${fprefix}.}
  daystring=${daystring%.nc}
  day1=${daystring%%-*} day1=${day1#d}
  day2=${daystring##*-} day2=${day2#d}
  [ $day1 -ge $CLIMOSTART ] && [ $day2 -le $CLIMOEND ] && climofiles+=($file)
done
if [[ ${#climofiles[@]} -eq 0 ]]; then
  echo "ERROR: No climate files available between days ${CLIMOSTART} and ${CLIMOEND}."
  exit 1
fi
# Spindown files
# Used for dynamical timescale stuff
spindowndays=()
for file in $input/${fprefix}.d[0-9][0-9][0-9][0-9]-spindown$SPINDOWNOPT-d[0-9][0-9][0-9][0-9]-d[0-9][0-9][0-9][0-9].nc; do
  spindownday=${file#$input/${prefix}.}
  spindownday=${file%%-*} # the spindown day
  spindowndays+=($spindownday)
done
spindowndays=($(echo "${spindowndays[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')) # unique days
spindownfiles=()
for spindownday in ${spindowndays[@]}; do
  spindowngroup="" # for particular days
  for file in $input/${fprefix}.${spindownday}-spindown$SPINDOWNOPT-d[0-9][0-9][0-9][0-9]-d[0-9][0-9][0-9][0-9].nc; do
    daystring=${file#$input/${fprefix}.${spindownday}-spindown$SPINDOWNOPT-} # trim leading pattern
    daystring=${daystring%.nc}
    day1=${daystring%%-*} day1=${day1#d}
    day2=${daystring##*-} day2=${day2#d}
    [ $day1 -ge $SPINDOWNSTART ] && [ $day2 -le $SPINDOWNEND ] && spindowngroup+=" $file"
  done
  spindownfiles+=("$spindowngroup") # the group of files is preserved as single array element separated by strings
done
if [[ ${#spindownfiles[@]} -eq 0 ]]; then
  echo "WARNING: No spindown files available between days ${SPINDOWNSTART} and ${SPINDOWNEND}."
fi

################################################################################
# Set up destination coordinates for comparison with ERA-Interim
# and with other datasets; note remap will output an array of NaNs if you try
# to use remapycon or area weighted maps; with one-longitude, area weighted map
# is the same as a 'distance weighted' map, so use that one
griddes=eraint_griddes.txt
zaxisdes=eraint_zaxisdes.txt
[ ! -r $griddes ] && echo "ERROR: Could not find grid description file $cwd/$griddes." && exit 1
[ ! -r $zaxisdes ] && echo "ERROR: Could not find zaxis description file $cwd/$zaxisdes." && exit 1
eralevels=$(cat eraint_zaxisdes.txt | grep -A100 "levels" | grep -B100 "lbounds" | \
  sed '$d' | sed 's/[^0-9]*//' | xargs | tr ' ' ',') # the ERA-Interim level list
[ -z $eralevels ] && echo "ERROR: Could not parse interpolation levels from $cwd/$zaxisdes." && exit 1
# export CDO_GRIDSEARCH_RADIUS=5 # search radius; consider changing this
interp="-genlevelbounds,ztop=1013.25,zbot=0 -setzaxis,$cwd/$zaxisdes \
  -intlevel,$eralevels -remapdis,$cwd/$griddes,2" # interpolate horizontally and vertically
 # 2 says to consider only 2 nearest neighbors; otherwise get artifacts because default
 # behavior is probably 4-8 cells; algorithm doesn't know we have a 2D 'slice'

################################################################################
# Control climate data, and reference to other control climates
# Notes on interpolation:
# * Cannot chain the merge command; must be highest level no matter what. So
#   prepend timmean commands to files being merged.
# * For some reason doing -merge on chained/interpolated data results in duplicate
#   pressure level coordinates; interpolating them individually avoids this, and 
#   explicitly re-declaring the z-axis description also avoids this.
function Climate() {
  # Very simple function
  echo "Getting temporal mean from days ${climofiles[@]##*/${fprefix}.}."
  commands=("${climofiles[@]/#/ -timmean }")
  cdo $flags -ensmean ${commands[@]} tmp.nc
  echo "Interpolating result."
  cdo $flags $interp tmp.nc $fclimate; rm tmp.nc
  [ ! -e $fclimate ] && echo "ERROR: $fclimate not produced." && exit 1
}

#########################################i#######################################
# Time series of global energy terms
function Energy() {
  # Very simple function
  echo "Getting time series of energy terms through days ${allfiles[@]##*/${fprefix}.}."
  variables=CKEKM,CPEKE,CPMKM,CPMPE,DKE,DKM,GPE,GPM,KE,KM,PE,PM
  commands=("${allfiles[@]/#/ -mulc,101325 -vertmean -fldmean -selname,$variables }")
  cdo $flags -mergetime ${commands[@]} $fenergy # merge the means
}

################################################################################
# Get EOFs and PCs of zonal-mean data
function EOFs() {
  # Initial stuff
  neof=10 # number of EOFs
  echo "Getting EOF information."
  levels=(50 100 150 200 250 300 350 400 450 500 550 600 650 700 750 800 850 900 950 1000)
  # levels=({5..10}00) # range of pressure levels in mb

  # Declare helper function that gets EOF from individual level
  function EOF() {
    # Initial stuff
    region=$1 # the region
    level=$2 # the level
    [[ -z $region || -z $level ]] && echo "ERROR: EOF function needs two arguments." && return 1
    [[ ! ",$eralevels," =~ ",$level," ]] && echo "ERROR: Level is not an ERA-Interim level. Please choose from ${levels}." && return 1
    if [ "$region" == NH ]; then
      selregion="-sellonlatbox,-180,180,0,90" # north-hemisphere selection
    elif [ "$region" == SH ]; then
      selregion="-sellonlatbox,-180,180,-90,0" # south-hemisphere selection
    else echo "ERROR: Invalid region ${region}." && return 1
    fi
    # Message and determine filenames
    echo "Region ${region}; Level ${level}." # echo level
    printlevel=$(printf "%04d" $level)
    fseries=series${printlevel}.nc # name of time series
    feig=evals${region}${printlevel}.nc # here, time dimension is EOF
    fevec=evecs${region}${printlevel}.nc # here, time dimension
    feof=eofs${region}${printlevel}.nc # mean projection of standardized PC onto data
    fpc=pcs${region}${printlevel}.nc # here, 

    # First create complete time series of wind during
    # our 'climatology' timesteps (after spinup)
    if [ ! -r $fseries ]; then
      echo "Getting time series from files ${climofiles[@]##*/${fprefix}.}."
      commands=("${climofiles[@]/#/ -sellevel,$level $interp -selname,u }")
      cdo $flags -mergetime ${commands[@]} $fseries
    else
      echo "Time series for level $level already created."
    fi

    # Next get first N EOF eigenvectors
    export CDO_WEIGHT_MODE=on
    echo "Getting EOFs."
    cdo $flags -eof,$neof -setname,EOF -detrend $selregion $fseries \
      $feig $fevec # save eigenvalues and eigenvectors
    [[ ! -r $feig || ! -r $fevec ]] && echo "ERROR: Eigenvectors not produced." && return 1

    # Next get the PCs from the eigenvectors; eofcoeff not needed because computation is simple
    # Get dot product of area-weighted time series grid with EOF grid, then standardize time series
    # Creates one file for each EOF, then merge them
    echo "Getting PCs."
    pcs=() # initialize
    for ieof in $(seq 1 $neof); do # see: https://stackoverflow.com/a/169517/4970632
      pcs+=("-setname,PC$(printf "%02d" $ieof) -fldsum -mul \
        -mul $selregion $fseries -gridweights $fevec \
        -seltimestep,$ieof $fevec") # gets dot-product of weighted data with eigenvector
    done
    cdo $flags -merge ${pcs[@]} $fpc # merge results of the multiplications
    cdo $flags -div -sub $fpc -timmean $fpc \
                    -timstd $fpc \
        ${fpc%.nc}std.nc; mv ${fpc%.nc}std.nc $fpc # sub mean, divide by std
        # important not to name something like tmp.nc or other background processes
        # may overwrite it in process
    [ ! -r $fpc ] && echo "ERROR: PC time series not produced." && return 1

    # Finally, get EOFs in physical units by multiplying the standardized
    # values by the original data; result is "anomaly associated with 1 stdev
    # variation of the PC time series"
    echo "Projecting standardized PCs onto data."
    cdo $flags -timmean -mul -enlarge,$fevec $fpc $selregion $fseries \
      $feof # mean projection of standardized PC onto data
    [ ! -r $feof ] && echo "ERROR: Projection not created." && return 1
    return 0 # nice return value always
  }

  # Next execute EOF function for a bunch of levels
  # Get the eigenvectors, eigenalues, PCs, and EOFs in physical units
  for region in NH SH; do
    # Get all EOF params
    processes=()
    logfiles=()
    for level in ${levels[@]}; do
      logfile=${log}eofs${region}$(printf "%04d" $level)
      echo "Getting EOFs and PCs for ${region}; ${level}mb." | tee $logfile
      EOF $region $level &>$logfile & # send to background, every time
      processes+=($!) # save process ID
      logfiles+=($logfile) # add to list of logfiles
    done #; wait

    # Check outcomes
    # Since we make these background processes, any "exit" calls have no effect; 
    # have to check exit statuses manually for errors
    statuses=()
    for process in ${processes[@]}; do # then wait
      wait $process
      statuses+=($?)
    done
    cat ${logfiles[@]} >${log}eofs${region}; rm ${logfiles[@]}
    for status in ${statuses[@]}; do
      [ $status != 0 ] && echo "ERROR: One of the EOFs failed." && exit 1
    done
    logfiles=()

    # Merge files along levels
    for prefix in evecs evals pcs eofs; do
      logfile=${log}merge-${prefix}${region}
      echo "Merging ${prefix%s} files." | tee $logfile
      mergefiles=(${prefix}${region}[0-9][0-9][0-9][0-9].nc)
      [ ${#mergefiles[@]} -eq 0 ] && echo "ERROR: Couldn't find any ${prefix%s} files." && exit 1
      cdo $flags -merge ${mergefiles[@]} ${FILENAME}_${prefix}${region}.nc &>$logfile &
      logfiles+=($logfile)
    done; wait # then wait
    cat ${logfiles[@]} >>${log}eofs${region}; rm ${logfiles[@]}
  done
  # tail -vn +1 ${log}eof?* &>${log}eof # from https://stackoverflow.com/a/7816490/4970632
  # rm ${log}eof?* # remove inidivudal logfiles after combining them
  rm series*.nc evecs*.nc evals*.nc pcs*.nc eofs*.nc # delete dummy files
}

################################################################################
# Create ensemble-mean picture of spindown; use a bunch of individual files
function Spindown() {
  # First determine unique groups of spindown days
  outfiles=()
  echo "Creating records of individual spindown runs."
  for spindowngroup in "${spindownfiles[@]}"; do
    spindowngroup=($spindowngroup) # the space-separated list of files is now expanded into an array
    spindownday=${spindowngroup[0]##*/}
    spindownday=${spindownday%%-*}
    outfile=${fspindown%.nc}-${spindownday}.nc
    echo "Files in $spindownday run: ${spindowngroup[@]##*spindown-}."
    cdo $flags -mergetime ${spindowngroup[@]} $outfile
    outfiles+=($outfile)
  done
  # From results, get ensemble mean of full spindown process
  outfile=${fspindown%.nc}-ensemble.nc
  echo "Getting ensemble mean of spindown runs from files: ${outfiles[@]##*/}."
  cdo $flags -ensmean ${outfiles[@]} tmp.nc
  cdo $flags $interp tmp.nc $outfile; rm tmp.nc
  rm ${outfiles[@]}
}

################################################################################
# # Finally get ensemble-statistics for equilibrium climate files
# # Also get the selected difference for given days, and statistics
# function Diffs() {
#   region=$1
#   tspindown1=$2
#   tspindown2=$3
#   if [ -z $region ] || [ -z $tspindown1 ] || [ -z $tspindown2 ]; then
#     echo "ERROR: Must supply Diffs() function with region and times you wish to compare."
#     return 1
#   fi
#   # Get list of files
#   shopt -s nullglob
#   file1=${fequilibrium%.nc}-$tspindown1$region.nc
#   file2=${fequilibrium%.nc}-$tspindown2$region.nc
#   files=(${fequilibrium%.nc}-[0-9][0-9][0-9][0-9]$region.nc)
#   if [ -z $files ]; then
#     echo "WARNING: Could not find any equilibrium climate files."
#     return 1
#   fi
#   echo $file1
#   echo $file2
#   if [ ! -r $file1 ] || [ ! -r $file2 ]; then
#     echo "WARNING: Could not find the selected equilibrium climate files."
#     return 1
#   fi
#   # Our selected difference
#   echo "First the selected difference."
#   cdo $flags -sub $file1 $file2 ${fequilibrium%.nc}-diff$region.nc
#   # Bootstrap the differences
#   echo "Next bootstrap random differences, and get the standard deviation."
#   length=${#files[@]}
#   for i in {1..1000}; do
#     ch1=$(expr $RANDOM % $length) # random int32, find remainder
#     ch2=$(expr $RANDOM % $length)
#     while [ $ch1 -eq $ch2 ]; do
#       ch2=$(expr $RANDOM % $length) # repeat until two DIFFERENT choices
#     done
#     cdo $flags -sub ${files[$ch1]} ${files[$ch2]} boot$(printf "%04d" $i)$region.nc
#   done
#   # Just get every single possible difference instead
#   # echo "Next get the difference of every single possible pair, and percentiles."
#   # maxid=$(expr ${#files[@]} - 1) # maximum ID is length - 1
#   # for ch1 in $(seq 0 $maxid); do
#   #   for ch2 in $(seq $(expr $ch1 + 1) $maxid); do
#   #     cdo $flags sub ${files[$ch1]} ${files[$ch2]} \
#   #       boot$(printf "%02d" $ch1)$(printf "%02d" $ch2)$region.nc
#   #   done
#   # done
#   # Standard deviation and percentiles of differences
#   files=(boot[0-9][0-9][0-9][0-9]$region.nc) # will delete these later
#   cdo $flags -ensstd ${files[@]} ${fequilibrium%.nc}-diffstd$region.nc
#   if [ -x /usr/bin/cdo ]; then # anaconda version still uses integer params
#     /usr/bin/cdo -s -O -enspctl,2.5 ${files[@]} ${fequilibrium%.nc}-difflo$region.nc
#     /usr/bin/cdo -s -O -enspctl,97.5 ${files[@]} ${fequilibrium%.nc}-diffhi$region.nc
#       # apparently if try to use -P flag, will NOT EXECUTE IN PARALLEL
#   else echo "WARNING: Could not find CDO version with float-parameter percentile."
#   fi
#   rm ${files[@]} # remove the helper files
# }
