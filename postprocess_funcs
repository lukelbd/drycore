#!/bin/bash
# This contains functions that can be used by postprocess script
flags="-s -O" # overwrite, and only issue warnings
shopt -s nullglob # will return empty if no match
[ -z $CLIMOSTART ] && CLIMOSTART=0 # start of climate days
[ -z $CLIMOEND ] && CLIMOEND=9999 # end of climate days
[ -z $SPINDOWNSTART ] && SPINDOWNSTART=9999
[ -z $SPINDOWNEND ] && SPINDOWNEND=0
# File management/names
log=log_ # log prefix
fprefix=${FILENAME}_summary # original prefix file names
fclimate=${FILENAME}_climate.nc
fenergy=${FILENAME}_energy.nc
fspindownxs=${FILENAME}_spindown${SPINDOWNOPT}xs.nc
################################################################################
# Climate files
# Used for climate means and climate variability stuff
climofiles=()
allfiles=($input/${fprefix}.d[0-9][0-9][0-9][0-9]-d[0-9][0-9][0-9][0-9].nc)
for file in ${allfiles[@]}; do
  daystring=${file#$input/${fprefix}.}
  daystring=${daystring%.nc}
  day1=${daystring%%-*} day1=${day1#d}
  day2=${daystring##*-} day2=${day2#d}
  [ $day1 -ge $CLIMOSTART ] && [ $day2 -le $CLIMOEND ] && climofiles+=($file)
done
################################################################################
# Spindown files grouped by spindown day
# Used for determining if spindowns are 'unique'
startdays=()
for file in $input/${fprefix}.d[0-9][0-9][0-9][0-9]-spindown$SPINDOWNOPT-d[0-9][0-9][0-9][0-9]-d[0-9][0-9][0-9][0-9].nc; do
  startday=${file#$input/${fprefix}.}
  startday=${startday%%-*} # the spindown day
  startdays+=($startday)
done
startdays=($(echo "${startdays[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')) # unique days
spindownavefiles=()
for startday in ${startdays[@]}; do
  spindowngroup="" # for particular days
  for file in $input/${fprefix}.${startday}-spindown$SPINDOWNOPT-d[0-9][0-9][0-9][0-9]-d[0-9][0-9][0-9][0-9].nc; do
    daystring=${file#$input/${fprefix}.${startday}-spindown$SPINDOWNOPT-} # trim leading pattern
    daystring=${daystring%.nc}
    day1=${daystring%%-*} day1=${day1#d}
    day2=${daystring##*-} day2=${day2#d}
    [ $day1 -ge $SPINDOWNSTART ] && [ $day2 -le $SPINDOWNEND ] && spindowngroup+=" $file"
  done
  spindownavefiles+=("$spindowngroup") # the group of files is preserved as single array element separated by strings
done
# for spindowngroup in "${spindownavefiles[@]}"; do # testing
#   echo NEW GROUP; newgroup=(${spindowngroup}); echo ${newgroup[@]##*/}
# done
################################################################################
# Spindown files grouped by daystring (days after control run)
# Used for dynamical timescale stuff
daystrings=()
for file in $input/${fprefix}.d[0-9][0-9][0-9][0-9]-spindown$SPINDOWNOPT-d[0-9][0-9][0-9][0-9]-d[0-9][0-9][0-9][0-9].nc; do
  daystring=${file#$input/${fprefix}.d[0-9][0-9][0-9][0-9]-spindown$SPINDOWNOPT-} # trim leading pattern
  daystring=${daystring%.nc}
  day1=${daystring%%-*} day1=${day1#d}
  day2=${daystring##*-} day2=${day2#d}
  [ $day1 -ge $SPINDOWNSTART ] && [ $day2 -le $SPINDOWNEND ] && daystrings+=($daystring)
done
daystrings=($(echo "${daystrings[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')) # unique days
spindownxsfiles=()
for daystring in ${daystrings[@]}; do
  spindowngroup="" # for particular days
  for file in $input/${fprefix}.d[0-9][0-9][0-9][0-9]-spindown$SPINDOWNOPT-${daystring}.nc; do
    spindowngroup+=" $file"
  done
  spindownxsfiles+=("$spindowngroup") # the group of files is preserved as single array element separated by strings
done
# for spindowngroup in "${spindownxsfiles[@]}"; do # testing
#   echo NEW GROUP; newgroup=(${spindowngroup}); echo ${newgroup[@]##*/${fprefix}.}
# done

################################################################################
# Set up destination coordinates for comparison with ERA-Interim
# and with other datasets; note remap will output an array of NaNs if you try
# to use remapycon or area weighted maps; with one-longitude, area weighted map
# is the same as a 'distance weighted' map, so use that one
griddes=eraint_griddes.txt
zaxisdes=eraint_zaxisdes.txt
[ ! -r $griddes ] && echo "ERROR: Could not find grid description file $cwd/$griddes." && exit 1
[ ! -r $zaxisdes ] && echo "ERROR: Could not find zaxis description file $cwd/$zaxisdes." && exit 1
eralevels=$(cat eraint_zaxisdes.txt | grep -A100 "levels" | grep -B100 "lbounds" | \
  sed '$d' | sed 's/[^0-9]*//' | xargs | tr ' ' ',') # the ERA-Interim level list
[ -z $eralevels ] && echo "ERROR: Could not parse interpolation levels from $cwd/$zaxisdes." && exit 1
# export CDO_GRIDSEARCH_RADIUS=5 # search radius; consider changing this
# vinterp="-genlevelbounds,ztop=1013.25,zbot=0 -setzaxis,$cwd/$zaxisdes -intlevel,$eralevels" # don't need genlevelbounds because setzaxis adds bounds
hinterp="-remapdis,$cwd/$griddes,2"
vinterp="-setzaxis,$cwd/$zaxisdes -intlevel,$eralevels"
interp="$vinterp $hinterp"
 # 2 says to consider only 2 nearest neighbors; otherwise get artifacts because default
 # behavior is probably 4-8 cells; algorithm doesn't know we have a 2D 'slice'

################################################################################
# Control climate data, and reference to other control climates
# Notes on interpolation:
# * Cannot chain the merge command; must be highest level no matter what. So
#   prepend timmean commands to files being merged.
# * For some reason doing -merge on chained/interpolated data results in duplicate
#   pressure level coordinates; interpolating them individually avoids this, and 
#   explicitly re-declaring the z-axis description also avoids this.
function Climate() {
  # Verify files present
  if [[ ${#climofiles[@]} -eq 0 ]]; then
    echo "ERROR: No climate files available between days ${CLIMOSTART} and ${CLIMOEND}."
    exit 1
  fi
  # Very simple function
  echo "Getting temporal mean from days ${climofiles[@]##*/${fprefix}.}."
  commands=("${climofiles[@]/#/ -timmean }")
  cdo $flags -ensmean ${commands[@]} tmp.nc
  echo "Interpolating result."
  cdo $flags $interp tmp.nc $fclimate; rm tmp.nc
  [ ! -e $fclimate ] && echo "ERROR: $fclimate not produced." && exit 1
}

#########################################i#######################################
# Time series of global energy terms
function Energy() {
  # Verify files present
  if [[ ${#allfiles[@]} -eq 0 ]]; then
    echo "ERROR: No files available between days ${CLIMOSTART} and ${CLIMOEND}."
    exit 1
  fi
  # Very simple function
  echo "Getting time series of energy terms through days ${allfiles[@]##*/${fprefix}.}."
  variables=CKEKM,CPEKE,CPMKM,CPMPE,DKE,DKM,GPE,GPM,KE,KM,PE,PM
  commands=("${allfiles[@]/#/ -mulc,101325 -vertmean -fldmean -selname,$variables }")
  cdo $flags -mergetime ${commands[@]} $fenergy # merge the means
}

################################################################################
# Get EOFs and PCs of zonal-mean data
function EOFs() {
  # Verify files present
  if [[ ${#climofiles[@]} -eq 0 ]]; then
    echo "ERROR: No climate files available between days ${CLIMOSTART} and ${CLIMOEND}."
    exit 1
  fi
  # Initial stuff
  neof=10 # number of EOFs
  echo "Getting EOF information."
  levels=(50 100 150 200 250 300 350 400 450 500 550 600 650 700 750 800 850 900 950 1000)
  # levels=({5..10}00) # range of pressure levels in mb

  # Declare helper function that gets EOF from individual level
  function EOF() {
    # Initial stuff
    region=$1 # the region
    level=$2 # the level
    [[ -z $region || -z $level ]] && echo "ERROR: EOF function needs two arguments." && return 1
    [[ ! ",$eralevels," =~ ",$level," ]] && echo "ERROR: Level is not an ERA-Interim level. Please choose from ${levels}." && return 1
    case $region in
      NH) selregion="-sellonlatbox,-180,180,0,90" ;; # north-hemisphere selection
      SH) selregion="-sellonlatbox,-180,180,-90,0" ;; # south-hemisphere selection
      *) echo "ERROR: Invalid region ${region}." && return 1 ;;
    esac
    # Message and determine filenames
    echo "Region ${region}; Level ${level}." # echo level
    printlevel=$(printf "%04d" $level)
    fseries=series${printlevel}.nc # name of time series
    feig=evals${region}${printlevel}.nc # here, time dimension is EOF
    fevec=evecs${region}${printlevel}.nc # here, time dimension
    feof=eofs${region}${printlevel}.nc # mean projection of standardized PC onto data
    fpc=pcs${region}${printlevel}.nc # here, 

    # First create complete time series of wind during
    # our 'climatology' timesteps (after spinup)
    if [ ! -r $fseries ]; then
      echo "Getting time series from files ${climofiles[@]##*/${fprefix}.}."
      commands=("${climofiles[@]/#/ -sellevel,$level $interp -selname,u }")
      cdo $flags -mergetime ${commands[@]} $fseries
    else
      echo "Time series for level $level already created."
    fi

    # Next get first N EOF eigenvectors
    export CDO_WEIGHT_MODE=on
    echo "Getting EOFs."
    cdo $flags -eof,$neof -setname,EOF -detrend $selregion $fseries \
      $feig $fevec # save eigenvalues and eigenvectors
    [[ ! -r $feig || ! -r $fevec ]] && echo "ERROR: Eigenvectors not produced." && return 1

    # Next get the PCs from the eigenvectors; eofcoeff not needed because computation is simple
    # Get dot product of area-weighted time series grid with EOF grid, then standardize time series
    # Creates one file for each EOF, then merge them
    echo "Getting PCs."
    pcs=() # initialize
    for ieof in $(seq 1 $neof); do # see: https://stackoverflow.com/a/169517/4970632
      pcs+=("-setname,PC$(printf "%02d" $ieof) -fldsum -mul \
        -mul $selregion $fseries -gridweights $fevec \
        -seltimestep,$ieof $fevec") # gets dot-product of weighted data with eigenvector
    done
    cdo $flags -merge ${pcs[@]} $fpc # merge results of the multiplications
    cdo $flags -div -sub $fpc -timmean $fpc \
                    -timstd $fpc \
        ${fpc%.nc}std.nc; mv ${fpc%.nc}std.nc $fpc # sub mean, divide by std
        # important not to name something like tmp.nc or other background processes
        # may overwrite it in process
    [ ! -r $fpc ] && echo "ERROR: PC time series not produced." && return 1

    # Finally, get EOFs in physical units by multiplying the standardized
    # values by the original data; result is "anomaly associated with 1 stdev
    # variation of the PC time series"
    echo "Projecting standardized PCs onto data."
    cdo $flags -timmean -mul -enlarge,$fevec $fpc $selregion $fseries \
      $feof # mean projection of standardized PC onto data
    [ ! -r $feof ] && echo "ERROR: Projection not created." && return 1
    return 0 # nice return value always
  }

  # Next execute EOF function for a bunch of levels
  # Get the eigenvectors, eigenalues, PCs, and EOFs in physical units
  for region in NH SH; do
    # Get all EOF params
    processes=()
    logfiles=()
    for level in ${levels[@]}; do
      logfile=${log}eofs${region}$(printf "%04d" $level)
      echo "Getting EOFs and PCs for ${region}; ${level}mb." | tee $logfile
      EOF $region $level &>$logfile & # send to background, every time
      processes+=($!) # save process ID
      logfiles+=($logfile) # add to list of logfiles
    done #; wait

    # Check outcomes
    # Since we make these background processes, any "exit" calls have no effect; 
    # have to check exit statuses manually for errors
    statuses=()
    for process in ${processes[@]}; do # then wait
      wait $process
      statuses+=($?)
    done
    cat ${logfiles[@]} >${log}eofs${region}; rm ${logfiles[@]}
    for status in ${statuses[@]}; do
      [ $status != 0 ] && echo "ERROR: One of the EOFs failed." && exit 1
    done
    logfiles=()

    # Merge files along levels
    for prefix in evecs evals pcs eofs; do
      logfile=${log}merge-${prefix}${region}
      outfile=${FILENAME}_${prefix}${region}.nc
      echo "Merging ${prefix%s} files." | tee $logfile
      mergefiles=(${prefix}${region}[0-9][0-9][0-9][0-9].nc)
      [ ${#mergefiles[@]} -eq 0 ] && echo "ERROR: Couldn't find any ${prefix%s} files." && exit 1
      cdo $flags -merge ${mergefiles[@]} $outfile &>$logfile &
      logfiles+=($logfile)
    done; wait # then wait
    cat ${logfiles[@]} >>${log}eofs${region}; rm ${logfiles[@]}
  done
  # tail -vn +1 ${log}eof?* &>${log}eof # from https://stackoverflow.com/a/7816490/4970632
  # rm ${log}eof?* # remove inidivudal logfiles after combining them
  rm series*.nc evecs*.nc evals*.nc pcs*.nc eofs*.nc # delete dummy files
}

################################################################################
# Create ensemble-mean latitude cross-section of spindown, with time axis preserved
# * Old approach had us creating massive time-merged files of each spindown run, then
#   taking the ensemble mean of each massive file
# * New approach just has us get the ensemble mean of each day-range, then merge the time
#   axis of the small group of ensemble means
# * Each iteration of loop in new approach takes about as long as iterations from old approach (a couple minutes),
#   and the final step doesn't hang anymore (not sure if it ever would have finished).
function SpindownXS() {
  # Verify files present
  if [[ ${#spindownxsfiles[@]} -eq 0 ]]; then
    echo "ERROR: No spindown files available between days ${SPINDOWNSTART} and ${SPINDOWNEND}."
    exit 1
  fi
  # First determine unique groups of spindown days
  count= # start as empty
  outfiles=() # save temporary files
  echo "Getting ensemble mean from ${#spindownxsfiles[@]} groups."
  for spindowngroup in "${spindownxsfiles[@]}"; do
    # First run a simple check
    spindowngroup=($spindowngroup) # the space-separated list of files is now expanded into an array
    newcount=${#spindowngroup[@]}
    members=(${spindowngroup[@]##*/${fprefix}.})
    members=(${members[@]%%-*})
    [ ! -z $count ] && [ $count != $newcount ] && \
      echo "ERROR: $newcount spindown runs in this group, but $count files in previous groups." && exit 1
    count=$newcount
    # Next get ensemble mean of files; timesteps will be adopted from the first input file
    daystring=${spindowngroup[0]#$input/${fprefix}.d[0-9][0-9][0-9][0-9]-spindown$SPINDOWNOPT-}
    daystring=${daystring%.nc}
    outfile=$input/spindown${daystring}.nc
    echo "Spindown runs in the ${daystring} group: ${members[@]}."
    cdo $flags -ensmean ${spindowngroup[@]} $outfile &>/dev/null # log not necessary here
    outfiles+=($outfile)
  done; wait # wait for everything
  # From results, get ensemble mean of full spindown process
  echo "Merging the ensemble means: ${outfiles[@]##*/}."
  cdo $flags -mergetime ${outfiles[@]} tmp.nc
  cdo $flags $interp tmp.nc $fspindownxs; rm tmp.nc
  rm ${outfiles[@]}
}
################################################################################
# Create files with 'record' dimension showing global-average and polar-average
# spindown process for every branched spindown run
# Use CDO ngrids to create temporary fix for files with globally averaged values
function SpindownAVE() {
  # Verify files present
  if [[ ${#spindownavefiles[@]} -eq 0 ]]; then
    echo "ERROR: No spindown files available between days ${SPINDOWNSTART} and ${SPINDOWNEND}."
    exit 1
  fi
  # First determine unique groups of spindown days
  counter=0 # counter for waiting
  echo "Creating records of individual spindown runs."
  # for region in globe polenh polesh; do
  for region in polenh; do
    outfiles=()
    spindowndays="" # empty string
    echo "Average over ${region}."
    for spindowngroup in "${spindownavefiles[@]}"; do
      # Initial stuff
      counter=$(($counter+1))
      spindowngroup=($spindowngroup) # the space-separated list of files is now expanded into an array
      spindownday=${spindowngroup[0]#$input/${fprefix}.}
      spindownday=${spindownday%%-*} # the spindown day
      # Merge the times
      echo "Files in ${spindownday} run: ${spindowngroup[@]##*spindown?-}."
      # Create spindown files
      # * Accomadate old files with two grids (global energy budget variables,
      #   and normal latitude-slice variables)
      # * Beware very strange issue; if combine selgrid with sellevidx/seltimestep, with the
      #   latter coming after sellonlatbox, get error 'longitude dimension is too small'; BUG
      # * Also got the error when chaining with vinterp, even if selection came before sellonlatbox
      outfile=$input/spindown${spindownday#d}${region}.nc
      case $region in
        polenh) selregion="-sellonlatbox,-180,180,60,90" ;;
        polesh) selregion="-sellonlatbox,-180,180,-90,-60" ;;
        globe) selregion="" ;;
        *) echo "ERROR: Invalid region ${region}." && return 1 ;;
      esac
      ngrids=$(cdo -s ngrids ${spindowngroup[0]})
      # Version when spindowns had the global mean energy stuff
      sel="" # empty
      # sel="-seltimestep,1" # for quicker testing
      if [ $ngrids == 1 ] || [[ $ngrids == 2 && $region != globe ]]; then # select first grid; second grid is global mean, which doesn't apply here
        commands=(${spindowngroup[@]/#/ -fldmean $sel $selregion -selgrid,1 }) # interpolate mean over region
        { cdo $flags -mergetime ${commands[@]} $outfile #&>/dev/null & # log not necessary here
        echo "Interpolating ${spindownday} run."
        cdo $flags $vinterp $outfile ${outfile%.nc}_interpolated.nc
        mv ${outfile%.nc}_interpolated.nc $outfile
        } &>/dev/null &
      elif [ $ngrids == 2 ]; then
        commands1=("${spindowngroup[@]/#/ -fldmean $sel $selregion -selgrid,1 }")
        commands2=("${spindowngroup[@]/#/ $sel -selgrid,2 }") # the global mean quantities
        { cdo $flags -mergetime ${commands1[@]} ${outfile%.nc}_tmp1.nc #&>/dev/null & # log not necessary here
        cdo $flags -mergetime ${commands2[@]} ${outfile%.nc}_tmp2.nc #&>/dev/null & # log not necessary here
        echo "Interpolating ${spindownday} run, merging global energy budget params."
        cdo $flags merge ${outfile%.nc}_tmp1.nc ${outfile%.nc}_tmp2.nc $outfile
        rm ${outfile%.nc}_tmp1.nc ${outfile%.nc}_tmp2.nc
        cdo $flags $vinterp $outfile ${outfile%.nc}_interpolated.nc
        mv ${outfile%.nc}_interpolated.nc $outfile
        } &>/dev/null &
      else echo "ERROR: More than 2 grids present." && exit 1
      fi
      [ $(($counter % 10)) -eq 0 ] && wait # only do a handful at a time
      outfiles+=($outfile) # add outfile
      spindowndays+="${spindownday#d}," # add spindown day
      # [ $counter -eq 2 ] && wait # only do a handful at a time
      # [ $counter -eq 2 ] && break # testing
    done; wait
    # From results, create ensemble file of spindown process
    # CDO can't read 5-D files so no more CDO processing hereafter
    echo "Getting ensemble record of spindown runs from files: ${outfiles[@]##*/}."
    ensfile=${FILENAME}_spindown${SPINDOWNOPT}${region}.nc
    ncecat -O -u member ${outfiles[@]} $ensfile
    ncks -O -4 --fix_rec_dmn member $ensfile $ensfile
    ncks -O -4 --mk_rec_dmn time $ensfile $ensfile
    ncap2 -O -s "member[\$member]={${spindowndays%,}}" $ensfile $ensfile
    ncatted -O -a long_name,member,o,c,"day of initiation from control run branch" \
               -a units,member,o,c,"days since 0000-00-00 00:00:00" $ensfile
    ncks -O $ensfile $ensfile # alphabetize output
      # fixes record dimension; see https://sourceforge.net/p/nco/bugs/85/
      # the -4 is needed or an error is thrown, weirdly
    rm ${outfiles[@]}
  done
  # Special treatment where we want to average cross-sections
  # from each hemisphere; modify this maybe
  file1=(${FILENAME}_*polenh.nc) file2=(${FILENAME}_*polesh.nc)
  [[ ${#file1[@]} != 1 || ${#file2[@]} != 1 ]] && echo "ERROR: Had issues averaging poles together." && exit 1
  ncea $file1 $file2 ${FILENAME}_spindown${SPINDOWNOPT}poles.nc
  rm $file1 $file2
}
# # Merge the dime dimensions before taking ensemble mean
# function Spindown{
#   # Verify files present
#   if [[ ${#spindownfiles[@]} -eq 0 ]]; then
#     echo "ERROR: No spindown files available between days ${SPINDOWNSTART} and ${SPINDOWNEND}."
#     exit 1
#   fi
#   # First determine unique groups of spindown days
#   counter=0 # counter for waiting
#   outfiles=()
#   echo "Creating records of individual spindown runs."
#   for spindowngroup in "${spindownfiles[@]}"; do
#     counter=$(($counter+1))
#     spindowngroup=($spindowngroup) # the space-separated list of files is now expanded into an array
#     spindownday=${spindowngroup[0]#$input/${fprefix}.}
#     spindownday=${spindownday%%-*} # the spindown day
#     outfile=$input/spindown${spindownday#d}.nc
#     echo "Files in ${spindownday} run: ${spindowngroup[@]##*spindown?-}."
#     cdo $flags -mergetime ${spindowngroup[@]} $outfile &>/dev/null & # log not necessary here
#     [ $(($counter % 10)) -eq 0 ] && wait # only do a handful at a time
#     outfiles+=($outfile)
#   done; wait # wait for everything
#   # From results, get ensemble mean of full spindown process
#   echo "Getting ensemble mean of spindown runs from files: ${outfiles[@]##*/}."
#   cdo $flags -ensmean ${outfiles[@]} tmp.nc
#   cdo $flags $interp tmp.nc $fspindown; rm tmp.nc
#   rm ${outfiles[@]}
# }

################################################################################
# # Finally get ensemble-statistics for equilibrium climate files
# # Also get the selected difference for given days, and statistics
# function Diffs() {
#   region=$1
#   tspindown1=$2
#   tspindown2=$3
#   if [ -z $region ] || [ -z $tspindown1 ] || [ -z $tspindown2 ]; then
#     echo "ERROR: Must supply Diffs() function with region and times you wish to compare."
#     return 1
#   fi
#   # Get list of files
#   shopt -s nullglob
#   file1=${fequilibrium%.nc}-$tspindown1$region.nc
#   file2=${fequilibrium%.nc}-$tspindown2$region.nc
#   files=(${fequilibrium%.nc}-[0-9][0-9][0-9][0-9]$region.nc)
#   if [ -z $files ]; then
#     echo "WARNING: Could not find any equilibrium climate files."
#     return 1
#   fi
#   echo $file1
#   echo $file2
#   if [ ! -r $file1 ] || [ ! -r $file2 ]; then
#     echo "WARNING: Could not find the selected equilibrium climate files."
#     return 1
#   fi
#   # Our selected difference
#   echo "First the selected difference."
#   cdo $flags -sub $file1 $file2 ${fequilibrium%.nc}-diff$region.nc
#   # Bootstrap the differences
#   echo "Next bootstrap random differences, and get the standard deviation."
#   length=${#files[@]}
#   for i in {1..1000}; do
#     ch1=$(expr $RANDOM % $length) # random int32, find remainder
#     ch2=$(expr $RANDOM % $length)
#     while [ $ch1 -eq $ch2 ]; do
#       ch2=$(expr $RANDOM % $length) # repeat until two DIFFERENT choices
#     done
#     cdo $flags -sub ${files[$ch1]} ${files[$ch2]} boot$(printf "%04d" $i)$region.nc
#   done
#   # Just get every single possible difference instead
#   # echo "Next get the difference of every single possible pair, and percentiles."
#   # maxid=$(expr ${#files[@]} - 1) # maximum ID is length - 1
#   # for ch1 in $(seq 0 $maxid); do
#   #   for ch2 in $(seq $(expr $ch1 + 1) $maxid); do
#   #     cdo $flags sub ${files[$ch1]} ${files[$ch2]} \
#   #       boot$(printf "%02d" $ch1)$(printf "%02d" $ch2)$region.nc
#   #   done
#   # done
#   # Standard deviation and percentiles of differences
#   files=(boot[0-9][0-9][0-9][0-9]$region.nc) # will delete these later
#   cdo $flags -ensstd ${files[@]} ${fequilibrium%.nc}-diffstd$region.nc
#   if [ -x /usr/bin/cdo ]; then # anaconda version still uses integer params
#     /usr/bin/cdo -s -O -enspctl,2.5 ${files[@]} ${fequilibrium%.nc}-difflo$region.nc
#     /usr/bin/cdo -s -O -enspctl,97.5 ${files[@]} ${fequilibrium%.nc}-diffhi$region.nc
#       # apparently if try to use -P flag, will NOT EXECUTE IN PARALLEL
#   else echo "WARNING: Could not find CDO version with float-parameter percentile."
#   fi
#   rm ${files[@]} # remove the helper files
# }
