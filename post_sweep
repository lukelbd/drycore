#!/usr/bin/env bash
usage='post_glob [OPTION...] GLOB1 [GLOB2 ...]'
doc="This script performs post-processing calculations using all experiments
matching a quoted input glob pattern.

Usage

  $usage

Required arguments

  GLOB  The quoted glob pattern(s) for experiment directories for which we
        want to process data.

Optional arguments

  -d|--dryrun        Dry run.
  -p=*|--parallel=*  Maximum number of parallel threads used to run ./post_experiment.
  -f=*|--filename=*  The filename prefix sent to ./post_experiment. Defaults to '2xdaily_inst'.
  -*                 Extra flags passed to post_experiment.
"
# Processes files in directories matching some glob pattern
shopt -s nullglob
source ${0%/*}/header.sh
cwd=$(pwd)
storage=$HOME/data
[ -d $storage ] || mkdir $storage
storage=$storage/timescales  # put in this subdirectory
[ -d $storage ] || mkdir $storage

# Command-line options
pmax=1 # paralelization
dryrun=false
filename=2xdaily_inst
unset flags
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)          echo "$doc"; exit 0; ;;
    -d|--dryrun)        dryrun=true ;;
    -p=*|--parallel=*)  pmax=${1#*=} ;;
    -f=*|--filename=*)  filename=${1#*=} ;;
    -*)                 flags+="$1 " ;;
    *)                  globs+=("$1") ;;
  esac
  shift
done
post=$cwd/post_experiment
$dryrun && post="echo $post"

# Iterate
# NOTE: May get 'different parameter names' cdo warnings; this generally means
# the order of parameters or something is different, and cdo has to shuffle
# them around, but files all have same variables.
t=$(date +%s)
counter=0
for scratch in ~/scratch* ~/scratch*/timescales*; do  # query *symlinks*
  for glob in "${globs[@]}"; do
    echo "Glob: $glob"
    unset folder
    for folder in $scratch/$glob; do
      # Run stuff; will generate individual logs for each 'type' of
      # post-process, and a bigger log that indicates what processes are running
      echo
      echo "Experiment: '${folder##*/}'."
      dest="$storage/${folder##*/}" # saving processed data
      [ -d "$dest" ] || mkdir $dest

      # Opionally run in parallel, or just linearly
      echo "Flags: $flags"
      if [ $pmax -eq 1 ]; then
        $post "$filename" "$folder" "$dest" $flags \
          || echo "A post-processing step failed."
          # || raise "A post-processing step failed."
      else
        # $post "$filename" "$folder" "$dest" $flags &
        $post "$filename" "$folder" "$dest" $flags &
        pids+=($!) # record process
      fi

      # Crude parallelization across multiple experiments
      if [ $pmax -ne 1 ]; then
        counter=$((counter + 1))
        if [ $((counter % pmax)) -eq 0 ]; then
          echo "Waiting for processes: ${pids[*]}."
          for pid in ${pids[@]}; do
            wait $pid \
              || echo "A post-processing step failed."
              # || raise "A post-processing step failed."
          done
          echo "Elapsed time: $(($(date +%s) - t))s."
          t=$(date +%s)
          unset pids # reset tracked process ids
        fi
      fi
    done
  done
done
