#!/usr/bin/env bash
usage='post_series [OPTION...] GLOB1 [GLOB2 ...]'
doc="This script performs post-processing calculations using all experiments
matching a quoted input glob pattern.

Usage

  $usage

Required arguments

  GLOB  The quoted glob pattern(s) for experiment directories for which we
        want to process data.

Optional arguments

  -d    Dry run.
  -p=*  Maximum number of parallel threads used to run ./post_run.
  -f=*  The filename prefix sent to ./post_run. Defaults to '2xdaily_inst'.
  -*    Extra flags passed to post_run.
"
# Processes files in directories matching some glob pattern
shopt -s nullglob
cwd=$(pwd)
storage=$HOME/data
raise() {
  echo "Usage: $usage"
  echo "Error: $@" 1>&2
  exit 1
}
case ${HOSTNAME%%.*} in
  monde*)    scratches=(/mdata1/ldavis /mdata2/ldavis) ;;
  cheyenne*) scratches=/glade/scratch/davislu ;;
  *) raise "Unknown host, must edit batch script before continuing." ;;
esac
[ -d $storage ] || mkdir $storage
storage="$storage/timescales" # put in this subdirectory
[ -d $storage ] || mkdir $storage

# Command-line options
pmax=1 # paralelization
dryrun=false
filename=2xdaily_inst
unset flags
while [ $# -gt 0 ]; do
  case "$1" in
    -d)   dryrun=true ;;
    -p=*) pmax=${1#*=} ;;
    -f=*) filename=${1#*=} ;;
    -*)   flags+="$1 " ;;
    *)    globs+=("$1") ;;
  esac
  shift
done
# Defaults
post=$cwd/post_run
$dryrun && post="echo $post"
echo "Using flags: $flags"

# Iterate
# NOTE: May get 'different parameter names' cdo warnings; this generally means
# the order of parameters or something is different, and cdo has to shuffle
# them around, but files all have same variables.
t=$(date +%s)
counter=0
for scratch in ${scratches[@]}; do
  subfolders=($scratch $scratch/timescales-*) # subfolders contain some older experiment series
  for subfolder in ${subfolders[@]}; do
    for glob in "${globs[@]}"; do
      unset folder
      for folder in $subfolder/$glob; do
        # Run stuff; will generate individual logs for each 'type' of
        # post-process, and a bigger log that indicates what processes are running
        echo
        echo "Experiment: \"${folder##*/}\"."
        dest="$storage/${folder##*/}" # saving processed data
        [ -d "$dest" ] || mkdir $dest

        # Opionally run in parallel, or just linearly
        log=$folder/post.log
        echo "Log file: $log"
        echo "Flags: $flags"
        if [ $pmax -eq 1 ]; then
          $post "$filename" "$folder" "$dest" $flags
          [ $? -ne 0 ] && raise "A post-processing step failed."
        else
          # $post "$filename" "$folder" "$dest" $flags &>$log &
          $post "$filename" "$folder" "$dest" $flags &
          pids+=($!) # record process
        fi

        # Crude parallelization across multiple experiments
        if [ $pmax -ne 1 ]; then
          let counter+=1
          if [ $((counter % pmax)) -eq 0 ]; then
            echo "Waiting for processes: ${pids[@]}."
            for pid in ${pids[@]}; do
              wait $pid
              [ $? -ne 0 ] && raise "A post-processing step failed."
            done
            echo "Elapsed time: $(($(date +%s) - t))s."
            t=$(date +%s)
            unset pids # reset tracked process ids
          fi
        fi
      done
    done
  done
done
