#!/usr/bin/env bash
################################################################################
# NOTE: Previously sweeped parameter space with ugly hodgpodge of exact doubling;
# dividing into 1, 2.5, 5; and diving into 1, 2, 4; now, we always use the 1, 2, 4
# to logarithmically sweep space. Existing directories have been moved to their
# closest values in this new spacing. White lie, but probably insignificant differences.
################################################################################
# Error
raise() {
  echo "Error: $@" 1>&2
  exit 1
}
# Processes files in directories matching some glob pattern
shopt -s nullglob
cwd=$(pwd)
storage=$HOME/data
case ${HOSTNAME%%.*} in
  monde*)    scratches=(/mdata1/ldavis /mdata2/ldavis) ;;
  cheyenne*) scratches=/glade/scratch/davislu ;;
  *) raise "Unknown host, must edit batch script before continuing." ;;
esac
! [ -d $storage ] && mkdir $storage
storage="$storage/timescales" # put in this subdirectory
! [ -d $storage ] && mkdir $storage

# Command-line options
pmax=1 # paralelization
runmode=0 # 0 is control run, the rest are different spindown modes:
rdays=100
dryrun=false
filename=2xdaily_inst
climo_start=500
climo_end=5500
spin_start=0
spin_end=9900 # just get all of them
unset flags
while [ $# -gt 0 ]; do
  case "$1" in
    -d) dryrun=true ;;
    -p=*) pmax=${1#*=} ;;
    -f=*) filename=${1#*=} ;;
    -r=*) rdays=${1#*=} ;; # restart day blocks
    -m=*) runmode=${1#*=} ;;
    -c1=*) climo_start=${1#*=} ;;
    -c2=*) climo_end=${1#*=} ;;
    -s1=*) spin_start=${1#*=} ;;
    -s2=*) spin_end=${1#*=} ;;
    -*) flags+="$1 " ;;
    *)  globs+=("$1") ;;
  esac
  shift
done
# Defaults
post=$cwd/post_run
$dryrun && post="echo $post"
flags="$flags -r=$rdays -m=$runmode -c1=$climo_start -c2=$climo_end -s1=$spin_start -s2=$spin_end"
echo "Using flags: $flags"

# Iterate
# NOTE: May get 'different parameter names' cdo warnings; this generally means
# the order of parameters or something is different, and cdo has to shuffle
# them around, but files all have same variables.
t=$(date +%s)
counter=0
for scratch in ${scratches[@]}; do
  subfolders=($scratch $scratch/timescales-*) # subfolders contain some older experiment series
  for subfolder in ${subfolders[@]}; do
    for glob in "${globs[@]}"; do
      unset folder
      for folder in $subfolder/$glob; do
        # Run stuff; will generate individual logs for each 'type' of
        # post-process, and a bigger log that indicates what processes are running
        echo
        echo "Experiment: \"${folder##*/}\"."
        dest="$storage/${folder##*/}" # saving processed data
        ! [ -d "$dest" ] && mkdir $dest

        # Opionally run in parallel, or just linearly
        log=$folder/post.log
        echo "Log file: $log"
        echo "Flags: $flags"
        if [ $pmax -eq 1 ]; then
          $post "$filename" "$folder" "$dest" $flags
          [ $? -ne 0 ] && raise "A post-processing step failed."
        else
          # $post "$filename" "$folder" "$dest" $flags &>$log &
          $post "$filename" "$folder" "$dest" $flags &
          pids+=($!) # record process
        fi

        # Crude parallelization across multiple experiments
        if [ $pmax -ne 1 ]; then
          let counter+=1
          if [ $((counter % pmax)) -eq 0 ]; then
            echo "Waiting for processes: ${pids[@]}."
            for pid in ${pids[@]}; do
              wait $pid
              [ $? -ne 0 ] && raise "A post-processing step failed."
            done
            echo "Elapsed time: $(($(date +%s) - t))s."
            t=$(date +%s)
            unset pids # reset tracked process ids
          fi
        fi
      done
    done
  done
done
