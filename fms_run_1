#!/bin/bash
# The runscript, assumes model and mppnccombine are compiled
ulimit -s unlimited # set max open files
cwd=`pwd`           # should be in runscript location
exptype=${PWD##*/}  # just name of cd, then parameter expansion operation (google this)
  # two ## trims by longest matching case and one # by shortest matching case
home=$HOME
hostname=$HOSTNAME
if [ "$hostname" = "olbers" ]; then
  mpirun=/usr/local/mpich3/bin/mpirun
elif [ "$hostname" = "gauss" ]; then
  mpirun=/usr/local/mpich3-pgi/bin/mpirun
elif [ "$hostname" = "euclid" ]; then # everything is in same lib/bin
  mpirun=/usr/local/bin/mpirun
else
  echo "ERROR: Unknown host, must configure library and binary locations before running."
  exit
fi
#------------------------------------------------------------------------------
# Define the run variables
#------------------------------------------------------------------------------
# Most important settings
expname=t42l40_ka0d1000 # ka goes to zero (or, fortran code says tau --> inf) at day 1000
tstart=0     # first day of integration; set to 0 for new run.
tend=10      # final day; Jeremiah used 8000
delta=10     # number of days per iteration; Jeremiah had 500
dt_atmos=600 # time step, in seconds; default 10min
npes=8       # processor count
# Variables for Newtonian cooling run, changes tau during integration (<0 == units 'days')
ka="-40."    # atmosphere
ks="-4."     # boundary layer
kf="-1."     # Rayleigh damping
tswitch=1000 # switch at 1000 days
# Output
scratch=$home/output
outdir=$scratch/$expname # where model is run and model output is produced
prefix=$outdir/$expname  # prefix for folder names containing output each requested day
logdir=$outdir/logs
outfile=$logdir/$expname.out
errfile=$logdir/$expname.err
# Input
parameterdir=$cwd/run_parameters # where the namelist, field and diag_tables, initial conditions, etc. are kept
namelist=$parameterdir/$expname/namelists            # path to namelist file
diagtable=$parameterdir/$expname/diag_table          # path to diagnositics table
fieldtable=$parameterdir/$expname/field_table        # path to field table (specifies tracers)
topo_input=$parameterdir/$expname/topography.data.nc # path to topography input file (optional), must request it in namelist
execdir=$cwd/exec.$hostname                          # where code is compiled and executable is created
mppnccombine=$cwd/../../bin/mppnccombine.$hostname   # path to executable mppnccombine
# execdir=$cwd/exec
# mppnccombine=$cwd/../../bin/mppnccombine             # path to executable mppnccombine

#------------------------------------------------------------------------------
# Preparations
#------------------------------------------------------------------------------
# Check that executables, namelists, etc. are present
if [ ! -x ${execdir}/fms.x ]; then # x for 'executable'
  echo "ERROR: The executable ${execdir}/fms.x is missing."
  exit
fi
if [ ! -x $mppnccombine ]; then
  echo "ERROR: The mpp combine executable $mppnccombine is missing."
  exit
fi
if [ ! -r $namelist ]; then
  echo "ERROR: The namelist file $namelist is missing or not readable."
  exit
fi
if [ ! -r $diagtable ]; then
  echo "ERROR: The diag table $diagtable is missing or not readable."
  exit
fi
if [ ! -r $fieldtable ]; then
  echo "ERROR: The field table $fieldtable is missing or not readable."
  exit
fi
# Make the outdir/workdir
if [ ! -d $outdir ]; then 
  mkdir $outdir
fi
# Prepare for the loop
pday=`expr $tstart`        # previous day
cday=`expr $pday + $delta` # current day

#------------------------------------------------------------------------------
# Run the model in blocks of $delta days, switching off cooling at some time
#------------------------------------------------------------------------------
origin=$(date +%s)
while [ "$cday" -le "$tend" ]; do
  # Message
  echo "Running from day $pday to day $cday."
  time=$(date +%s)

  # Modify tau, if at threshold
  # if [[ "$expname" = *"ka"* ]]; then
  if [ "$cday" -ge "$tswitch" ]; then
    ka="0."
    ks="0."
    # kf="0." # keep Rayleigh damping on
  fi
  # fi

  # If this is not a cold start (the first iteration). Look for restart files. If they
  # don't exist (or are unreadable), exit. Should have a previous working directory valid, 
  # with name corresponding to "previous day"==time_start, and model will ALWAYS generate 
  # these RESTART/*.ref* files
  previous_workdir=${prefix}_d$(printf "%04d" $pday)
  if [ "$cday" -gt "$delta" ]; then
    # First, any model type needs this file
    if [ ! -r ${previous_workdir}/RESTART/atmos_model.res ]; then # r for 'readable'
      echo "Missing: ${previous_workdir}/RESTART/atmos_model.res!"
      exit
    fi
    # Next, some model type-dependent files
    # Spectral
    if [ "$exptype" = "spectral" ]; then	
      if [ ! -r ${previous_workdir}/RESTART/atmosphere.res.nc ]; then
        echo "ERROR: Missing or unreadable restart files from ${previous_workdir}/RESTART/"
        echo 'Missing atmosphere.res.nc!'
        exit
      fi
      if [ ! -r ${previous_workdir}/RESTART/spectral_dynamics.res.nc ]; then
        echo "ERROR: Missing or unreadable restart files from ${previous_workdir}/RESTART/"
        echo 'Missing: spectral_dynamics.res.nc!'
        exit
      fi
    # FV model
    elif [ "$exptype" = "fv" ]; then
      if [ ! -r ${previous_workdir}/RESTART/atmos_tracers.res.nc ]; then
        echo "ERROR: Missing or unreadable restart files from ${previous_workdir}/RESTART/"
        echo 'Missing atmos_tracers.res.nc!'
        exit
      fi  
      if [ ! -r ${previous_workdir}/RESTART/fv_rst.res.nc ]; then
        echo "ERROR: Missing or unreadable restart files from ${previous_workdir}/RESTART/"
        echo 'Missing: fv_rst.res.nc!'
        exit
      fi
      if [ ! -r ${previous_workdir}/RESTART/fv_srf_wnd.res.nc ]; then
        echo "ERROR: Missing or unreadable restart files from ${previous_workdir}/RESTART/"
        echo 'Missing fv_srf_wnd.res.nc!'
        exit
      fi   
    # BGrid model
    elif [ "$exptype" = "bgrid" ]; then
      if [ ! -r ${previous_workdir}/RESTART/atmos_tracers.res.nc ]; then
        echo "ERROR: Missing or unreadable restart files from ${previous_workdir}/RESTART/"
        echo 'Missing atmos_tracers.res.nc!'
        exit
      fi
      if [ ! -r ${previous_workdir}/RESTART/bgrid_prog_var.res.nc ]; then
        echo "ERROR: Missing or unreadable restart files from ${previous_workdir}/RESTART/"
        echo 'Missing: bgrid_prog_var.res.nc!'
        exit
      fi  
    fi
  fi

  # The work directory should not exist already, if so, exit. 
  # Also make the directory and relevant subdirectories, and move there
  current_workdir=${prefix}_d$(printf "%04d" $cday)
  if [ -d $current_workdir ]; then
    # echo "ERROR Working directory: $current_workdir already exist. Script requires a clean start."
    # exit
    echo "WARNING: working directory $current_workdir already exists. Deleting..."
    rm -r $current_workdir
  fi
  mkdir $current_workdir
  mkdir ${current_workdir}/RESTART # model spits out stuff here, can be accepted as input to new iteration
  mkdir ${current_workdir}/INPUT # model reads from this
  cd $current_workdir

  # Set up run length, and transfer parameter files, and the executable.
  # The << DELIM ... DELIM below takes each line as standard input for the cat command,
  # whose standard output we flush/overwrite into a new input.nml file
  # Can specify days to run until output (delta), timestep (dt_atmos), and 
  # current_time, which could be useful when switching off Newtonian cooling
cat > input.nml << DELIM
&main_nml
   days   = $delta,
   dt_atmos = $dt_atmos
/
DELIM
 
  # The parameter files, etc.; we are now in working directory, so move files here
  cat $namelist >> input.nml  # this pipes standard output, but >> APPENDS instead of overwriting
  cp $diagtable diag_table    # enforce standard filename convention
  cp $fieldtable field_table  # enforce standard filename convention
  cp ${execdir}/fms.x fms.x   # put the executable in working directory; was generated where this runscript sits
  if [ -r $topo_input ]; then # topo file should still be ignored, if specify 'flat' in namelist
    cp $topo_input ${current_workdir}/INPUT/topography.data.nc
  fi

  # Modify files
  # If we are doing the spindown experiment (shutting off Newtonian cooling), switch out
  # the namelist value after certain amount of time
  # if [[ "$expname" = *"ka"* ]]; then
  sed -i -e "s/KA/$ka/g" input.nml
  sed -i -e "s/KS/$ks/g" input.nml
  sed -i -e "s/KF/$kf/g" input.nml
  # fi
  
  # If we are using the finite volume core, we need to match the grid partitioning 
  # w/ the number of processors; can specify in namelist 'NPES' instead of a number, 
  # and this block will replace it
  # if [ "$exptype" = "fv" ]; then
  sed -i -e "s/NPES/$npes/g" input.nml
  # fi
  
  # If it's not a cold start (time 0), move the OLD RESTART files to the NEW INPUT
  # direcotry. The model executable fms.x will use them to continue a forward iteration
  # from that state. 'Cold start' means from time=0, restart is from time=X, some number. 
  #
  # For initial/cold start, cday equals delta. Otherwise below is executed. 
  # Also useful if job gets interrupted somehow, can just change our t_start.
  # Seems that, if there is no INPUT, fms.x will create an initial atmosphere
  if [ "$cday" -gt "$delta" ]; then
    cp ${previous_workdir}/RESTART/atmos_model.res ${current_workdir}/INPUT/atmos_model.res
    if [ "$exptype" = "spectral" ]; then # just a dummy 1==1? then easy to port this runscript elsewhere.
      cp ${previous_workdir}/RESTART/atmosphere.res.nc ${current_workdir}/INPUT/atmosphere.res.nc
      cp ${previous_workdir}/RESTART/spectral_dynamics.res.nc ${current_workdir}/INPUT/spectral_dynamics.res.nc
    elif [ "$exptype" = "fv" ]; then
      cp ${previous_workdir}/RESTART/atmos_tracers.res.nc ${current_workdir}/INPUT/atmos_tracers.res.nc
      cp ${previous_workdir}/RESTART/fv_rst.res.nc ${current_workdir}/INPUT/fv_rst.res.nc
      cp ${previous_workdir}/RESTART/fv_srf_wnd.res.nc ${current_workdir}/INPUT/fv_srf_wnd.res.nc
    elif [ "$exptype" = "bgrid" ];  then
      cp ${previous_workdir}/RESTART/atmos_tracers.res.nc ${current_workdir}/INPUT/atmos_tracers.res.nc
      cp ${previous_workdir}/RESTART/bgrid_prog_var.res.nc ${current_workdir}/INPUT/bgrid_prog_var.res.nc
    fi
  fi

  # Run the model; to specify remote host, use -H <hostname> or -host <hostname>
  #pgdbg -mpi:/usr/local/versions/mpich2-pgi-1.4.1p1/bin/mpirun -np $npes ./fms.x
  $mpirun -np $npes ./fms.x 1>> $outfile 2>> $errfile
      # 1 is descriptor for 'standard output', 2 for 'standard error', >> appends instead
      # of overwriting if it exists (as opposed to > )
  
  # Combine netcdf files, if run with multiple processors (if not, there are no 0000 files, so suppress error)
  # Parallelization produces output for different regions in working dir, then we combine them
  # Will be formatted .0000, .0001, etc. and the .0000 selects each of atmos_average and atmos_daily,
  # or whatever was specified by diag_table, then combines them individually
  for ncfile in `/bin/ls *.nc.0000 2> /dev/null`; do
    echo "Combinine files: $(ls ${ncfile%%.*}.nc.* | xargs)"
    $mppnccombine -r ${ncfile%%.*}.nc ${ncfile%%.*}.nc.*
      # -r flag says to remove the decomposed .0000 files after they are combined
      # -first arg is output (this parameter expansion deletes longest trailing pattern;
      #   note that ## would select+delete longest leading pattern)
      # -second arg is input (all the nc files)
  done

  # Did it actually run?  Check for the output.  If it's missing, exit.
  if [ ! -r $current_workdir/atmos_daily.nc ]; then
    echo '${current_workdir}/atmos_daily.nc is missing.  Chances are the model crashed on this iteration.'
    echo 'The script did not complete successfully.'
    exit
  fi
  if [ ! -r $current_workdir/atmos_average.nc ]; then
    echo '${current_workdir}/atmos_average.nc is missing.  Chances are the model crashed on this iteration.'
    echo 'The script did not complete successfully.'
    exit
  fi
  
  # Print time elapsed
  elapsed=$(expr $(date +%s) - $time)
  echo "Time elapsed: $elapsed seconds"

  # Step things forward, for the next iteration
  pday=`expr $cday`
  cday=`expr $cday + $delta`
done

# Exit
echo "Script completed successfully in $(expr $(date +%s) - $origin) seconds!"
exit
