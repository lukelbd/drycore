#!/bin/bash
# Perform post-processing of final model results, to be used for plots and display
################################################################################
shopt -s nullglob
flags="-s -O" # overwrite existing output, and suppress extra messages

# Check the host name
hostname="${HOSTNAME%%.*}"
if [ "$hostname" == "gauss" ]; then
  scratch=/birner-scratch/ldavis # need to use special scratch directory
  storage=/home/ldavis
elif [ "$hostname" == "monde" ]; then
  scratch=/mdata1/ldavis
  storage=/home/ldavis
elif [ "$hostname" == "euclid" ]; then # everything is in same lib/bin
  scratch=/home/ldavis # not mounted, so plenty of space
  storage=/birner-home/ldavis
else echo "ERROR: Unknown host ${hostname}." && exit 1
fi

# Ensure environment variables are set
# Days variable is so we can iterate through all possible file combinations
if [ -z $FILENAME ] || [ -z $EXPDIR ] || [ -z $SPINDOWNOPT ] || [ -z $PARALLEL ]; then
  echo "ERROR: An environmental variable is unset."
  exit 1
fi
if [ ! -d $scratch/$EXPDIR ]; then
  echo "ERROR: The experiment directory $scratch/$EXPDIR does not exist."
  return 1 # just go back to script that invoked .
fi

# Directories
if [ ! -d $input ]; then
  echo "ERROR: Could not find input directory $input."
  exit 1
fi
outputbase=$storage/data # general output location
[ ! -d $outputbase ] && mkdir $outputbase
output=$outputbase/$EXPDIR # directory for this experiment
[ ! -d $output ] && mkdir $output
input=$scratch/$EXPDIR/netcdf # location of data

# Source file containing functions
[ ! -r postprocess_funcs ] && echo "ERROR: Could not find files containing post processing functions." && exit 1
source postprocess_funcs

# Move to output directory
cwd=$(pwd)
cd $output # move here
# echo OUTPUT DIRECTORY: $(pwd)

################################################################################
# Climate means
if [ ! -z $CLIMATE ] && $CLIMATE; then
  echo "Control climate."
  if ! $PARALLEL; then
    Climate 2>&1 | tee ${log}climate
  else
    Climate &>${log}climate & # this must finish before others
  fi
fi

################################################################################
# Climate time series
if [ ! -z $ENERGY ] && $ENERGY; then
  echo "Energy time series."
  if ! $PARALLEL; then
    Energy 2>&1 | tee ${log}energy
  else
    Energy &>${log}energy & # this must finish before others
  fi
fi

################################################################################
# Climate variability
if [ ! -z $EOFS ] && $EOFS; then
  echo "EOFs of zonal wind."
  if ! $PARALLEL; then
    EOFs 2>&1 | tee ${log}eofs
  else
    EOFs &>${log}eofs & # this must finish before others
  fi
fi

################################################################################
# Spindown processing
# Get the full cross-section
if [ ! -z $SPINDOWNXS ] && $SPINDOWNXS; then
  echo "Processing the spindown$SPINDOWNOPT data."
  if ! $PARALLEL; then
    SpindownXS 2>&1 | tee ${log}spindown$SPINDOWNOPT
  else
    SpindownXS &>${log}spindown$SPINDOWNOPT &
  fi
fi
# Preserve each record but take area averages
if [ ! -z $SPINDOWNAVE ] && $SPINDOWNAVE; then
  echo "Processing the spindown$SPINDOWNOPT data."
  if ! $PARALLEL; then
    SpindownAVE 2>&1 | tee ${log}spindown$SPINDOWNOPT
  else
    SpindownAVE &>${log}spindown$SPINDOWNOPT &
  fi
fi

################################################################################
# Timescale
if [ ! -z $TIMESCALE ] && $TIMESCALE; then
  echo "Processing the spindown$SPINDOWNOPT data."
  if ! $PARALLEL; then
    Timescale 2>&1 | tee ${log}spindown$SPINDOWNOPT
  else
    Timescale &>${log}spindown$SPINDOWNOPT &
  fi
fi

################################################################################
################################################################################
################################################################################
# Statistics on multiple spindown results
# Old and needs work
# if [ ! -z $DIFFS ] && $DIFFS; then
#   regions=(NH SH)
#   for region in ${regions[@]}; do
#     echo "Getting difference-equilibrium-stats for ${region}."
#     if [ "$region" == "NH" ]; then
#       tspindown1=2300 # high PC
#       tspindown2=3700 # low PC
#     elif [ "$region" == "SH" ]; then
#       tspindown1=3300 # low PC
#       tspindown2=5700 # high PC
#     else
#       echo "ERROR: Unknown region $region."
#       return 1
#     fi
#     Diffs $region $tspindown1 $tspindown2 &>${log}diffs$region &
#   done
# fi
################################################################################
# Compute spindown rate
# file2=${fclimate}AVE.nc
# file1=${fspindown}-ensembleAVE.nc
# file3=${fequilibrium}-ensembleAVE.nc
# if [ ! -z $TAU ] && $TAU && [ -r $file1 ] && [ -r $file2 ] && [ -r $file3 ]; then
#   echo "Esimating tau/timescales."
#   python3 &>${log}tau << EOF
# from postprocess_timescales import tau # file with all python utilities
# tau("$file1", climate="$file2", equilibrium="$file3", output="$output", ka=$ka, ks=4)
# EOF
# elif [ ! -z $TAU ] && $TAU; then
#   echo "WARNING: One of the files needed for spindown fitting is not available."
# fi

