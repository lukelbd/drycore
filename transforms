#!/usr/bin/env bash
#------------------------------------------------------------------------------#
# Calculate isentropic data and some 2D isentropic values, like
# the mass-weighted fluxes
# Will interpolate in *parallel* by splitting file into N time dimensions,
# running in parallel, then continuing
# NOTE: For debugging/generating small spectral files use:
# ncwa -O -d plev,500.0,600.0 -d lat,0.0,90.0 -a f,k spectral.nc tmp.nc
# NOTE: To check status of isentropic files use:
#  for d in hs*; do for f in $d/netcdf/*isen*; do echo ${d}; echo ${f#*.}; ncvardump thlev $f | xargs; ncvars $f | xargs; done; done
# NOTE: Use 'y' (operation tYpe) to do arbitrary transformations with
# ncwa, e.g. variance, sum, and stuff.
# NOTE: To make sure average over longitudes/times equals average over
# frequencies/wavenumbers use:
# ncvardump t 2xdaily_inst_spectral.d0500-d0600.nc | xargs
# ncvardump tvar 2xdaily_inst_spectral.d0500-d0600.nc | xargs
#------------------------------------------------------------------------------#
# Initial stuff
shopt -s nullglob
cwd=$(pwd)
qgpv=$cwd/qgpv.ncl
repair=$cwd/repair
repair_ncl=$cwd/repair.ncl
spectra=$cwd/spectra.py
isen_interp=$cwd/isentropes_interp.ncl
isen_params=$cwd/isentropes_params.ncl
case ${HOSTNAME%%.*} in
  monde*)    scratches=(/mdata1/ldavis /mdata2/ldavis) ;;
  # monde*)    scratches=/mdata1/ldavis ;;
  cheyenne*) scratches=/glade/scratch/davislu ;;
  *) echo "Error: Unknown host, must edit batch script before continuing." && exit 1 ;;
esac

# Hard coded settings
# globs=('hs_katmos?_*' 'hs_katmos?-mean*' 'hs_katmos?-anom*')
# globs=('hs_katmos3_t42l10s*' 'hs_katmos?-mean_t42l10s*' 'hs_katmos?-anom_t42l10s*')
# globs=('hs_katmos2-anom*')
globs=('*tshift*' '*katmos[23]-tgrad*') # TODO: run this, not yet done
globs=('hs_base*' 'hs_tgrad*' 'hs_katmos?_*' 'hs*' 'hs_katmos?-mean*' 'hs_katmos?-anom*')
globs=('hs*')
fname=2xdaily # ignore the 4xdaily files for the time being

# Run mode
unset pmax
get_isen=false
get_spectra=false
get_repair=false
get_cleanup=false
stratosphere=False # whether to include high stratospheric resolution in theta coordinates
while [ $# -gt 0 ]; do
  case $1 in
    -p=*|--pmax=*) pmax=${1#*=} ;;
    -i|--isen)    get_isen=true ;;
    -s|--spectra) get_spectra=true ;;
    -r|--repair)  get_repair=true ;;
    -c|--cleanup) get_cleanup=true ;;
    *) echo "Error: Unknown identifier \"$1\"." && exit 1 ;;
  esac
  shift
done
[ -z "$pmax" ] && echo "Error: Must specify parallelization." && exit 1

#------------------------------------------------------------------------------#
# Helper functions
#------------------------------------------------------------------------------#
# Generally just check for contents of NetCDF file
nclist() {
  command ncdump -h "$1" | sed -n '/variables:/,$p' | sed '/^$/q' | grep -v '[:=]' \
    | cut -d '(' -f 1 | sed 's/.* //g' | xargs | tr ' ' '\n' | grep -v '[{}]' | xargs
}
ncdims() { # just dimensions and their numbers
  command ncdump -h "$1" | sed -n '/dimensions:/,$p' | sed '/variables:/q'  | sed '1d;$d' \
      | tr -d ';' | tr -s ' ' | column -t
}
ncin() {
  nclist $1 | grep $2 &>/dev/null
}

#--------------------------------------------------------------------------#
# Background manager
#--------------------------------------------------------------------------#
logcheck() {
  cat $1 | grep -v "Execute.c" | grep -v "systemfunc" | grep -E "^fatal:|Error" &>/dev/null
  [ $? -ne 0 ] # so "success" is when the above grep fails, i.e. no fatal warning messages
}
background() {
  # Receives 2 args:
  # 1) comma-separated list of pids
  # 2) comma-separated list of lgos
  # Wait, and run ncl check
  pids=($(echo $1 | tr ',' ' ' | xargs))
  logs=($(echo $2 | tr ',' ' ' | xargs))
  npids=${#pids[@]}
  t=$(date +%s) # time before waiting
  for j in $(seq 1 $npids); do
    wait ${pids[j-1]}
    ex=$?
    if [ $ex -eq 0 ]; then
      logcheck ${logs[j-1]}
      ex=$? # maybe no bad exit code, but log indicates failure?
    fi
    [ $ex -ne 0 ] && echo "Error: One of the processes failed. Crap." && exit 1
  done
  echo "Elapsed time: $(($(date +%s) - t))s."
}

#------------------------------------------------------------------------------#
# Miscelaneous; repair
#------------------------------------------------------------------------------#
repair() {
  # Add vvar to file
  # Check for existence of other variables
  echo ${summary##*/}
  ncl -n -Q "full=\"$full\"" "summary=\"$summary\"" $repair_ncl
  # $repair "$full" "$summary"
  return 0
}

#------------------------------------------------------------------------------#
# Spectra
#------------------------------------------------------------------------------#
# 2D spectral decomposition
spectra() {
  # Get spectral transforms for momentum and heat fluxes
  # NOTE: always calculate this, because units got messed up
  # QGPV
  # echo ${archive##*/}
  # stdbuf -oL -eL ncl -n -Q "filename=\"$full\"" "archive=\"$archive\"" "summary=\"$summary\"" $qgpv
  # Spectra
  # $spectra "$full" "$archive" "$spectral"
  echo ${spectral##*/}
  stdbuf -oL -eL $spectra "$full" "$spectral"
  # [ -r $archive ] && rm $archive
  return 0
}

#------------------------------------------------------------------------------#
# Isentropes
#------------------------------------------------------------------------------#
# Linear
isen() {
  # Interpolate
  echo ${full_isen##*/}
  [ -r $full_isen ] && rm $full_isen
  stdbuf -oL -eL ncl -n -Q "stratosphere=${stratosphere}" "forcing=\"${full%/*}/../forcing.nc\"" \
    "filename=\"$full\"" "outname=\"$full_isen\"" $isen_interp
  # Params
  [ -r $summary_isen ] && rm $summary_isen
  echo ${summary_isen##*/}
  stdbuf -oL -eL ncl -n -Q \
    "filename=\"$full_isen\"" "outname=\"$summary_isen\"" $isen_params
  # Remove
  if [ -r $full_isen ] && ! [[ "$full_isen" =~ *d5* ]]; then
    echo "Removing ${full_isen##*/}"
    rm $full_isen
  fi
}

# Parallel
isen_parallel() {
  # Initial stuff
  ifull=${full%.nc}
  iisen=${full_isen%.nc}
  iisen2=${summary_isen%.nc}
  nt=$(ncdims $full | grep time | cut -d'(' -f2 | cut -d' ' -f1) # hard due to UNLIMITED thing
  # Message
  echo ${full_isen##*/}
  echo ${summary_isen##*/}
  # nplev=$(ncdims $full | grep plev | awk '{print $3}')
  # Loop through segments
  unset ilogs ipids
  rm ${ifull}-*.nc ${iisen}-*.nc ${iisen2}-*.nc 2>/dev/null # make sure already removed!
  for ii in $(seq 1 $pmax); do
    # NCL times
    t1=$(((ii - 1)*nt/pmax)) # e.g. pmax=10, nt=200, goes 0, 20, 40, 60
    t2=$((ii*nt/pmax - 1)) # e.g. pmax=10, nt=200, goes 19, 39, 59
    ilog=logs/isen${ii}.log
    {
      ncks -O -h --no-abc -d time,$t1,$t2 ${ifull}.nc ${ifull}-${ii}.nc
      ncl -n -Q "stratosphere=${stratosphere}" "forcing=\"${full%/*}/../forcing.nc\"" \
        "filename=\"${ifull}-${ii}.nc\"" "outname=\"${iisen}-${ii}.nc\"" \
        $isen_interp
      ncl -n -Q "filename=\"${iisen}-${ii}.nc\"" "outname=\"${iisen2}-${ii}.nc\"" \
        $isen_params
    # } &
    } &>$ilog &
    ipids+=",$!"
    ilogs+=",$ilog"
  done
  # Wait
  background $ipids $ilogs
  # Merge summaries
  t=$(date +%s)
  echo "Merging ${summary_isen##*/}."
  ncrcat -O ${iisen2}-*.nc $summary_isen
  # Keep full files if after day 5000, because why not
  if [[ "$full_isen" =~ d5[01]00-d[12]00 ]]; then
    echo "Merging ${full_isen##*/}."
    ncrcat -O ${iisen}-*.nc $full_isen
  fi
  rm ${ifull}-*.nc ${iisen}-*.nc ${iisen2}-*.nc 2>/dev/null
  echo "Elapsed time: $(($(date +%s) - t))s."
}

#------------------------------------------------------------------------------#
# Main part of script
#------------------------------------------------------------------------------#
# Iterate through experiment folders
# NOTE: Hold off on diagonal experiments for now
ii=1 # the process index
is=1
ir=1
iip=1
for scratch in "${scratches[@]}"; do
  subfolders=($scratch/. $scratch/timescales-*) # subfolders contain some older experiment series
  for subfolder in ${subfolders[@]}; do
    for glob in "${globs[@]}"; do
      for dir in $subfolder/$glob; do
        # Folder
        echo
        echo "Dir: ${dir##*/}"
        unset filename
        t=$(date +%s)
        filenames=($dir/netcdf/$fname*full.d????-d????.nc)
        [ ${#filenames[@]} -eq 0 ] && echo "Warning: No files found." && continue

        # Loop through files, try to parallelize because very slow
        for full in ${filenames[@]}; do
          # Input file names
          let i+=1
          dir=${full%/*}
          summary=${full/full/summary} # YZ file
          full_base=${full##*/} # XYZ file
          summary_base=${summary##*/} # XYZ file

          # Names for output files
          prefix=${full_base%%.*}
          suffix=${full_base#*.}
          full_isen=${dir}/${prefix}_isen.${suffix}
          archive=${full/full/qgpv} # file that only stores 2D QGPV
          spectral=${full/full/spectral}
          prefix=${summary_base%%.*}
          suffix=${summary_base#*.}
          summary_isen=${dir}/${prefix}_isen.${suffix}

          # Cleanup
          # Remove the screwed up attempts at PV calculation
          if $get_cleanup; then
            if ncin $summary qgpv; then
              t=$(date +%s)
              echo "Cleanup: ${summary##*/}"
              ncks -O -x -v qgpv,eqgpvf,qgpvvar,pv,epvf,pvvar $summary $summary
              echo "Elapsed time: $(($(date +%s) - t))s."
            fi
            if ncin $spectral qgpv; then
              echo "Cleanup: ${spectral##*/}"
              t=$(date +%s)
              ncks -O -x -v qgpv,eqgpvf,pv,epvf $spectral $spectral
              echo "Elapsed time: $(($(date +%s) - t))s."
            fi
          fi

          # Function that parallelizes itself by splitting up file into
          # pieces and running on those pieces. Needed due to memory limitations.
          # if $get_isen && { ! [ -r $summary_isen ] || ! ncin $summary_isen stress; }; then
          if $get_isen; then
            # 1) Parallel, by splitting up file into time blocks
            isen_parallel
            # 2) Doubly parallel?
            # np=2 # how many parallel isentropic interpolation processes to run at once
            # isen_parallel &
            # let iip+=1
            # if [ $iip -gt np ]; then
            #   wait
            #   iip=1
            # fi
            # 3) Serial version
            # ilog=logs/isen${ii}.log
            # isen 2>&1 | tee $ilog &
            # ipids+=",$!"
            # ilogs+=",$ilog"
            # let ii+=1
            # if [ $ii -gt $pmax ]; then
            #   background $ipids $ilogs
            #   unset ipids ilogs
            #   ii=1
            # fi
          fi

          # Functions that must be parallelized here
          # First, simple function that adds quantities
          if $get_repair; then
            rlog=logs/repair${ir}.log
            # repair &
            repair 2>&1 | tee $rlog &
            rpids+=",$!"
            rlogs+=",$rlog"
            let ir+=1
            if [ $ir -gt $pmax ]; then
              background $rpids $rlogs
              unset rpids rlogs
              ir=1
            fi
          fi

          # Spectra (the isen() function can be parallelized in same way)
          # if $get_spectra; then
          if $get_spectra && { ! [ -r $spectral ] || ! ncin $spectral ehf; }; then
            # Call function
            slog=logs/spectra${is}.log
            spectra 2>&1 | tee $slog &
            spids+=",$!"
            slogs+=",$slog"
            let is+=1
            if [ $is -gt $pmax ]; then
              background $spids $slogs
              unset spids slogs
              is=1
            fi
          fi
        done
      done
    done
  done
done
echo

