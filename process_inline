#!/bin/bash
usage='process_inline [OPTION...]'
doc="This script processes the parallel-produced results of GFDL model runs.
It calls the 'mppnccombine.x', 'pressure_interp.ncl', 'pressure_params.ncl',
'pressure_zonmean.ncl', 'isentropes_interp.ncl', and 'isentropes_params.ncl'
scripts. It also used to call the 'spectra.py' script, but this is now
done after the fact so that we can window the blocks and get spectral data
in-between run blocks.

Usage

  $usage

Optional arguments

  -q    Immediately quit and do nothing. Used in 'drycore_run'.
  -c    Just combine files, do not process them.
  -d    Keep all intermediate files.
  -k    Whether to keep full res files or delete them.
  -d=*  The input directory. Defaults to current directory.
"
# Parse input
shopt -s nullglob
source ${0%/*}/header.sh
debug=false
combine=false
keepfull=false
nsplit=0  # split time dimension into this many pieces and merge with nccombine
# nsplit=4
while [ $# -gt 0 ]; do
  case $1 in
    -h) echo "$doc"; exit 0 ;;
    -q) echo "Skipping processing." && exit 0 ;;
    -c) echo "Only combining files." && combine=true ;;
    -d) debug=true    ;;
    -k) keepfull=true  ;;
    -d=*) dir=${1##*=}  ;;
    *) raise 127 "Unknown flag \"$1\"." ;;
  esac
  shift # shift by one
done
$debug && keepfull=true

# Global vars
# run=mpirun # for running mppnccombine on Cheyenne; parallelization really necessary
t0=$(date +%s) # starting time
bin=$(readlink -f ${0%/*})  # same location as this file; trim filename from right
ncdivide=$HOME/ncparallel/ncdivide
nccombine=$HOME/ncparallel/nccombine
mppnccombine=$HOME/gfdl-fms/exp/mppnccombine.x # combine; needs to have been compiled here
plev_interp=$bin/pressure_interp.ncl  # interpolate with NCL, automatic iteration
plev_params=$bin/pressure_params.ncl # eddy and mean Lorenz energy cycle terms with NCL
plev_means=$bin/pressure_zonmean.ncl # just gets zonal means
isen_interp=$bin/isentropes_interp.ncl
isen_params=$bin/isentropes_params.ncl
spectra=$bin/pressure_spectra.py # spectral decompositions
[ -z "$dir" ] || cd "$dir" || raise 127 "Failed to move to directory \"$dir\"."

# Double check some stuff
[ -r $plev_params ]   || raise 127 "The script \"$plev_params\" is missing."
[ -r $plev_interp ]   || raise 127 "The script \"$plev_interp\" is missing."
[ -x $mppnccombine ]  || raise 127 "The executable \"$mppnccombine\" is missing."
hash ncl 2>/dev/null  || raise 127 "NCL is not in $PATH."
hash ncks 2>/dev/null || raise 127 "NCO is not in $PATH."
# hash cdo 2>/dev/null  && raise 127 "CDO is not in $PATH."

#------------------------------------------------------------------------------#
# Functions
# Stdout of following lines is overview; view separate logfiles for specifics
#------------------------------------------------------------------------------#
levfix() {
  # Apply some simple modifications to attributes
  # NOTE: Use -h to prevent appending history
  # WARNING: Some NCO distros seem to have fatal issue with using multiple
  # ncrename instructions in same command! Fails on cheyenne when we try to
  # do it in one line.
  local file
  file="$1"
  ncrename -h -d pfull,mlev $file # -d renames dimensions, -v renames variables of same name
  ncrename -h -d phalf,ilev $file # mlev/ilev is the ECHAM convention, needed for CDO interpolation
  ncrename -h -v pfull,mlev $file
  ncrename -h -v phalf,ilev $file
  ncatted -h -O -a bounds,mlev,o,c,"ilev" $file
}

# Function for interpolating model levels
plev_isen_interp() {
  # Interplolate to pressure levels from model levels
  local t log file plevout isenout suffix
  file="$1"
  suffix="$2"
  plevout=interp_plev.$suffix
  isenout=interp_isen.$suffix
  levfix "$file"

  # Interpolation to pressure
  t=$(date +%s)
  log=LOGS/log.pinterp.${suffix%.nc}
  echo "Interpolating to pressure levs..." # -Q = no banner, -n = do not enumerate print statements
  [ -r "$plevout" ] && rm "$plevout"
  ncl -n -Q "filename=\"$file\"" "output=\"$plevout\"" $plev_interp &>$log #2> /dev/null
  sed -i '/^.*warning:.*$/d;/^$/d' $log
  if ! nclcheck $log || ! [ -r $plevout ]; then
    raise 2 "Something failed during NCL interpolation."
  fi
  echo "  * Time for plev interpolation: $(($(date +%s) - t))s."

  # Interpolation to isentropes
  t=$(date +%s)
  log=LOGS/log.iinterp.${suffix%.nc}
  echo "Interpolating to isentropes..."
  [ -r "$isenout" ] && rm "$isenout"
  ncl -n -Q "filename=\"$file\"" "output=\"$isenout\"" "stratosphere=False" $isen_interp &>$log #2> /dev/null
  if ! nclcheck $log || ! [ -r $isenout ]; then
    raise 2 "Something failed during NCL interpolation."
  fi
  echo "  * Time for isen interpolation: $(($(date +%s) - t))s."
}

# Means
plev_means() {
  # Get the zonal means
  local t log file out suffix
  file="$1"
  suffix="$2"
  out=means.${suffix}
  log=LOGS/log.means.${suffix%.nc}
  t=$(date +%s)
  echo "Getting zonal means..."
  [ -r "$out" ] && rm "$out"
  ncl -n -Q "filename=\"$file\"" "output=\"$out\"" $plev_means &>$log
  if ! nclcheck $log; then
    raise 4 "Something failed while getting zonal means."
  fi
  echo "  * Time for getting zonal means: $(($(date +%s) - t))s."
}

# Once, this function also accepted averaged data; not anymore, but these are
# some approaches for testing if file has averaged data
plev_isen_params() {
  # Ouput file names
  local t log plevout isenout suffix
  suffix="$1"
  plevout=params_plev.${suffix}
  isenout=params_isen.${suffix}

  # Pressure lev params
  t=$(date +%s)
  log=LOGS/log.pparams.${suffix%.nc}
  echo "Getting pressure params..."
  [ -r "$plevout" ] && rm "$plevout"
  ncl -n -Q "filename=\"interp_plev.$suffix\"" "output=\"$plevout\"" "means=\"means.$suffix\"" $plev_params &>$log
  if ! nclcheck $log; then
    raise 4 "Something failed while getting plev params."
  fi
  echo "  * Time for plev params: $(($(date +%s) - t))s."

  # Isentropic params
  t=$(date +%s)
  log=LOGS/log.iparams.${suffix%.nc}
  echo "Getting isentropic params..."
  [ -r "$isenout" ] && rm "$isenout"
  ncl -n -Q "filename=\"interp_isen.$suffix\"" "output=\"$isenout\"" $isen_params &>$log
  if ! nclcheck $log; then
    raise 4 "Something failed while getting isen params."
  fi
  echo "  * Time for isen params: $(($(date +%s) - t))s."
}

# Get spectra
spectra() {
  # Calculate spectral decompositions in parallel!
  local t log out suffix
  suffix="$1"
  out=spectra.${suffix}

  # Calculate
  t=$(date +%s)
  echo "Calculating spectra..." # -Q = no banner, -n = do not enumerate print statements
  log=LOGS/log.spectra.${suffix%.nc}
  [ -r $out ] && rm $out
  $spectra interp_plev.${suffix} $out &>$log \
    || raise 4 "Something failed while getting spectra."
  echo "  * Time for calculating spectra: $(($(date +%s) - t))s."
}

# Check exit codes
pidcheck() {
  for pid in $@; do
    wait $pid \
      || raise 4 "Bad exit code from one or more of the parallel processes."
  done
}

#------------------------------------------------------------------------------#
# Driver, calls above functions
#------------------------------------------------------------------------------#
# Get files
parallel=true
prefixes=(*.nc.0000)
if [ ${#prefixes[@]} -eq 0 ]; then
  parallel=false
  prefixes=(*.nc) # already present?
  [ ${#prefixes[@]} -eq 0 ] && raise 1 "XYZ resolution files not found." # make sure nullglob turned off
  echo "Note: Model ran on only 1 core, do not need to merge files."
fi

# Loop through each file
$debug && cmd='cp' || cmd='mv'
[ -d ../netcdf ] || mkdir ../netcdf
for prefix in ${prefixes[@]}; do
  # Initial stuff
  # Rename the output files so they end in '.nc'
  base=${prefix%%.*}
  for part in ${base}.nc*; do
    num=${part##*.}
    mv $part ${base}.${num}.nc
  done
  # File names
  ncfiles=(${base}.*.nc)
  echo Files: ${ncfiles[@]}
  xyzfile="${base}_full.${PWD##*/}.nc"   # original data
  plev_yzfile="${base}_summary.${PWD##*/}.nc" # longitude-averaged data
  isen_yzfile="${base}_summary_isen.${PWD##*/}.nc" # isentropic coords
  spectra_file="${base}_spectral.${PWD##*/}.nc" # spectral decomposition
  # Just want to combine files and exit?
  if $combine || [ ${base##*/} == "mean_tdt" ]; then
    [ -r ${base}.nc ] && rm ${base}.nc
    $mppnccombine ${base}.nc ${ncfiles[@]} || raise "mppnccombine failed."
    $debug || rm ${ncfiles[@]}
    levfix ${base}.nc
    $cmd ${base}.nc ../netcdf/${base}.${PWD##*/}.nc
    continue
  fi

  #----------------------------------------------------------------------------#
  # 0) Pull out temporal mean temp on *model* levels, for later application
  #----------------------------------------------------------------------------#
  # Pull out temporal mean heating on model levels
  # for file in ${ncfiles[@]}; do
  # done
  # cdo -timmean -selname,tdt
  # cdo -zonmean

  #----------------------------------------------------------------------------#
  # 1) Interpolate to pressure, get means in parallel
  #----------------------------------------------------------------------------#
  # Calculate
  unset pids suffixes
  tp=$(date +%s)
  echo "Interpolating and getting means..."
  [ -d LOGS ] || mkdir LOGS
  for ncfile in ${ncfiles[@]}; do
    # Number
    num=${ncfile%.nc}
    num=${num#*.}
    suffix=${num}.nc
    # Interpolate and get means
    {
      plev_isen_interp "$ncfile" "$suffix"  # generate interp_plev.nc and interp_isen.nc files
      plev_means "interp_plev.$suffix" "$suffix"  # generate means.nc files
    } &>LOGS/log.$num &
    pids+=($!)
    suffixes+=($suffix)
  done
  pidcheck ${pids[@]}
  echo "  * Time for interpolating and getting zonal means in parallel: $(($(date +%s) - tp))s."

  # Merge just the zonal means so we can get global means
  # NOTE: Use mppnccombine -h to print help info; the -r removes files after
  # run was successful
  if $parallel; then
    # Merge params
    echo "Combining YZ files..."
    t=$(date +%s)
    [ -r means.nc ] && rm means.nc
    $mppnccombine means.nc means.*.nc
    wait
    echo "  * Time for combining means: $(($(date +%s) - t))s."
  fi

  #----------------------------------------------------------------------------#
  # 2) Get spectra, and merge them
  # NOTE: Now we just save full resolution files, and get spectra later
  # and combine *overlapping* windows of days, with process_post.
  #----------------------------------------------------------------------------#
  # # Calculate
  # echo "Getting spectra..."
  # tp=$(date +%s)
  # unset pids
  # for suffix in ${suffixes[@]}; do
  #   num=${suffix%.nc}
  #   [ "$suffix" == "nc" ] && num=0000
  #   spectra "$suffix" &>>LOGS/log.${num} &
  #   pids+=($!)
  # done
  # pidcheck ${pids[@]}
  # echo "  * Time for getting spectra in parallel: $(($(date +%s) - tp))s."
  #
  # # Merge
  # if $parallel; then
  #   echo "Combining spectral files..."
  #   t=$(date +%s)
  #   [ -r spectra.nc ] && rm spectra.nc
  #   $mppnccombine spectra.nc spectra.*.nc
  #   wait
  #   echo "  * Time for combining spectra: $(($(date +%s) - t))s."
  # fi
  #
  # # Save files
  # if $debug; then
  #   cp spectra.nc $spectra_file
  # else
  #   mv spectra.nc $spectra_file
  #   rm spectra.*.nc
  # fi

  #----------------------------------------------------------------------------#
  # 3) Calculate other params in parallel
  #----------------------------------------------------------------------------#
  # Global means were required for some, hence the initial merge
  unset pids
  tp=$(date +%s)
  echo "Getting other params..."
  for suffix in ${suffixes[@]}; do
    num=${suffix%.nc}
    [ "$suffix" == "nc" ] && num=0000
    plev_isen_params "$suffix" &>>LOGS/log.${num} &
    pids+=($!)
  done
  pidcheck ${pids[@]}
  echo "  * Time for getting params in parallel: $(($(date +%s) - tp))s."

  # Merge zonal means
  # NOTE: Use mppnccombine -h to print help info; the -r removes files after
  # run was successful
  # TODO: Allow calculating in parallel
  if $parallel; then
    # Merge params
    echo "Combining YZ files..."
    t=$(date +%s)
    [ -r params_plev.nc ] && rm params_plev.nc
    $mppnccombine params_plev.nc params_plev.*.nc
    echo "  * Time for combining plev params: $(($(date +%s) - t))s."
    # And isentropic params
    t=$(date +%s)
    [ -r params_isen.nc ] && rm params_isen.nc
    $mppnccombine params_isen.nc params_isen.*.nc
    echo "  * Time for combining isen params: $(($(date +%s) - t))s."
  fi

  # Append params to means; want them to show up at end of ncdump ideally
  # ncks -h --no-abc -A params_plev.nc means.nc
  ncks -h --no-abc -A means.nc params_plev.nc
  $cmd params_plev.nc $plev_yzfile
  $cmd params_isen.nc $isen_yzfile
  $debug || rm means.nc means.*.nc params_plev.*.nc params_isen.*.nc

  #----------------------------------------------------------------------------#
  # 4) Optionally merge the full-resolution pressure-interpolated files
  #----------------------------------------------------------------------------#
  # TODO: Consider reducing to a standard horizontal resolution at least, if
  # not vertical? This could save considerable space.
  # NOTE: Had error on Cheyenne where mppnccombine failed for sufficiently
  # big files (threshold was somewhere between 60-80 timesteps at T106 resolution)
  # To fix this, we take time hyperslabs, merge each half, then re-combine
  # TODO: Consider adding new nctimecombine and nctimedivide files that
  # divide them into blocks.
  # Delete the old files
  if ! $debug; then
    rm ${ncfiles[@]} # original data in model coords
    rm interp_isen.*.nc # do not archive, because can be rebuilt from archived pressure level data
  fi
  if ! $keepfull; then
    echo "Removing XYZ files..."
    ! $debug && rm interp_plev.*.nc
  # Merge files
  # Will drop variables in parallel before merging
  else
    # Message
    t=$(date +%s)
    unset interp # empty array
    echo "Keeping XYZ files..."
    # Delete some vars
    for suffix in ${suffixes[@]}; do
      file=interp_plev.${suffix}
      out=$file
      $debug && out=interp_plev_cut.${suffix}
      # ncks -O -h --no-abc -v plev_bnds,slp,u,v,omega,t $file $out &
      ncks -O -h --no-abc -v plev_bnds,slp,u,v,t $file $out & # TODO: save omega?
      interp+=($out)
    done
    wait
    echo "  * Time for trimming variables: $(($(date +%s) - t))s."

    # Split files
    # WARNING: mppnccombine has issues with huge files so we run ncparallel
    # with a split along time dimension, so ncrcat will get run.
    # NOTE: This uses new nccombine feature where it accepts arbitrarily many
    # input files. We also use -r flag to reverse order of arguments.
    if [ $nsplit -le 1 ]; then
      $mppnccombine $xyzfile ${interp[@]} || raise 127 "Failed to combine XYZ files."
    else
      ncparallel -r -d=time -n=$nsplit $mppnccombine $xyzfile ${interp[@]} \
        || raise 127 "Failed to combine XYZ files with nccombine."
    fi
    echo "  * Time for combining XYZ files: $(($(date +%s) - t))s."
    $debug || rm interp_plev*.nc $jfiles $ofiles &>/dev/null
  fi

  #----------------------------------------------------------------------------#
  # Then copy files to common directory
  #----------------------------------------------------------------------------#
  [ -r $plev_yzfile ] && $cmd $plev_yzfile ../netcdf
  [ -r $isen_yzfile ] && $cmd $isen_yzfile ../netcdf
  [ -r $spectra_file ] && $cmd $spectra_file ../netcdf
  [ -r $xyzfile ] && $cmd $xyzfile ../netcdf
done

# Echo time of finish
echo "TOTAL ELAPSED TIME: $(($(date +%s) - t0))s."
