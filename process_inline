#!/bin/bash
usage='process [OPTION...]'
doc="This script processes the parallel-produced results of GFDL model runs.
It calls the 'mppnccombine.x', 'pressure_interp.ncl', 'pressure_params.ncl',
'pressure_zonmean.ncl', 'isentropes_interp.ncl', and 'isentropes_params.ncl'
scripts. It also used to call the 'spectra.py' script, but this is now
done after the fact so that we can window the blocks and get spectral data
in-between run blocks.

Usage

  $usage

Optional arguments

  -q|--quit     Immediately quit and do nothing. Used in 'drycore_run'.
  -c|--combine  Just combine files, do not process them.
  -d|--debug    Keep all intermediate files.
  -s|--split    Whether to split full res files before combining.
  -k|--keep     Whether to keep full res files or delete them.
  [-d|--dir]=*  The input directory. Defaults to current directory.
"
# Error
# NOTE: Run 'grep -r -l "^[^\!].*register_diag_field(" . | grep ".*\.f90"' at base of source
# directory to see list of files where diag_fields are registered.
raise() {
  echo "Usage: $usage" 1>&2
  echo "Error: $1" 1>&2
  exit $2
}
# Function for checking NCL scripts success
# Script sometimes fails to spawn child process for displaying time information; ignore these errors
# Also Execute.c is always shown as error alongside specific function error, so ignore that one
nclcheck() {
  cat $1 | grep -v "Execute.c" | grep -v "systemfunc" | grep "fatal:" &>/dev/null
  [ $? -ne 0 ] # ***success** if exit code was 1 (fatal: not found), failure if it was zero (fatal: was found)
}
# Parse input
dir='.'
debug=false  
keepxyz=false
combine=false
splitxyz=true
nsplit=4
while [ $# -gt 0 ]; do
  case $1 in
    -q|--quit)    echo "Skipping processing." && exit 0 ;;
    -c|--combine) echo "Only combining files." && combine=true ;;
    -d|--debug)   debug=true    ;;
    -k|--keep)    keepxyz=true  ;;
    -s|--split)   splitxyz=true ;;
    -d=*|--dir=*) dir=${1##*=}  ;;
    *) raise "Unknown flag \"$1\"." 127 ;;
  esac
  shift # shift by one
done
$debug && keepxyz=true

# Global vars
# interp_cdo=$bin/process_interp.cdo # interpolate with CDO
t0=$(date +%s) # starting time
bin=$(readlink -f ${0%/*})  # same location as this file; trim filename from right
run=mpirun # for running mppnccombine on Cheyenne; parallelization really necessary
ncdivide=$HOME/ncparallel/ncdivide
nccombine=$HOME/ncparallel/nccombine
mppnccombine=$HOME/gfdl-drycore/run/mppnccombine.x # combine; needs to have been compiled here
plev_interp=$bin/pressure_interp.ncl  # interpolate with NCL, automatic iteration
plev_params=$bin/pressure_params.ncl # eddy and mean Lorenz energy cycle terms with NCL
plev_means=$bin/pressure_zonmean.ncl # just gets zonal means
isen_interp=$bin/isentropes_interp.ncl
isen_params=$bin/isentropes_params.ncl
spectra=$bin/pressure_spectra.py # spectral decompositions
cd $dir # optionally pass dir argument

# Double check some stuff
! [ -r $plev_params ]   && raise "The script \"$plev_params\" is missing."      127
! [ -r $plev_interp ]   && raise "The script \"$plev_interp\" is missing."      127
! [ -x $mppnccombine ]  && raise "The executable \"$mppnccombine\" is missing." 127
! hash ncl 2>/dev/null  && raise "NCL is not in $PATH."                         127
! hash ncks 2>/dev/null && raise "NCO is not in $PATH."                         127
# ! hash cdo 2>/dev/null  && raise "CDO is not in $PATH."                       127

################################################################################
# Functions
# Stdout of following lines is overview; view separate logfiles for specifics
################################################################################
# Function for interpolating model levels
interp() {
  # Interplolate to pressure levels from model levels
  local t log filename plevout isenout suffix
  filename="$1"
  suffix="$2"
  plevout=interp_plev.$suffix
  isenout=interp_isen.$suffix

  # Apply some simple modifications to attributes
  # NOTE: Use -h to prevent appending history
  # WARNING: Some NCO distros seem to have fatal issue with using multiple
  # ncrename instructions in same command! Fails on cheyenne when we try to
  # do it in one line.
  ncrename -h -d pfull,mlev $filename # -d renames dimensions, -v renames variables of same name
  ncrename -h -d phalf,ilev $filename # mlev/ilev is the ECHAM convention, needed for CDO interpolation
  ncrename -h -v pfull,mlev $filename
  ncrename -h -v phalf,ilev $filename
  ncatted -h -O -a bounds,mlev,o,c,"ilev" $filename

  # Interpolation to pressure
  t=$(date +%s)
  log=LOGS/log.pinterp.${suffix%.nc}
  echo "Interpolating to pressure levs..." # -Q = no banner, -n = do not enumerate print statements
  [ -r "$plevout" ] && rm "$plevout"
  ncl -n -Q "filename=\"$filename\"" "output=\"$plevout\"" $plev_interp &>$log #2> /dev/null
  sed -i '/^.*warning:.*$/d;/^$/d' $log
  if ! nclcheck $log || ! [ -r $plevout ]; then
    raise "Something failed during NCL interpolation." 2
  fi
  echo "  * Time for plev interpolation: $(($(date +%s) - t))s."

  # Interpolation to isentropes
  t=$(date +%s)
  log=LOGS/log.iinterp.${suffix%.nc}
  echo "Interpolating to isentropes..."
  [ -r "$isenout" ] && rm "$isenout"
  ncl -n -Q "filename=\"$filename\"" "output=\"$isenout\"" "stratosphere=False" $isen_interp &>$log #2> /dev/null
  if ! nclcheck $log || ! [ -r $isenout ]; then
    raise "Something failed during NCL interpolation." 2
  fi
  echo "  * Time for isen interpolation: $(($(date +%s) - t))s."
}

# Means
plev_means() {
  # Get the zonal means
  local t log filename out suffix
  filename="$1"
  suffix="$2"
  out=means.${suffix}
  log=LOGS/log.means.${suffix%.nc}
  t=$(date +%s)
  echo "Getting zonal means..."
  [ -r "$out" ] && rm "$out"
  ncl -n -Q "filename=\"$filename\"" "output=\"$out\"" $plev_means &>$log
  if ! nclcheck $log; then
    raise "Something failed while getting zonal means." 4
  fi
  echo "  * Time for getting zonal means: $(($(date +%s) - t))s."
}

# Once, this function also accepted averaged data; not anymore, but these are
# some approaches for testing if file has averaged data
params() {
  # Ouput file names
  local t log plevout isenout suffix
  suffix="$1"
  plevout=params_plev.${suffix}
  isenout=params_isen.${suffix}

  # Pressure lev params
  t=$(date +%s)
  log=LOGS/log.pparams.${suffix%.nc}
  echo "Getting pressure params..."
  [ -r "$plevout" ] && rm "$plevout"
  ncl -n -Q "filename=\"interp_plev.$suffix\"" "output=\"$plevout\"" "means=\"means.$suffix\"" $plev_params &>$log
  if ! nclcheck $log; then
    raise "Something failed while getting plev params." 4
  fi
  echo "  * Time for plev params: $(($(date +%s) - t))s."

  # Isentropic params
  t=$(date +%s)
  log=LOGS/log.iparams.${suffix%.nc}
  echo "Getting isentropic params..."
  [ -r "$isenout" ] && rm "$isenout"
  ncl -n -Q "filename=\"interp_isen.$suffix\"" "output=\"$isenout\"" $isen_params &>$log
  if ! nclcheck $log; then
    raise "Something failed while getting isen params." 4
  fi
  echo "  * Time for isen params: $(($(date +%s) - t))s."
}

# Get spectra
spectra() {
  # Calculate spectral decompositions in parallel!
  local t log out suffix
  suffix="$1"
  out=spectra.${suffix}

  # Calculate
  t=$(date +%s)
  echo "Calculating spectra..." # -Q = no banner, -n = do not enumerate print statements
  log=LOGS/log.spectra.${suffix%.nc}
  [ -r $out ] && rm $out
  $spectra interp_plev.${suffix} $out &>$log
  [ $? -ne 0 ] && raise "Something failed while getting spectra." 4
  echo "  * Time for calculating spectra: $(($(date +%s) - t))s."
}

# Check exit codes
pidcheck() {
  for pid in $@; do
    wait $pid
    [ $? -ne 0 ] && raise "Bad exit code from one or more of the parallel processes." 4
  done
}

################################################################################
# Driver, calls above functions
################################################################################
# Get files
if $debug; then
  parallel=true
  prefixes=(test.nc.0000) # doesn't really exist
else
  parallel=true
  prefixes=(*.nc.0000)
fi
if [[ "$prefixes" =~ "*" ]]; then
  prefixes=(*.nc) # already present?
  [ ${#prefixes[@]} -eq 1 ] && raise "XYZ resolution files not found." 1 # make sure nullglob turned off
  echo "Note: Model ran on only 1 core, do not need to merge files."
fi

# Loop through each file
for prefix in ${prefixes[@]}; do
  ##############################################################################
  # Initial stuff
  ##############################################################################
  # File names and such
  base=${prefix%%.*}
  for part in ${base}.nc*; do
    num=${part##*.}
    mv $part ${base}.${num}.nc & # some programs won't recognize file without .nc extension
  done
  wait # in background
  ncfiles=(${base}.*.nc)
  echo Files: ${ncfiles[@]}
  xyzfile="${base}_full.${PWD##*/}.nc"   # original data
  plev_yzfile="${base}_summary.${PWD##*/}.nc" # longitude-averaged data
  isen_yzfile="${base}_summary_isen.${PWD##*/}.nc" # isentropic coords
  spectra_file="${base}_spectral.${PWD##*/}.nc" # spectral decomposition
  # Just want to combine files and exit?
  if $combine; then
    [ -r ${base}.nc ] && rm ${base}.nc
    $mppnccombine -r ${base}.nc ${ncfiles[@]}
    continue
  fi

  ##############################################################################
  # 1) Interpolate to pressure, get means in parallel
  ##############################################################################
  # Calculate
  unset pids suffixes
  tp=$(date +%s)
  echo "Interpolating and getting means..."
  ! [ -d LOGS ] && mkdir LOGS
  for ncfile in ${ncfiles[@]}; do
    # Number
    num=${ncfile%.nc}
    num=${num#*.}
    suffix=${num}.nc
    # Interpolate and get means
    { interp "$ncfile" "$suffix"
      plev_means "interp_plev.$suffix" "$suffix"
    } &>LOGS/log.$num &
    pids+=($!)
    suffixes+=($suffix)
  done
  pidcheck ${pids[@]}
  echo "  * Time for interpolating and getting zonal means in parallel: $(($(date +%s) - tp))s."

  # Merge zonal means
  # NOTE: Use mppnccombine -h to print help info; the -r removes files after
  # run was successful
  if $parallel; then
    # Merge params
    echo "Combining YZ files..."
    t=$(date +%s)
    [ -r means.nc ] && rm means.nc
    $mppnccombine means.nc means.*.nc
    wait
    echo "  * Time for combining means: $(($(date +%s) - t))s."
  fi

  ################################################################################
  # 2) Get spectra, and merge them
  # WARNING: Now we just save full resolution files, and get spectra later
  # and combine *overlapping* windows of days, with process_post.
  ################################################################################
  # # Calculate
  # echo "Getting spectra..."
  # tp=$(date +%s)
  # unset pids
  # for suffix in ${suffixes[@]}; do
  #   num=${suffix%.nc}
  #   [ "$suffix" == "nc" ] && num=0000
  #   spectra "$suffix" &>>LOGS/log.${num} &
  #   pids+=($!)
  # done
  # pidcheck ${pids[@]}
  # echo "  * Time for getting spectra in parallel: $(($(date +%s) - tp))s."
  #
  # # Merge
  # if $parallel; then
  #   echo "Combining spectral files..."
  #   t=$(date +%s)
  #   [ -r spectra.nc ] && rm spectra.nc
  #   $mppnccombine spectra.nc spectra.*.nc
  #   wait
  #   echo "  * Time for combining spectra: $(($(date +%s) - t))s."
  # fi
  #
  # # Save files
  # if $debug; then
  #   cp spectra.nc $spectra_file
  # else
  #   mv spectra.nc $spectra_file
  #   rm spectra.*.nc
  # fi

  ##############################################################################
  # 3) Calculate other params in parallel
  ##############################################################################
  # Global means were required for some, hence the initial merge
  unset pids
  tp=$(date +%s)
  echo "Getting other params..."
  for suffix in ${suffixes[@]}; do
    num=${suffix%.nc}
    [ "$suffix" == "nc" ] && num=0000
    params "$suffix" &>>LOGS/log.${num} &
    pids+=($!)
  done
  pidcheck ${pids[@]}
  echo "  * Time for getting params in parallel: $(($(date +%s) - tp))s."

  # Merge zonal means
  # NOTE: Use mppnccombine -h to print help info; the -r removes files after
  # run was successful
  # TODO: Allow calculating in parallel
  if $parallel; then
    # Merge params
    echo "Combining YZ files..."
    t=$(date +%s)
    [ -r params_plev.nc ] && rm params_plev.nc
    $mppnccombine params_plev.nc params_plev.*.nc
    echo "  * Time for combining plev params: $(($(date +%s) - t))s."
    # And isentropic params
    t=$(date +%s)
    [ -r params_isen.nc ] && rm params_isen.nc
    $mppnccombine params_isen.nc params_isen.*.nc
    echo "  * Time for combining isen params: $(($(date +%s) - t))s."
  fi

  # Append params to file; want them to show up at end of ncdump ideally
  # ncks -h --no-abc -A params_plev.nc means.nc
  ncks -h --no-abc -A means.nc params_plev.nc
  if $debug; then
    cp params_plev.nc $plev_yzfile
    cp params_isen.nc $isen_yzfile
  else
    mv params_plev.nc $plev_yzfile
    mv params_isen.nc $isen_yzfile
    rm means.nc means.*.nc params_plev.*.nc params_isen.*.nc
  fi

  ##############################################################################
  # 4) Optionally merge the full-resolution pressure-interpolated files
  # TODO: Consider reducing to a standard horizontal resolution at least, if
  # not vertical? This could save considerable space.
  # NOTE: Had error on Cheyenne where mppnccombine failed for sufficiently
  # big files (threshold was somewhere between 60-80 timesteps at T106 resolution)
  # To fix this, we take time hyperslabs, merge each half, then re-combine
  # TODO: Consider adding new nctimecombine and nctimedivide files that
  # divide them into blocks.
  ##############################################################################
  # Delete the old files
  if ! $debug; then
    rm ${ncfiles[@]} # original data in model coords
    rm interp_isen.*.nc # do not archive, because can be rebuilt from archived pressure level data
  fi
  if ! $keepxyz; then
    echo "Removing XYZ files..."
    ! $debug && rm interp_plev.*.nc
  # Merge files
  # Will drop variables in parallel before merging
  else
    # Message
    t=$(date +%s)
    unset interp # empty array
    echo "Keeping XYZ files..."
    keep=plev_bnds,slp,u,v,t

    # Delete some vars
    for suffix in ${suffixes[@]}; do
      out=$file
      file=interp_plev.${suffix}
      $debug && out=interp_plev_cut.${suffix}
      ncks -O -h --no-abc -v plev_bnds,slp,u,v,t $file $out &
      interp+=($out)
    done
    wait
    echo "  * Time for trimming variables: $(($(date +%s) - t))s."

    # Split files
    # TODO: Verify this works.
    # WARNING: mppnccombine has issues with huge files so we run ncparallel
    # with a split along time dimension, so ncrcat will get run.
    t=$(date +%s)
    echo "Combine full files."
    [ -r $xyzfile ] && rm $xyzfile
    unset table ifiles ofiles
    for iinterp in ${interp[@]}; do
      ifiles=$($ncdivide $iinterp -n=$nsplit -d=time)
      ifiles+="$ifiles "
      table+="$ifiles"$'\n'
    done
    # Merge along latitude
    for j in $(seq 1 $nsplit); do
      jfiles=$(echo "$table" | cut -d' ' -f$j)
      ofile=${xyzfile%.nc}.${j}.nc
      ofiles+="$ofile "
      $mppnccombine $ofile ${ifiles[@]}
    done
    # Finally combine with ncrcat
    # TODO: Is ncrcat or cdo concate faster?
    $nccombine -n=$nsplit -d=time $xyzfile $ofiles
    [ $? -ne 0 ] && raise "Failed to combine XYZ files." 127
    echo "  * Time for combining XYZ files: $(($(date +%s) - t))s."
    ! $debug && rm interp_plev*.nc $ifiles $ofiles &>/dev/null
  fi

  ##############################################################################
  # Then copy files to common directory
  ##############################################################################
  if ! $debug; then
    ! [ -d ../netcdf ] && mkdir ../netcdf
    [ -r $plev_yzfile ] && mv $plev_yzfile ../netcdf
    [ -r $isen_yzfile ] && mv $isen_yzfile ../netcdf
    [ -r $spectra_file ] && mv $spectra_file ../netcdf
    [ -r $xyzfile ] && mv $xyzfile ../netcdf
  fi
done

# Echo time of finish
# Can parse this to send message to the window that ran the runscript/batch runscript
# echo $(($(date +%s) - $t0)) # prints UNIX time difference
echo "TOTAL TIME ELAPSED: $(($(date +%s) - t0))s."
