#!/usr/bin/env bash
################################################################################
# NOTE: Previously sweeped parameter space with ugly hodgpodge of exact doubling;
# dividing into 1, 2.5, 5; and diving into 1, 2, 4; now, we always use the 1, 2, 4
# to logarithmically sweep space. Existing directories have been moved to their
# closest values in this new spacing. White lie, but probably insignificant differences.
################################################################################
usage='run_series [OPTION...] "FORCING_SWEEP_RESOLUTION" --1=[prev:]value[,...] [--2=[prev:]value[,...]] '
doc="This script runs a parameter sweep for the given input series and
list(s) of parameters, using the 'run' script. It generates standardized
folder names and can modify the namelist and diag_table for the parameters
being changed.

Usage

  $usage

Valid forcing specs

  hs[12][nlc]     Held and Suarez, 1994
  pk[12][nlc]     Polvani and Kushner, 2004
  pkmod[12][nlc]  Polvani and Kushner with modified coords

  The number indicates the boundary layer damping approach:

  * 1 is faster damping in boundary layer.
  * 2 is constant damping everywhere.

  The flags control other optional forcing settings:

  * n stands for [n]o conserve energy, i.e. allow total energy to change.
  * l stands for [l]ocked heating, continuing from the previous experiment.
  * c stands for [c]old start locked heating, which is the same as 'l'
    except the model is initiated from a cold start.

  Note that the forcing scheme is specified in the model namelist with only
  the first part of these strings.


Valid sweep specs

  This is simply one of the following strings:

  base            Model run with default HS94 settings.
  tdamp           Change tropospheric damping.
  tdampmean       Change mean component of tropospheric damping.
  tdampstrat      Change stratospheric damping.
  tgrad           Change equator-pole teq difference.
  tmean           Change global mean surface teq.
  tshift          Shift teq meridional gradient poleward or equatorward
  fdamp           Change friction.
  tdamp-tgrad     Change both tropospheric damping and equator-pole eqtemp difference
  tdamp-tshift    Change both tropospheric damping and temp gradient shift

Valid resolution specs

  A string with the format t[XX]l[YY][spe], where XX is the trunction number
  and YY is the vertical level count. The suffix is a single character
  controlling the level spacing configuration:

  * Evenly spaced [s]igma levels.
  * Unevenly spaced [p]olvani and kushner sigma levels.
  * [e]RA Interim hybrid levels, specified by namelist named
    levels_ecwmf_{YY}.nml in source directory.

Valid parameter specs

  Passed with the flags: --1=[prev:]value[,...] [--2=[prev:]value[,...]]

  --1 is the first parameter for the sweep spec, and --2 is the optional
  second parameter, if this is a diagonal sweep. To run from the end of a
  *previous* run in the same experiment series, use --1=prev:value,
  e.g. --1=20,40,40:100,100:200. The experiment directory names will be
  'force_sweep_resolution_p[XXX][p[YYY]]' for parameter 1 XXX and parameter
  2 YYY. Directories are renamed if the specified parameters correspond to
  the 'base' HS94 values.

Optional arguments

  -*                    Unknown flags passed to run script.
  -h|--help             Print this message.
  -t|--test             Run quick test, just a few days, maybe 3 restarts.
  -s|--save             Save thermal damping tendency tdt for every run?
  -d|--dryrun           A dry run.
  [-c|--cores]=*        Number of cores.
  [-n|--nodes]=*        Number of nodes, if this is a supercomputer.
  [-d|--days]=*         Number of days.
  [-dt|--timestep]=*    Number of timesteps.
  [-td|--testdays]=*    Number of days in each test run block.
  [-tb|--testblocks]=*  Number of blocks for test run.
  [-ts|--tstart]=*      Initial day.
  [-te|--tend]=*        Final day.
  [-kts|--ktstart]=*    Initial day where we start keeping full-res data.
  [-kte|--ktend]=*      Final day that we keep full-res data.
"
# TODO: Specify *parameters* from which continuation was carried
# out with filename that look like: hs1_tdamp_t42l20s_p0040.000:0100.000
# Maybe not important though because there is *always* ambiguity, e.g.
# from which day continuation run began.
# NOTE:
# * Really can't push CFL number! Shoot for around 0.5. Got almost instant
#   model blow up at 1200s with T106, since upper-level winds probably get to
#   around 100m/s (about 200mph)
# * Working times so far 20 days, 40 days: 600s, even 800s too fast;
#   100 days: 800s.
rundir=$HOME/gfdl-fms/exp # model folder for namelists and stuff
source $rundir/header.sh
cwd=${0%/*}
cd "$cwd" || raise 1 "Header file not found."
module load impi &>/dev/null
module load nco &>/dev/null
# module load ncl &>/dev/null # use conda versions instead, already on path
# module load cdo/1.9.4 &>/dev/null

# Default settings
rdays=50
nodes=1
cores=8
mail=false
dryrun=false
locked=false # locked heating run
savetdt=false
dt=600 # for T106, gives 100m/s CFL number of 0.5
tstart=0
tend=5500
walltime=12:00
queue=economy
outfreq=12      # every 6
frequnits=hours # hours
filename=2xdaily_inst # name for output files
ktstart=1 # first day we keep XYZ data (can't keep all, too much data)
ktend=0 # last day we keep XYZ data
testmode=false
testdays=5
testblocks=5 # number of blocks of testdays

# For supercomputer, idea will be to submit all jobs for the series
# simultaneously, by auto-generating a PBS script
super=false
[[ $HOSTNAME =~ cheyenne* ]] && super=true

# Parse input
gflags="-p=$cwd/process_inline -pi=$cwd/process_init "
while [ $# -gt 0 ]; do # echo "Flag: $1"
  case "$1" in
    -h|--help) echo "$doc" && exit 0 ;;
    -t|--test) testmode=true ;;
    -d|--dryrun) dryrun=true ;;
    -s|--save) savetdt=true ;;
    -1=|--1=*) params1=($(echo ${1#*=} | tr ',' ' ')) ;;
    -2=|--2=*) params2=($(echo ${1#*=} | tr ',' ' ')) ;;
    -c=*|--cores=*) cores=${1#*=} ;;
    -n=*|--nodes=*) nodes=${1#*=} ;;
    -d=*|--days=*) rdays=${1#*=} ;;
    -dt=*|--timestep=*) dt=${1#*=} ;;
    -ts=*|--tstart=*) tstart=${1#*=} ;;
    -te=*|--tend=*) tend=${1#*=} ;;
    -kts=*|--ktstart=*) ktstart=${1#*=} ;;
    -kte=*|--ktend=*) ktend=${1#*=} ;;
    -td=*|--testdays=*) testdays=${1#*=} ;;
    -tb=*|--testblocks=*) testblocks=${1#*=} ;;
    -*) gflags+="$1 " ;;
    *) [ -n "$series" ] && raise "More than one experiment series specified."
       series="$1" ;;
  esac
  shift
done

# Default experiment series
if [ -z "$series" ]; then
  echo "Warning: No experiment name specified. Running default experiment hs1_base_t42l20s."
  series='hs1_base_t42l20s'
fi

# Parse experiment series name
# Also echo the critical parallelization info
echo
echo "Nodes: $nodes, Cores: $cores"
force="${series%%_*}"
sweep="${series#*_}"
sweep="${sweep%%_*}"
reso="${series#*_}"
reso="${reso#*_}"
reso="${reso%%_*}"

# Forcing options, not part of the parameter sweep but representing
# qualitative variations of the model forcing scheme.
locked=false
conserve=true
fopts=${force#*[0-9]}
force=${force%${fopts}}
unknown=${fopts}  # track unknown option
[ -z "$force" ] && raise "Forcing spec must end with a number, indicating the boundary layer damping option."  # e.g. empty
[[ "$fopts" =~ n ]] && unknown=${unknown/n/} conserve=false
[[ "$fopts" =~ l ]] && unknown=${unknown/l/} cold=false locked=true savetdt=false
[[ "$fopts" =~ c ]] && unknown=${unknown/c/} cold=true locked=true savetdt=false
[ -n "$unknown" ] && raise "Unknown forcing spec options '$unknown'. Valid options are [lcn]."
blopt=${force##*[a-z]} # get number
force=${force%[0-9]}

# Run really fast test run
if $testmode; then
  # exprestart="${force}_base2_t95l60e" # override previous directory
  gflags+=' -d'
  outfreq=12
  frequnits='hours'
  filename='test'
  rdays=$testdays
  tstart=0
  tend=$((testdays * testblocks))
  ktstart=$tstart
  ktend=$tend
  walltime=01:00 # real quick test
  queue=regular
fi

#------------------------------------------------------------------------------#
# Storage and model path
#------------------------------------------------------------------------------#
storage=$HOME
scratch=$HOME # on Euclid, home is unmounted/not backed up; so disk I/O is quick
case ${HOSTNAME%%.*} in
  euclid)
    storage=/birner-home/ldavis # this directory is backed up; synced with GAUSS home folder
  ;; monde)
    case $reso in
      # t42l20s) scratch=/mdata2/ldavis ;;
      t42l20?) scratch=/mdata1/ldavis ;;
      t95l60?) scratch=/mdata1/ldavis ;;
      *) raise "Unknown scratch destination for experiment with resolution ${reso}." ;;
    esac
  ;; cheyenne*)
    storage=/glade/u/home/davislu
    scratch=/glade/scratch/davislu # https://www2.cisl.ucar.edu/resources/storage-and-file-systems/glade-file-spaces
  ;; *) raise "Unknown host, must edit batch script before continuing." ;;
esac
[ -d "$storage/data" ] || { mkdir "$storage/data"; echo "Created storage directory."; }

#------------------------------------------------------------------------------#
# Helper functions
#------------------------------------------------------------------------------#
# Determine model run name, accounting for "intersection" of experiment series
# and specifying named parameter values for forcing experiments
# Sets global model run variables 'exprestart' and 'expname'
exp_name() {
  # Get params for this experiment and the "continuation" experiment, e.g.
  # --1=40:100 means run this experiment with parmeter 100, from experiment
  # with parameter 40.
  # NOTE: Cannot have "diagonal" continuation experiments, they should always
  # be from an adjacent run in a linear the experiment series.
  local p1 p2 p1f p2f param1 param2 rparam1 rparam2 contin
  local isweep fsweep suffix
  param1=$2
  param2=$3
  isweep=${1#*_}
  isweep=${isweep%%_*} # e.g. tdamp, tgrad
  [[ $param1 =~ : ]] && rparam1=${param1%:*} param1=${param1#*:}
  [[ $param2 =~ : ]] && rparam2=${param2%:*} param2=${param2#*:}
  [ -n "$rparam1" ] && [ -n "$rparam2" ] && raise "Cannot do 'diagonal' continuation experiments."

  # Detect whether this is a 'base' experiment. Experiment series can
  # 'intersect' each other, and this ensures we aren't duplicating model runs
  for p1 in $rparam1 $param1; do
    for p2 in $rparam2 $param2; do
      # Continuation experiments get a special suffx
      # NOTE: For now no-conserve-energy experiments are only forcing
      # experiments, and always want to continue from energy-conserving
      # control experiments. So always continue from "raw" experiment name.
      [ -n "$expname" ] && exprestart="$expraw" contin=c

      # Get experiment sweep name, *ensuring that we avoid duplicating runs
      # by deferring to different names when possible*
      # TODO: Add to these.
      suffix=${sweep#*-}
      fsweep=$isweep # by default, will be same

      # Params for this experiment name
      # WARNING: Can get issues if e.g. go from tdamp-tmean base state to
      # pure tmean or tdamp experiment. Never overwrite the 'p1' and 'p2' input
      # parameters we are looping through.
      p1f=$p1
      p2f=$p2
      case $isweep in
        # 1D parameter sweeps, pretty simple
        base) p1f='' p2f='' ;;
        tgrad) [[ $p1 == 60 ]] && fsweep=base p1f='' ;; # base is 60K contrast
        tmean) [[ $p1 == 300 ]] && fsweep=base p1f='' ;; # base is 300K mean
        fdamp) [[ $p1 == 1 ]] && fsweep=base p1f='' ;;
        tshift) [[ $p1 == 0 ]] && fsweep=base p1f='' ;; # zero just means no shift
        tdampstrat) [[ $p1 == 40 ]] && fsweep=base p1f='' ;; # always use classic Held-Suarez for these, i.e. non-constant boundary layer damping
        tdamp|tdampmean|tdampanom) [[ $p1 == 40 ]] && fsweep=base p1f='' ;; # base is 40 day zonal-mean or anomaly damping
        *) [ -z "$p2" ] && raise "Need second param for diagonal experiment."
        # True 'diagonal' experiments
        # WARNING: Order is important here! Have to detect 'base' experiments
        # before the other ones.
        case "$isweep" in # diagaonal experiment
          tdamp-tgrad)
            [[ $p2 == 60 ]] && fsweep=tdamp p2f=''
            [[ $p1 == 40 ]] && fsweep=tgrad p1f=$p2 p2f=''
            [[ $p1 == 40 && $p2 == 60 ]] && fsweep=base p1f='' p2f=''
            ;;
          tdamp-tmean)
            [[ $p2 == 300 ]] && fsweep=tdamp p2f=''
            [[ $p1 == 40 ]] && fsweep=tmean p1f=$p2 p2f=''
            [[ $p1 == 40 && $p2 == 300 ]] && fsweep=base p1f='' p2f=''
            ;;
          tdamp-tshift)
            [[ $p2 == 0 ]] && fsweep=tdamp p2f=''
            [[ $p1 == 40 ]] && fsweep=tshift p1f=$p2 p2f=''
            [[ $p1 == 40 && $p2 == 0 ]] && fsweep=base p1f='' p2f=''
            ;;
          tdamp-fdamp)
            [[ $p2 == 1 ]] && fsweep=tdamp p2f=''
            [[ $p1 == 40 ]] && fsweep=fdamp p1f=$p2 p2f=''
            [[ $p1 == 40 && $p2 == 1 ]] && fsweep=base p1f='' p2f=''
            ;;
          tgrad-tshift)
            [[ $p2 == 0 ]] && fsweep=tgrad p2f=''
            [[ $p1 == 60 ]] && fsweep=tshift p1f=$p2 p2f=''
            [[ $p1 == 60 && $p2 == 0 ]] && fsweep=base p1f='' p2f=''
            ;;
          # Forcing experiments
          tdamp-arctic|tdamp-tropical|tdamp-vortex|tdamp-global|tdamp-surface|tdamp-realistic)
            [[ $p2 == 0 ]] && fsweep=tdamp p2f=''
            [[ $p1 == 40 ]] && fsweep=${isweep#*-} p1f=$p2 p2f=''
            [[ $p1 == 40 && $p2 == 0 ]] && fsweep=base p1f='' p2f=''
            ;;
          *) raise "Unknown sweep \"${isweep}\"." ;;
        esac
        ;;
      esac
      [ "$p1f" == 'na' ] && unset -v p1f
      [ "$p2f" == 'na' ] && unset -v p2f
      [ -n "$p1f" ] && p1f="_p$(printf "%08.3f" $p1f)"
      [ -n "$p2f" ] && p2f="p$(printf "%08.3f" $p2f)"
      expname=${force}${blopt}${fopts}_${fsweep}_${reso}${p1f}${p2f}${contin}
      expraw=${force}${blopt}_${fsweep}_${reso}${p1f}${p2f}  # for locked heating run
    done
  done

  # Override
  if $locked; then
    [ -d "$scratch/$expraw" ] \
      || expraw=${expraw}c
    [ -d "$scratch/$expraw" ] \
      || raise "Heating directory '${scratch}/${expraw}[c]' not found."
    if $cold; then
      unset exprestart
    else
      exprestart=$expraw
    fi
  fi
}

# Determine namelist changes and diag table changes
# WARNING TODO: Currently don't explicitly declare all param variables; they
# are global values, and if not reset on every iteration of diagonal experiment,
# could get unexpected namelist values! Make sure to unset variables that are
# changed in a param sweep.
exp_setup() {
  # Parse the experiment name, figure out what needs to be written
  # The 'p values' are values specified in experiment name as pXXXpYYYpZZZ
  local kbl ktrop kstrat kmeso kdepth kfric levels damp delh exph tmean params sweep
  local q0_arctic q0_tropical q0_vortex q0_global q0_surface q0_realistic
  unset nml_params nml_values
  sweep=${1#*_}
  sweep=${sweep%%_*}
  if [[ "$1" =~ _p[0-1] ]]; then # i.e. has param values on end
    params=${1##*_}
    params=${params%c}
    params=($(echo $params | tr -t 'p' ' ' | xargs printf "%.3f "))
  fi
  # First the boundary layer options
  # prefix=${sweep%-*}
  suffix=${sweep#*-}
  [[ $blopt -lt 1 || $blopt -gt 3 ]] && raise "Invalid boundary layer option ${blopt}."
  [ $blopt -eq 2 ] && kbl=-40 # simple default

  # Experiments
  case $sweep in
    # Simple experiments
    base)      ;;
    tshift)    exph=${params[0]} ;;        # shift meridional temp gradient
    tmean)     tmean=${params[0]} ;;       # change mean surface temp
    fdamp)     kfric=-${params[0]} ;;      # change friction damping
    global)    q0_global=${params[0]} ;;
    surface)   q0_surface=${params[0]} ;;
    arctic)    q0_arctic=${params[0]} ;;
    vortex)    q0_vortex=${params[0]} ;;
    tropical)  q0_tropical=${params[0]} ;;
    realistic) q0_realistic=${params[0]} ;;

    # Tgrad, and related diagonal experiments
    tgrad|tgrad-*)
      delh=${params[0]}
      if [ $sweep != $suffix ]; then # i.e. experiment had a 'dash' in it
        [ -z "${params[1]}" ] && raise "Need second param for diagonal experiment."
        case $suffix in
          tshift) exph=${params[1]} ;;
          *) raise "Unknown sweep ${sweep}." ;;
        esac
      fi
      ;;

    # Damp full atmosphere, and related diagonal experiments
    tdamp|tdampmean|tdampanom|tdamp-*|tdampmean-*|tdampanom-*)
      ktrop=-${params[0]}
      # Mean and anomaly components
      case $sweep in
        tdampmean) ktrop=$ktrop,-40 ;;
        tdampanom) ktrop=-40,$ktrop ;;
      esac
      # Diagonal experiments
      if [ $sweep != $suffix ]; then # i.e. experiment had a 'dash' in it
        [ -z "${params[1]}" ] && raise "Need second param for diagonal experiment."
        case $suffix in # diagaonal experiment
          fdamp)     kfric=-${params[1]}      ;;
          tgrad)     delh=${params[1]}        ;;
          tmean)     tmean=${params[1]}       ;;
          tshift)    exph=${params[1]}        ;;
          global)    q0_global=${params[1]}   ;;
          surface)   q0_surface=${params[1]}  ;;
          arctic)    q0_arctic=${params[1]}   ;;
          vortex)    q0_vortex=${params[1]}   ;;
          tropical)  q0_tropical=${params[1]} ;;
          realistic) q0_realistic=${params[1]} ;;
          *) raise "Unknown sweep ${sweep}." ;;
        esac
      fi
      # Scale boundary layer damping rates
      # TODO: Delete option 3 cuz it was dumb.
      unset kbl
      for itrop in ${ktrop/,/ }; do
        case $blopt in
          1) ibl=-$(bc -l <<< "scale=3; ${itrop#-}/10") ;; # hold ratio constant
          2) ibl=$itrop ;; # keep surface boundary layer equal to value in rest of atmosphere
          *) raise "Invalid boundary layer option ${blopt}." ;;
          # 3) ibl=-$(bc -l <<< "scale=3; (4^-1 + (${itrop#-}^-1 - 40^-1))^-1") ;; # preserve 'boundary layer' component
        esac
        kbl=$kbl,$ibl
      done
      kbl=${kbl#,} # trim leading comma
      # Match strat and meso forcing, no matter whether this is hs or pk
      kstrat=$ktrop
      kmeso=$ktrop
      ;;

    # Damp stratosphere
    tdampstrat|tdampmeanstrat|tdampanomstrat) # stratosphere damping
      # Get two parameters
      [ -z "${params[1]}" ] && raise "Need to specify transition depth as second parameter."
      kstrat=-${params[0]}
      kdepth=${params[1]} # param 2 is depth of transition region
      # Mean and anomaly components
      case $sweep in
        tdampmeanstrat) kstrat=$kstrat,-40 ;;
        tdampanomstrat) kstrat=-40,$kstrat ;;
      esac
      # Whether to damp mesosphere more stronly
      # TODO: Add this as forcing scheme prefix? For now just fix to constant.
      damp=constant
      ;;

    *) raise "Unknown experiment series \"$sweep\"." ;;
  esac

  # Apply namelist changes
  nml=$expdir/input.nml
  nml_default=$rundir/input.nml
  cp $nml_default $nml # move over defaut

  # Forcing settings
  nml_replace $nml \
    teq_mode "'$force'" damp_mode "'$force'" strat_damp "'$damp'"
  nml_replace $nml \
    delh "$delh" t_mean "$tmean" exp_h "$exph" # equilibrium temp stuff
  nml_replace $nml \
    ktrop "$ktrop" kfric "$kfric" kbl "$kbl" kstrat "$kstrat" kmeso "$kmeso" z_kdepth "$kdepth" # damping stuff
  nml_replace $nml \
    q0_arctic "$q0_arctic" q0_tropical "$q0_tropical" q0_vortex "$q0_vortex" \
    q0_global "$q0_global" q0_surface "$q0_surface" q0_realistic "$q0_realistic"

  # Timing variables, not experiment dependent so far
  nml_replace $nml \
    dt_atmos "$dt" days "$rdays"

  # Horizontal coordinates
  ntrunc=${reso%l*}
  ntrunc=${ntrunc#t}
  case $ntrunc in
    42) nlat=64 ;;
    63) nlat=96 ;;
    85) nlat=128 ;;
    95) nlat=144 ;; # for 36-core Cheyenne nodes
    106) nlat=160 ;;
    170) nlat=256 ;;
    *) raise "Invalid truncation number \"$ntrunc\"." ;;
  esac
  nsphere=$((ntrunc + 1)) # forget what difference between num fourier and num spherical means
  nlon=$((nlat * 2)) # always twice the res
  nml_replace $nml num_fourier "$ntrunc" num_spherical "$nsphere" lat_max "$nlat" lon_max "$nlon"

  # Now vertical resolution options
  # Will raise error if string-specifier is unknown
  vert=${reso#*l}
  case $vert in
    *e) coord=input levels=$rundir/levels_ecmwf_${nlev}.nml ;; # ERA-Interim coordinates
    *p) coord=pk_sigma nlev=${vert%p} ;;
    *s) coord=even_sigma nlev=${vert%s} ;;
    *) raise "Unknown vertical coordinate identifier \"${vert}\"." ;;
  esac
  nml_replace $nml num_levels "$nlev" vert_coord_option "'$coord'"
  if [ -n "$levels" ]; then # add vert coord namelist
    [ -r "$levels" ] || raise "File \"$levels\" not found."
    cat $levels >>$nml
  fi

  # Print nicely formatted message showing the things we changed
  nml_clean $nml
  nml_print

  # Copy diag table and apply settings
  diag=$expdir/diag_table
  cp $rundir/diag_table $diag
  diag_replace $diag $filename $outfreq $frequnits
  diag_clean $diag

  # Copy field table
  field=$expdir/field_table
  cp $rundir/field_table $field

  # Energy conservation
  if ! $conserve; then
    nml_replace $nml do_energy_correction '.false.'
  fi

  # Copy input heating
  if $locked; then
    nml_replace $nml locked_heating '.true.'
    unset tdtfiles
    for tdtfile in "$scratch/$expraw"/netcdf/mean_tdt.*.nc; do
      days=${tdtfile%.nc}
      days=${days##*.}
      day1=${days%-*}
      day2=${days#*-}
      [ ${day1#d} -ge $ktstart ] && [ ${day2#d} -le $ktend ] && tdtfiles+=("$tdtfile")
    done
    [ ${#tdtfiles[@]} -eq 0 ] && raise "No tdt files found in $scratch/$expraw/netcdf directory."
    tdtfile=${expdir}/heating.data.nc
    echo "Locked heating data: ${tdtfiles[*]##*/}"
    ncra -h -O "${tdtfiles[@]}" "$tdtfile" || raise "Average of $scratch/$expraw/netcdf/mean_tdt.*.nc files failed."
    ncks -h --no-abc -O -v tdt "$tdtfile" "$tdtfile" || raise "Cutting $tdtfile variables failed."
  fi

  # Add entry to diag_table for saving tdt data
  if $savetdt; then
    diag_add $diag \
      '"mean_tdt", -1, "hours", 1, "days", "time",' \
      '"forcing", "tdt", "tdt", "mean_tdt", "all", .true., "none", 2,'
  fi
}

#------------------------------------------------------------------------------#
# Run model, looping through different parameters. We can run entire loop as
# concurrent qsub processes, or run serially on a normal server.
#------------------------------------------------------------------------------#
# First set looping params
echo "Forcing: $force, Sweep: $sweep, Resolution: $reso"
if [[ $sweep =~ base ]]; then
  params1=(na)
  params2=(na)
elif [ "${#params1[@]}" -eq 0 ]; then
  raise "You must define an array of parameters with e.g. --1=10,20,30"
elif [ "${#params2[@]}" -eq 0 ]; then
  params2=(na)
fi

# Parameter sweeps
np=$((cores * nodes))
gflags+="-c=$np -ts=$tstart -te=$tend "
for param2 in ${params2[@]}; do
  for param1 in ${params1[@]}; do
    # Set the expname and exprestart variables
    # Prevent repeating experiments during diagonal param sweeps
    echo
    unset -v expflags expname exprestart # restart, then exp_name may set it again
    exp_name $sweep $param1 $param2
    # shellcheck disable=2076
    if [[ " ${expnames[*]} " =~ " ${expname} " ]]; then
      echo "Already ran ${expname} in this loop."
      continue
    fi
    expnames+=($expname) # record in list
    if $testmode; then
      expdir="$scratch/test"
    else
      expdir="$scratch/$expname"
    fi
    [ -d "$expdir" ] || mkdir "$expdir"
    log="$expdir/run.log" # e.g use the testing name
    echo "Experiment name: ${expname}." | tee $log
    if [ -n "$exprestart" ]; then
      [ -d $scratch/$exprestart ] || exprestart="${exprestart}c"
      [ -d $scratch/$exprestart ] || { echo "Warning: Restart directory $exprestart not found."; continue; }
      echo "Restart from: ${exprestart}" | tee $log
      expflags+="-rd=$scratch/$exprestart " # override with this restart directory
    fi

    # Prepare namelist, diag table, and flags for experiment
    # NOTE: This sets global variables expname, nml, diag, and tdtfile
    # WARNING: Cannot pipe output, because that means function before the pipe
    # is a subprocess with its own varaibles, and global variables are deleted!
    exp_setup $expname >>$log
    expflags+="-nml=$nml -diag=$diag "
    $locked && expflags+="-tdt=$tdtfile "

    # Run experiment (or just echo command for dryrun)
    exp_run="$rundir/run spectral $expdir $gflags $expflags"
    $dryrun && cat $log && echo $exp_run && echo && continue
    # Logs
    echo "Log file: $log" # so can copy paste this
    echo "Run flags: $gflags $expflags"
    # On server
    # NOTE: Need the eval so the quotes in the -p argument are evaluated
    if ! $super; then
      eval "$exp_run &>>$log"
      stat=$?
      if ! $testmode; then
        echo "Exit status: ${stat}"
        if $mail; then
          mail -s "${expname} status: ${stat}" lukelbd@gmail.com <<EOF
Experiment ${expname} finished with exit status ${stat}. The call signature was:

${exp_run}

The logfile is pasted below:

$(cat $log)

The namelist is pasted below:

$(cat $expdir/input.nml)
EOF
        fi
      fi
      if [ $stat -ne 0 ]; then
        echo "Warning: $expname integration failed."
        continue # keyboard interruption does not trigger this
      fi
    # On supercomputer, submit via qsub
    # NOTE: See Readme for core selection rationale
    # NOTE: Use economy queue because I work at weird times, have never
    # really noticed big slowdowns or wait times
    else
      [ -d jobs ] || mkdir jobs
      qsub <<EOF
#!/usr/bin/env bash
# Job name, account, email
#PBS -N $expname
#PBS -A UCSU0071
#PBS -M lukelbd@gmail.com
#PBS -m ae
#PBS -q $queue
# Job specs (max possible walltime is 12 hours)
#PBS -l walltime=$walltime:00
#PBS -l select=$nodes:ncpus=$cores:mpiprocs=$cores
# Output
#PBS -j oe
#PBS -k o
# Command
$exp_run &>>$log
EOF
    fi
    # Wrap up
    [ -d $HOME/data ] || mkdir $HOME/data
    [ -d $HOME/data/forcing ] || mkdir $HOME/data/forcing
    unset flags
    counter=$((counter + 1))
    cd $cwd || raise "Return to $cwd failed."  # ensure are still in same directory
  done
done
# echo # space
