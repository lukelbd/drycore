#!/bin/bash
# Really a BASH script; this runs CDO commands on the file.
################################################################################
# Helper functions: see http://nco.sourceforge.net/nco.html#index-ncdmnlist
# function ncgrplist() { ncks -m $1 | grep -v '[:=]' | cut -d ';' -f 1 -s | tr -s ' ' | cut -d ' ' -f 2; }
# function ncdmnlist() { ncks -m $1 | cut -d ':' -f 1 | cut -d '=' -s -f 1 | xargs; }
# function ncvardump() { ncks -s "%f " -H -C -v $1 $2; }
# function ncvarlist() { ncks -m $1 | grep -v '[:=]' | cut -d '(' -f 1 -s | sed 's/.* //g' | xargs; }
  # cut tabulates data; -d chooses delimiter, -f chooses field (1 is first column, 2 is second, etc.)
  # and lines with no delimiters present always printed unless -s is selected; grep -v is inverse of
  # selection (so only blank lines/variable header titles remain) and the sed command leaves only trailing
  # non-whitespace character (so trims leading tab and 'float', 'double', etc. identifiers)
################################################################################
# Processing data with CDO: main function
# Adds flux terms, variance terms and consolidates them into a file
# * Have issue with "enlarge" command when variables exist with more than one 
#   possible vertical coordinate (bhalf); need to remove them; or just don't output bhalf
# * So we delegate to NCO and NCL the job of fixing coordinates.
t=$(date +%s)
echo "Saving parameters with CDO..."
# Get the basic zonal mean of everything
ncfile=$1 # take single file as argument
outfile=$2 # output file
flags="-s -O" # need -O because sometimes get prompted to overwrite
timmean="" # for now not implemented
delnames=vor # not meaningful in longitude-mean
cdo $flags -zonmean $timmean -delname,$delnames $ncfile out1.nc #2>/dev/null
echo "  * Time for basic zonal mean: $(($(date +%s) - $t))s."
  # keep zonal-means of everything else, because interesting
# If we do not have instantaneous data don't bother with some stuff
[[ " $(ncvarlist $ncfile) " =~ " time_bounds " ]] && { mv out1.nc $outfile; return; }
##############################################################################
# Flux terms: heat flux, momentum flux, and PV flux
t=$(date +%s)
cdo $flags chname,pt,EHF -zonmean $timmean \
  -mul -sub -selvar,pt $ncfile -enlarge,$ncfile -zonmean -selvar,pt $ncfile \
       -sub -selvar,v $ncfile -enlarge,$ncfile -zonmean -selvar,v $ncfile \
  out2.nc #2> /dev/null # heat flux, with EP scaling
ncatted -O -a long_name,EHF,m,c,"eddy heat flux" out2.nc 2>/dev/null
ncatted -O -a units,EHF,m,c,"K m/s" out2.nc 2>/dev/null
echo "  * Time for eddy heat flux: $(($(date +%s) - $t))s."
t=$(date +%s)
cdo $flags chname,u,EMF -zonmean $timmean \
  -mul -sub -selvar,u $ncfile -enlarge,$ncfile -zonmean -selvar,u $ncfile \
       -sub -selvar,v $ncfile -enlarge,$ncfile -zonmean -selvar,v $ncfile \
  out3.nc #2> /dev/null # momentum flux, needs no EP scaling
ncatted -O -a long_name,EMF,m,c,"eddy momentum flux" out3.nc 2>/dev/null
ncatted -O -a units,EMF,m,c,"m2/s2" out3.nc 2>/dev/null
echo "  * Time for eddy momentum flux: $(($(date +%s) - $t))s."
t=$(date +%s)
cdo $flags chname,pv,EPF -zonmean $timmean \
  -mul -sub -selvar,pv $ncfile -enlarge,$ncfile -zonmean -selvar,pv $ncfile \
       -sub -selvar,v $ncfile -enlarge,$ncfile -zonmean -selvar,v $ncfile \
  out4.nc #2> /dev/null # PV flux
ncatted -O -a long_name,EPF,m,c,"eddy PV flux" out4.nc 2>/dev/null
ncatted -O -a units,EPF,m,c,"K m3/kg s2" out4.nc 2>/dev/null
echo "  * Time for eddy PV flux: $(($(date +%s) - $t))s."
t=$(date +%s)
##############################################################################
# Energy terms: EKE each latitude, KE generation each latitude, total KE each latitude
cdo $flags chname,u,EKE $timmean -divc,9.81 -divc,2 \
  -add -zonmean -sqr -sub -selvar,u $ncfile -enlarge,$ncfile -zonmean -selvar,u $ncfile \
       -zonmean -sqr -sub -selvar,v $ncfile -enlarge,$ncfile -zonmean -selvar,v $ncfile \
  out5.nc #2> /dev/null # eddy kinetic energy
echo "  * Time for EKE: $(($(date +%s) - $t))s."
t=$(date +%s)
ncatted -O -a long_name,EKE,m,c,"eddy kinetic energy" out5.nc 2>/dev/null
ncatted -O -a units,EKE,m,c,"J/m2 Pa" out5.nc 2>/dev/null
cdo $flags chname,t,C $timmean -divc,9.81 -mulc,287 \
  -div -zonmean -mul -sub -selvar,t $ncfile -enlarge,$ncfile -zonmean -selvar,t $ncfile \
                     -sub -selvar,omega $ncfile -enlarge,$ncfile -zonmean -selvar,omega $ncfile \
       -zonmean -selvar,p $ncfile \
  out6.nc #2> /dev/null # vertical heat flux
ncatted -O -a long_name,C,m,c,"vertical eddy heat flux" out6.nc 2>/dev/null
ncatted -O -a units,C,m,c,"W/m2 Pa" out6.nc 2>/dev/null
echo "  * Time for KE generation term: $(($(date +%s) - $t))s."
t=$(date +%s)
cdo $flags chname,u,KE $timmean -divc,9.81 -divc,2 \
  -add -zonmean -sqr -selvar,u $ncfile \
       -zonmean -sqr -selvar,v $ncfile \
  out7.nc #2> /dev/null # total kinetic energy
ncatted -O -a long_name,KE,m,c,"total kinetic energy" out7.nc 2>/dev/null
ncatted -O -a units,KE,m,c,"W/m2 Pa" out7.nc 2>/dev/null
echo "  * Time for total KE term: $(($(date +%s) - $t))s."
##############################################################################
# Simple terms: zonal eddy-u variance, eddy-T variance
# These are from Held-Suarez ideas
t=$(date +%s)
cdo $flags chname,t,tvar -zonmean $timmean \
  -sqr -sub -selvar,t $ncfile -enlarge,$ncfile -zonmean -selvar,t $ncfile \
  out8.nc #2> /dev/null # heat flux, with EP scaling
ncatted -O -a long_name,tvar,m,c,"temperature eddy-variance" out8.nc 2>/dev/null
ncatted -O -a units,tvar,m,c,"K2" out8.nc 2>/dev/null
echo "  * Time for temperature variance: $(($(date +%s) - $t))s."
t=$(date +%s)
cdo $flags chname,u,uvar -zonmean $timmean \
  -sqr -sub -selvar,u $ncfile -enlarge,$ncfile -zonmean -selvar,u $ncfile \
  out9.nc #2> /dev/null # heat flux, with EP scaling
ncatted -O -a long_name,uvar,m,c,"zonal-wind eddy-variance" out9.nc 2>/dev/null
ncatted -O -a units,uvar,m,c,"m2/s2" out9.nc 2>/dev/null
echo "  * Time for zonal wind variance: $(($(date +%s) - $t))s."
# TODO: zonal spectra? could store these for just a couple parameters,
# and truncate at lower wavenumbers
##############################################################################
# Combine, and check previous output
t=$(date +%s)
echo "Combining all CDO output."
files=(out{1..7}.nc) # uses brace expansion, captures expansion in array
for file in ${files[@]}; do
  [ ! -r $file ] && { echo "ERROR: File $file not found."; exit 3; } # will exit shell, not function
    # see: https://stackoverflow.com/q/4419952/4970632
done
cdo $flags merge ${files[@]} $outfile #2> /dev/null
echo "  * Time for merging result: $(($(date +%s) - $t))s."

