#!/bin/bash
################################################################################
# File for processing results of GFDL model runs AS THEY ARE PRODUCED; use this
# in parallel after every model step while next model step is simultaneously running.
# ---------
# Summary of current variables:
# * with longitude-data:
#   p, t, u, v, z, vor, omega, teq, D, pt, pv s
#   forget dthdp (only will want lapse rate to diagnose mean climate/tropopause
#   heights and can use the mean t/theta fields), but keep S; has physical interpretation
# * without longitude-data:
#   t, u, v, z, vor, omega, teq, D, dthdp, pt, pv, s, **NEW** EHF, EMF, EPF, EKE, C, KE
# Tips:
# Run 'grep -r -l "^[^\!].*register_diag_field(" . | grep ".*\.f90"' at base of source
# directory to see list of files where diag_fields are registered.
################################################################################
# Function for checking NCL scripts success
# Script sometimes fails to spawn child process for displaying time information; ignore these errors
# Also Execute.c is always shown as error alongside specific function error, so ignore that one
nclcheck() { # input log file as argument
  cat $1 | grep -v "Execute.c" | grep -v "systemfunc" | egrep "^fatal:" &>/dev/null
  return $? # return exit code; good status means we found error, bad status means we found nothing
    # ignore ^warning: because these will also happen if we have a systemfunc error possibly
}

# Make sure modules loaded
module load impi &>/dev/null # to parallelize the combine process, need mpirun!
module load nco &>/dev/null
module load ncl &>/dev/null
module load cdo/1.9.4 &>/dev/null

# Parse input flags
cores=8 # default cores for mppnccombine
debug=false     # keep data in original folder, instead of moving to ../netcdf? useful for testing
keepxyz=false   # keep original "full" results?
resume=false    # process old "full" files?
cdointerp=false # slower than NCO
combine=false   # just run mppnccombine
while [ $# -gt 0 ]; do
  case $1 in
    -q|--quit) echo "Skipping processing." && exit 0 ;;
    -d|--debug)      debug=true      ;;  # if true, keep all intermediate files
    -r|--resume)     resume=true      ;; # process old results sitting in the directory
    -k|--keep-xyz)   keepxyz=true     ;; # whether to keep longitudinal data
    -i|--interp-cdo) cdointerp=false  ;; # interpolate with CDO instead of NCL? much slower during testing (see notes)
    -c|--combine)    combine=true ;;     # only combine data
    -np=*)           cores="${1#*=}" ;;  # number of cores
    *) echo "Error: Unknown flag \"$1\"." && exit 127 ;;
  esac
  shift # shift by one
done

# Global vars
t0=$(date +%s)                    # starting time
bin=${0%/*}                       # same location as this file; trim filename from right
run=mpirun                        # for running mppnccombine on Cheyenne; parallelization really necessary
interpcdo=$bin/process_interp     # interpolate with CDO
interpncl=$bin/process_interp.ncl # interpolate with NCL, automatic iteration
mppnccombine=$bin/mppnccombine.x  # combine; needs to have been compiled here
params=$bin/process_params.ncl    # params with NCL
fluxes=$bin/process_fluxes        # zonal means and flux terms with CDO
lorenz=$bin/process_energy.ncl    # eddy and mean Lorenz energy cycle terms with NCL
# lorenz=$bin/process_lorenz      # Lorenz energy cycle terms with CDO
# energy=$bin/process_energy      # Lorenz energy cycle terms with CDO
# Double check some stuff
[ ! -x $fluxes ]        && echo "Error: The script \"$fluxes\" is missing."                       && exit 127
[ ! -x $lorenz ]        && echo "Error: The script \"$lorenz\" is missing."                       && exit 127
[ ! -r $interpncl ]     && echo "Error: The script \"$interpncl\" is missing."                    && exit 127
[ ! -x $mppnccombine ]  && echo "Error: The mpp combine executable \"$mppnccombine\" is missing." && exit 127
! hash ncl 2>/dev/null  && echo "Error: NCL is not in $PATH."                                     && exit 127
! hash cdo 2>/dev/null  && echo "Error: CDO is not in $PATH."                                     && exit 127
! hash ncks 2>/dev/null && echo "Error: NCO is not in $PATH."                                     && exit 127

################################################################################
# Combine the files produced in parallel
# And check if any netCDF output; see: https://stackoverflow.com/q/2937407/4970632
if $resume; then
  # Will use existing _full.nc XYZ resolution files for getting the YZ files
  echo "Using previous model results for getting XY files."
  if $debug; then
    ncfiles=(*_full.nc)
  else
    ncfiles=(../netcdf/*_full.${PWD##*/}.nc)
  fi
  [[ "$ncfiles" =~ "*" ]] && echo "Error: XYZ resolution files not found." && exit 1
else
  # Merge files produced in parallel, then get the _full XYZ files and YZ files from result
  t=$(date +%s)
  ncfiles=(*.nc.0000)
  if [[ "$ncfiles" =~ "*" ]]; then
    ncfiles=(*.nc) # already present?
    if [ ${#ncfiles[@]} -ge 1 ]; then
      echo "Note: Model ran on only 1 core, do not need to merge files."
    else
      echo "Error: Model output files not found." && exit 1 # make sure nullglob turned off
    fi
  else
    for ncfile in *.nc.0000; do # for each output filename
      files=(${ncfile%%.*}.nc*) # put into array
      echo "Combining files: ${files[@]} into ${ncfile%%.*}.nc"
      # $run -np $cores $mppnccombine -r ${ncfile%%.*}.nc ${files[@]}
      $mppnccombine -r ${ncfile%%.*}.nc ${files[@]}
    done # -r flag says to remove the decomposed .0000 files after they are combined; arg 1 is output, arg 2-N is input
    ncfiles=(*.nc) # each output file
  fi
  echo "  * Time for combining files: $(($(date +%s) - $t))s."
  # Initialize directory for output
  [ ! -d ../netcdf ] && mkdir ../netcdf # make directory if doesn't exist
fi
# Optional exit, if only wanted to combine data
if $combine; then
  exit 0
fi

################################################################################
# THE STDOUT OF THESE LINES IS AN OVERVIEW; SEPARATE STDOUTS FOR CDO/NCL STEPS
# CAN BE FOUND IN SEPARATE LOGS; CHECK THOSE LOGS IF WE HAVE AN ERROR
# Before, this function also accepted averaged data; not anymore, but these are
#   some approaches for testing if file has averaged data
# * [[ " $(cdo -s showname $ncfile) " =~ " time_bounds " ]] # CDO test if averaged
#   isaveraged="print(isfilevar(addfile(\"$ncfile\",\"r\"),\"time_bounds\"))"
# * [ $(ncl -Q -n <<< "$isaveraged") == "False" ] # NCL test if averaged
# * [[ ! " $(ncvarlist $ncfile) " =~ " time_bounds " ]] # NCO test if averaged
for ncfile in ${ncfiles[@]}; do
  # Ouput file names
  if $debug; then # special names, and keep in same folder
    xyfile="${ncfile%%.*}_summary.nc" # longitude-averaged data
    xyzfile="${ncfile%%.*}_full.nc" # original data
  else
    xyfile="../netcdf/${ncfile%%.*}_summary.${PWD##*/}.nc" # longitude-averaged data
    xyzfile="../netcdf/${ncfile%%.*}_full.${PWD##*/}.nc" # original data
  fi
  # Apply some simple modifications to attributes
  ncrename -d pfull,mlev $ncfile &>/dev/null # mlev is the ECHAM convention, needed for CDO interpolation
  ncrename -d phalf,ilev $ncfile &>/dev/null # ilev is the other ECHAM convention
  ncrename -v pfull,mlev $ncfile &>/dev/null # -d renames dimensions, -v renames variables of same name
  ncrename -v phalf,ilev $ncfile &>/dev/null
  ncatted -O -a bounds,mlev,o,c,"ilev" $ncfile
  ncatted -O -a long_name,udamp,o,c,"Rayleigh damping of zonal wind" $ncfile
  ncatted -O -a long_name,vdamp,o,c,"Rayleigh damping of meridional wind" $ncfile


  ############################################################################
  if ! $resume; then # data already interpolated
    # 1) Interpolate the data to pressure levels
    interpfile=${ncfile%%.*}_interp.nc
    # a) Use CDO for interpolation
    t=$(date +%s)
    if $cdointerp; then
      echo "Interpolating with CDO..."
      $interpcdo $ncfile $interpfile &>log.interp # that simple babe
      [ $? != 0 ] && echo "Error: Something failed during CDO interpolation." && exit $?
      ! $debug && rm interp?.nc
    # b) Use NCL vint2hp_ecmwf for interpolation
    else
      echo "Interpolating with NCL..." # -Q = no banner, -n = do not enumerate print statements
      ncl -n -Q "filename=\"$ncfile\"" "outfile=\"$interpfile\"" $interpncl &>log.interp #2> /dev/null
      if nclcheck log.interp || [ ! -r $interpfile ]; then
        echo "Error: Something failed during NCL interpolation." && exit 2
      fi
    fi
    # Standardize attributes
    ncatted -a edges,lon,d,, -a edges,lat,d,, \
      -a axis,lon,o,c,"X" -a axis,lat,o,c,"Y" -a axis,plev,o,c,"Z" \
      -a long_name,plev,o,c,"pressure level" -a units,plev,o,c,"mb" -a bounds,plev,o,c,"plev_bnds" \
      -a long_name,lat,o,c,"latitude" -a units,lat,o,c,"degrees_north" \
      -a long_name,lon,o,c,"longitude" -a units,lon,o,c,"degrees_east" $interpfile
    $debug && ncfile=$interpfile || mv $interpfile $ncfile # move old file on top of new file
    echo "  * Time for interpolation: $(($(date +%s) - $t))s."
  fi
  # ##############################################################################
  # # Add some parameters to the longitude-latitude file with NCL
  # t=$(date +%s)
  # echo "Getting extra parameters with NCL..." # -Q = no banner, -n = do not enumerate print statements
  # ncl -n -Q "filename=\"$ncfile\"" $params &>log.params #2> /dev/null
  # if nclcheck log.params; then
  #   echo "Error: Something failed getting extra parameters with NCL." && exit 3
  # fi
  # echo "  * Time for getting extra parameters with NCL: $(($(date +%s) - $t))s."

  ##############################################################################
  # 2) Get 2D resolution parameters
  # First the CDO commands
  # t=$(date +%s)
  echo "Getting CDO 2D parameters..."
  $fluxes $ncfile .nc &>log.basic &
  pbasics=$!
  # [ $? != 0 ] && echo "Error: Something failed while getting basic terms." && exit 3
  # echo "  * Time for getting basic terms with CDO: $(($(date +%s) - $t))s."

  ##############################################################################
  # 3) The NCL commands; used to get energy terms
  # Some of these require the extra variables output by NCL; also meridional flux
  # terms rely on NCL having set poleward==positive in each hemisphere
  # t=$(date +%s)
  echo "Getting NCL 2D parameters..."
  ncl -n -Q "filename=\"$ncfile\"" "suffix=\".nc\"" $lorenz &>log.lorenz &
  plorenz=$!
  # if nclcheck log.lorenz; then
  #   echo "Error: Something failed getting extra parameters with NCL." && exit 4
  # fi
  # echo "  * Time for getting Lorenz energy terms with NCL: $(($(date +%s) - $t))s."

  ##############################################################################
  # Manage the two background processes
  wait $pbasics # wait for basic terms
  [ $? != 0 ] && echo "Error: Something failed while getting CDO parameters." && exit 3
  twait=$(tail -1 log.basic | sed 's/[^0-9]*//g')
  echo "  * Time for getting 2D parameters with CDO: ${twait}s."
  wait $plorenz # wait for Lorenz terms
  if nclcheck log.lorenz; then
    echo "Error: Something failed while getting NCL parameters." && exit 4
  fi
  twait=$(tail -1 log.lorenz | sed 's/[^0-9]*//g')
  echo "  * Time for getting 2D parameters with NCL: ${twait}s."

  ##############################################################################
  # 4) Tidy up, and get 2D terms
  t=$(date +%s)
  echo "Merging the CDO and NCL parameters into one file..."
  # First add back longitudes to NCL calculated terms
  # Hard/annoying/verbose to fix this in NCL so do it here
  for f in energy??.nc; do # absolutely necessary for CDO to detect plev as vertical axis, and need singleton longitude
    cdo -s -setgrid,basic1.nc $f tmp.nc; mv tmp.nc $f # so ugly... kill me...
  done
  # Next apply merge
  cdo -O -s -merge basic?.nc energy??.nc $xyfile # will raise errors because edges were deleted, but still referenced by attributes
  ncks -O $xyfile $xyfile # clever hack; just *alphabetizes* the variables in file, and very fast
  echo "  * Time for merging into one file: $(($(date +%s) - $t))s."
  # Then remove the temporary files
  ! $debug && rm basic?.nc energy??.nc
  if ! $resume; then
    if $debug || $keepxyz; then
      # Keep the old file
      # Also get divergence, vorticity, streamfunction, and velocity potential
      t=$(date +%s)
      echo "Keeping XYZ file and calculating extra terms..."
      cdo -O -s -uv2dv -selname,u,v $ncfile dv0.nc 1>/dev/null          # gets spectral coefs for vor/div from Gaussian grid of u/v
      cdo -O -s -delname,velopot       -invertlat -sp2gp -dv2ps dv0.nc dv1.nc # spectral vor/div to spectral streamfunc/velocity pot; throw out the latter
      cdo -O -s -chname,sd,div,svo,vor -invertlat -sp2gp dv0.nc dv2.nc  # better names
      ncap2 -O -s '*f[$lat] = 2*7.292e-5*sin(lat*3.14159/180); absvor = vor+f' dv2.nc dv2.nc # tack on absolute vorticity
        # get absolute vorticity; asterisk means this is a "RAM" variable, not saved in final output
      if [ ! -r dv0.nc ] || [ ! -r dv1.nc ] || [ ! -r dv2.nc ]; then
        echo "Warning: Could not get the vir/div/streamfunc terms."
        mv $ncfile $xyzfile
      else
        cdo -O -s -merge $ncfile dv1.nc dv2.nc $xyzfile
        ! $debug && rm $ncfile
      fi
      ! $debug && rm dv?.nc # remove any that may exist
      echo "  * Time for getting extra div/vor/streamfunc terms from original file: $(($(date +%s) - $t))s."
    else
      # Delete the old file
      echo "Removing XYZ file..."
      ! $debug && rm $ncfile # simple
    fi
  fi
done

# Finally, echo time of finish
# Can parse this to send message to the window that ran the runscript/batch runscript
# echo $(($(date +%s) - $t0)) # prints UNIX time difference
echo "TOTAL TIME ELAPSED: $(($(date +%s) - $t0))s."
