#!/bin/bash
# Use this to loop through spectral_run function
# set -e # exit if runscript triggered error

# Tasks to run
MODE=2 # 1 is run the model, 2 is process the xyz files to yz, and
# 3 is post-process the yz files to climate means and such
TESTING=false # do quick test control/spindown runs? note that
# in post-processing mode this will process the default Held-Suarez results

# Model run settings
CONTROL=true  # do control run?
SPINDOWN=false # do spindown runs?
NEWEXPER=false # do not write to existing experiment directories?
NEWDAYS=false # do not overwrite existing dXXXX-dYYYY directories?
INIT=false # just produce the initial model state, then exit?
# Experiment specifications
EXPNAME=hs # which source code to use; can be "hs" or "pk"
EXPTYPE=spectral # change this for different file
FILENAME=4xdaily_inst # name for output files
TOPOFILE= # path to topography e.g. $PWD/topo.nc

#-------------------------------------------------------------------------------
# General model-run variables
CORES=16 # core count
KTS=(20) # one KT for now
# KFS=(1) KAS=(0.1 0.25 0.5 1 2.5 5 10 20 40 "80 40" "160 80" "320 160" "640 320") # continuation for the later ones
# KFS=(1) KAS=("80 40" "160 80" "320 160" "640 320") # with reference experiments
# KFS=(1) KAS=("1024 640" "2048 1024") # why the fuck not?
# EXPOPTS=(2 3) KFS=(1) KAS=(40 0.1 0.25 0.5 1 2.5 5 10 20 80 160 320 640 \
#   "80 40" "160 80" "320 160" "640 320") # continuation for the later ones
EXPOPTS=(2 3) KFS=(1) KAS=(40 0.1 0.25 0.5 1 2.5 5 10 20 \
  "80 40" "160 80" "320 160" "640 320") # only the continuation experiments
# EXPOPTS=(1) KAS=(40) KFS=(0.025 0.05 0.1 0.25 0.5 1 2 4 8 16 32 64)
# KFS=(1) KAS=(40) EXPOPTS=(1) # re-do
# NTRUNC=(85) LEVS=(era) # the ERA-Interim conventions
NTRUNCS=(42) LEVS=(40) # truncation numbers

#-------------------------------------------------------------------------------
# Control experiment timing
PDAYS=d1100-d1200 # where to restart from previous experiments
DAYS=100 # for T42 and 40 equally-spaced levels
DAYS=20 # for T85 and 60 ERA-Interim levels; expands z by 1.5 and lat/lon by 2/2
  # equals 6 times file size so try to reduce number of days by about 6 times
# DT=300 # for 0.05 radiation experiment
DT=600 # for other experiments
TSTART=0 # first day of integration; set to 0 for new run.
# TEND=2000 # last day of integration after spin-up
TEND=1200 # for new experiments just do 1200 day integrations; dump the first 200
TRECORD=({0000..9999}) # when to record anything at all?
TKEEP=(1000) # when to retain longitude info?

#-------------------------------------------------------------------------------
# Spindown experiment timing
SPINDOWNOPT=1 # the spindown option; see run code for details
  # 1 for radiation off, 2 for radiation off but surface on, 
  # 3 for everything off (radiation, surface, and friction), 4 for friction off
SPINDOWNSTART=0 # start day for spindown file
SPINDOWNEND=600 # end day for spindown file
TCONTROL=({10..59}00) # just one equilibrium run, for testing?
TSPINRECORD=({0000..9999}) # when to record anything at all?
TSPINKEEP=(-100) # when to keep longitude resolution data?
TSPINSTART=0 # start day for spindown (in days after tcontrol)
TSPINEND=600 # how long to run equilibrium?
  # so an extra 500 days for each

#-------------------------------------------------------------------------------
# Post-processing variables
# Option to run in parallel
PARALLELMAX=4 # maximum parallel post-processing events
CLIMOSTART=1000 CLIMOEND=2000 # start/end climatology for post processing
CLIMOSTART=200 CLIMOEND=1200 # for continuation experiments, this should be fine
# CLIMOSTART=1000 CLIMOEND=1100 # for testing
PARALLEL=false
COVAR=false AUTOCORR=false
REGIONAL=true ENERGY=true CLIMATE=false EOF2D=false EOF=false
  # time-series of volume-integrated energy; average cross-section; 2d and 1d EOFs
SPINDOWNAVE=false SPINDOWNXS=false SPINDOWNTAU=false
  # time-series of area-averaged quantities; full cross-section time-series; timescale estimate

#-------------------------------------------------------------------------------
# Override for test experiments
if $TESTING; then # overwrite some settings
  # DAYS=1 TSTART=0 TEND=1
  PDIR="../t42l40_hs1r0040.000f0001.000/$PDAYS" # override previous directory
  DAYS=1 TSTART=2000 TEND=2003
  # DAYS=10 TSTART=2000 TEND=2010 PDIR=t42l40_d2000
  # DAYS=100 TSTART=2000 TEND=2100 PDIR=t42l40_d2000
  TCONTROL=(10) TSPINSTART=0 TSPINEND=10
  # TSTART=0 TEND=1
  # TCONTROL=(10) TSPINSTART=0 TSPINEND=1
  TRECORD=({0000..9999}) TKEEP=({0000..9999}) NEWEXPER=false NEWDAYS=false
  # NTRUNCS=(42) LEVS=(era) KTS=(20) KAS=(40) KFS=(1)
  EXPOPTS=(1) NTRUNCS=(42) LEVS=(40) KTS=(20) KAS=(40) KFS=(1)
  CLIMOSTART=1000 CLIMOEND=1100
fi

#------------------------------------------------------------------------------#
# Function for writing a *modified* namelist file
# Will read input_default.nml and change lines with sed; easy peasy
# function namelist() {
#   # Just assign namelist based on environmental variables
#   updates="ka=$KA kf=$KF ntrunc=$NTRUN"
#   for string in $updates; do
#     if ! grep '^\s*'${string%=*}'\b' $nml &>/dev/null; then
#       echo "Error: Param \"${string%=*}\" not found in namelist."
#       rm -r $rundir
#       exit 1
#     else
#       sed -i 's/^\([[:space:]]*\)'${string%=*}'\W.*$/\1'$string', /g' $nml
#     fi # sed -i 's/^\([[:space:]]*\)'${string%=*}'\(.*\)$/\1'$string'\2/g' $nml
#   done
# }

#-------------------------------------------------------------------------------
# Run multiple experiments consecutively
counter=0 # counter
cwd=$(pwd)
for IEXPOPT in "${EXPOPTS[@]}"; do # describes scaling of surface damping rate
  for LEV in "${LEVS[@]}"; do
    for NTRUNC in "${NTRUNCS[@]}"; do
      for KT in "${KTS[@]}"; do # stratosphere timescales
        for KA in "${KAS[@]}"; do # troposphere timescales
          for KF in "${KFS[@]}"; do # friction timescales
            #------------------------------------------------------------------#
            # Initial stuff before calling anything
            # Ensure are still in same directory
            cd $cwd
            # Experiment directory setup
            KARESTART= # reset this variable
            [ "$KA" == 40 ] && EXPOPT=0 || EXPOPT=$IEXPOPT # if radiation is already Held-Suarez, make expopt 0
            [[ "$KF" =~ " " ]] && KFRESTART=${KF##* } KF=${KF%% *}
            [[ "$KA" =~ " " ]] && KARESTART=${KA##* } KA=${KA%% *} # syntax is ka="<restart_ka> <new_ka>"
            EXPDIR="t${NTRUNC}l${LEV}_${EXPNAME}${EXPOPT}r$(printf "%08.3f" $KA)f$(printf "%08.3f" $KF)"
            if [ ! -z "$KARESTART" ] || [ ! -z "$KFRESTART" ]; then
              [ "$KARESTART" == 40 ] && EXPOPTRESTART=0 || EXPOPTRESTART=$IEXPOPT # same but for the restart file
              [ -z "$KARESTART" ] && KARESTART=$KA
              [ -z "$KFRESTART" ] && KFRESTART=$KF
              PDIR="t${NTRUNC}l${LEV}_${EXPNAME}${EXPOPTRESTART}r$(printf "%08.3f" $KARESTART)f$(printf "%08.3f" $KFRESTART)"
              EXPDIR="${EXPDIR}continued" # special name for experiment restarted this way
              [[ $KARESTART != 40 || $KFRESTART != 1 ]] && PDIR="${PDIR}continued" # only continue from other 'continuation' experiments, unless starting from default
            fi
            #------------------------------------------------------------------#
            # Boundary layer timescale setup
            case $EXPOPT in
              [01]) KS=4 ;; # hold boundary layer value constant
              2) KS=$(bc -l <<< "$KA/10") ;; # hold ratio constant; i.e. keep it at
              3) KS=$(bc -l <<< "(4^-1 + ($KA^-1 - 40^-1))^-1") ;; # preserve 'boundary layer' component
              *) echo "Error: Unknown experiment option ${EXPOPT}." && exit 1 ;;
            esac
            #------------------------------------------------------------------#
            # Run model
            if [ $MODE -eq 0 ]; then
              # Print information and source the runscript
              $TESTING && EXPDIR="test" # override to this dummy directory
              echo "Current experiment directory: ${EXPDIR}."
              echo "Truncation number $NTRUNC ($CORES cores). Vertical coordinates ${LEV}."
              echo "Radiation ${KA}days surface radiation ${KS}days friction ${KF}days."
              source drycore_run # can read variables declared here
            #------------------------------------------------------------------#
            # Process model
            elif [ $MODE -eq 1 ]; then
              continue
              # Process data directly, using the 'full' files as input
              # How da fuck to do this?
            #------------------------------------------------------------------#
            # Call post-process script
            elif [ $MODE -eq 2 ]; then
              $PARALLEL && [ $(($counter % $PARALLELMAX)) == 0 ] \
                && echo "Waiting for spawned processes." && wait
              $TESTING && EXPDIR="test"
              echo "Current experiment directory: ${EXPDIR}."
              source postprocess
              counter=$(($counter + 1))
            fi
          done
        done
      done
    done
  done
done
