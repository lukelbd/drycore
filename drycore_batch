#!/bin/bash
################################################################################
# Use this to loop through model run and post-processing scripts
# Those scripts were written to be totally self-contained -- they accept various
# flags passed by this script.
# Experiments will be named as follows:
#    <forcetype>_<series>_<resolution>_<parameter spec>
# Experiment series naming conventions:
#    troprad[123]     - change tropospheric damping; number is boundary layer option
#    diag[123]        - change both friction and tropospheric damping
#    fric             - change just friction
#    stratrad[XX][cl] - change just stratospheric damping, XX is the depth of
#                       transition layer and the suffix controls upper stratosphere option
# Resolution designation: t[XX]l[YY][spe]
#   * First number is truncation number.
#   * Second number is level count.
#   * Suffix controls level spacing option: [s]imple/even [s]igma, [p]olvani
#     kushner spacing, or [e]ra-interim spacing.
# Parameter specifications: p[XXX]p[YYY]...
#   * Each parameter preceded by p; which parameter(s) are being changed
#     depends on the experiment series. Most just change one.
################################################################################
# Tasks to run
dryrun=false  # just print function calls
batchmode=$1 # 0 is run the model, 1 is process the XYZ files to YZ, and 2 is postprocess the YZ files
testmode=0   # 0 is no test, 1 is run for a day or two, 2 is check initial output
runmode=0    # 0 is control run, the rest are different spindown modes:
  # 1 for radiation off, 2 for radiation off but surface on, 
  # 3 for everything off (radiation, surface, and friction), 4 for friction off
if [ -z "$batchmode" ]; then
  echo "Error: Must call script with integer indicating batch mode." && exit 1
elif [[ ! "$batchmode" =~ [012] ]]; then
  echo "Error: Invalid batch mode ${batchmode}." && exit 1
fi
# Model run settings
resume=false # do not overwrite existing dXXXX-dYYYY directories?
newexper=false # do not write to existing experiment directories?
# Post-processing variable options
parallelmax=1 # maximum parallel post-processing events
spinstart=0 spinend=100000
climostart=200 climoend=1200 # skip first 200 days; but for spindown data, want to process all of it usually
postprocess+="--climate "
# postprocess+="--parallel " # optional
# postprocess+="--energy --time-series "

################################################################################
# Variables without loops
cores=8  # core count
kdepth=5 # will be ignored if not a pk/da experiment
kmeso=-4  # will be ignored of not a pk/da experiment, or if use a 'constant' stratosphere damping mode, instead of linear transition to top boundary
# Next parameter sweeps and timing
case $testmode in 0)
  #-------------------------------------------------------------------------------
  # This is not a test
  # Parameter sweep
  # Trop experiments
  forcetype=hs # can be either of 'hs', 'pk', or 'da'
  resos="t42l20s" # teeny sigma better
  #----------------------------------------------------------------------------#
  # Rad experiments
  series="troprad3-fixedmean"
  params1=(20 10 4 2 1 "40 80" "80 160")
  [ -n "$2" ] && series="$2"
  # params1=("40 80" "80 160" "160 320")
  # params1=("160 320" "320 640")
  # series="troprad2-fixedmean"
  # params1=(40 20 10 4 2 1 0.4 "40 80" "80 160" 0.2 0.1 "160 320")
  # series="troprad2-anom"
  # params1=(1 2 4 10 20 40)
  # params1=(20 10 4 2 1 0.4 0.2 0.1 "40 80" "80 160" "160 320")
  # params1=(20 10 4 2 1 0.4 "40 80" "80 160")
  #----------------------------------------------------------------------------#
  # T grad experiments
  # series="tgrad"
  # params1=(30 40 50 70 80 90)
  #----------------------------------------------------------------------------#
  # Strat experiments; do 16, with a few different configurations
  # forcetype=da # can be either of 'hs', 'pk', or 'da'
  # resos="t42l50p"
  # series="stratrad10c stratrad10l stratrad5c stratrad5l"
  # series="stratrad10c stratrad10l stratrad4c stratrad4l stratrad2c stratrad2l stratrad1c stratrad1l"
  # series="stratrad10c stratrad4c stratrad2c stratrad1c"
  # params1=(40 20 10 4)
  # params1=(2 1) # try super duper fast damping!
  #-------------------------------------------------------------------------------
  # Output and timing
  filename=4xdaily_inst # name for output files
  frequnits=hours       # hours
  outfreq=6             # every 6
  dt=600     # for other experiments
  days=100   # make resolution dependent?
  secs=0     # normally is zero
  tstart=200 # first day of integration; set to 0 for new run.
  tend=1200  # for new experiments just do 1200 day integrations; dump the first 200
  tinit=1000
  tkeep="200 300 400 500 600 700 800 900 1000 1100" # when to retain longitude info?
  # tinit="$(seq 1000 100 5900 | xargs)" # for spindown initiation
#-------------------------------------------------------------------------------
# Run really fast test run
;; 1)
  # Sweep settings
  batchmode=0  # run model
  forcetype=hs # can be either of 'hs', 'pk', or 'da'
  resos="t42l40s"
  series="base"
  # Timing and other
  filename="test"
  extra="--no-move " # pass to process script; don't move/delete anything
  rdir="${forcetype}_base_t42l40s/d1100-d1200" # override previous directory
  dt=600 days=1 secs=0 outfreq=1 frequnits=hours
  tstart=0 tend=3 tinit=3
  newexper=false resume=false
# Initial conditions
# Run at high resolution to get really clear picture
;; 2)
  # Sweep settings
  batchmode=0  # run model
  forcetype=da # can be either of 'hs', 'pk', or 'da'
  resos="t42l20s"
  series="base"
  # Other settings
  filename="init"
  extra="--combine-only --no-move " # passed to process script; don't post-process anything
  cores=1 # easier for debugging, otherwise print statements executed simultaneously
  dt=1 days=0 secs=1 outfreq=1 frequnits=seconds
  tstart=0 tend=0 tinit=0
  newexper=false resume=false
;; *) echo "Error: Unknown testmode \"$testmode\"." && exit 1
;; esac

#------------------------------------------------------------------------------#
# Helper functions
#------------------------------------------------------------------------------#
# Call this function as Add param v<value> param v<value>
# Modifies ***global*** arrays 'params' and 'values'
# If the <value> part is empty (e.g., if this particular experiment
# series does not change that value), will not add to arrays
# Function accounts for situation when you pass an empty string parameter
# or negative number, and have weird strings like "v-" and "v''"
function Add() {
  while [ $# -ne 0 ]; do
    if [ -n "$2" ] && [ "${#2}" -gt 1 ] && [ "$2" != "v-" ] && [ "$2" != "v''" ]; then
      [ "${2:0:1}" != v ] && echo "Error: Values must be input as v<value>." && exit 1
      params+=("$1")
      values+=("${2#v}")
    fi
    shift 2
  done
}
#----------------------------------------------------------------------------#
# Function for writing a *modified* namelist file
# Will read input_default.nml and change lines with sed; easy peasy
function Namelist() {
  # Initial stuff
  local ktrop kfric kbl kstrat \
        ntrunc nsphere nlat nlon coord nlev message
  expname="$1"
  unset params values
  [ -z "$expname" ] && echo "Error: Requires one argument." && exit 1
  # Parse the experiment name, figure out what needs to be written
  series="${expname#*_}"
  series="${series%%_*}"
  reso="${expname#*_}"
  reso="${reso#*_}"
  reso="${reso%%_*}"
  if [ $series == base ]; then
    vals=()
  else
    vals="${expname##*_}"
    vals="${vals%c}"
    vals=($(echo $vals | tr -t 'p' ' ' | xargs printf "%.3f "))
  fi
  # Change forcing namelist parameters
  # Add to this as you design new experiment series
  # TODO: Perhaps will have
  case $series in
    base*) # Dun do shit
      if [[ $series =~ -fixedmean$ ]]; then
        ktrop="3600,-40"
        kbl="3600,-4"
      fi
    ;; troprad[0-9]|troprad[0-9]-anom|troprad[0-9]-mean|troprad[0-9]-fixedmean|diag[0-9])
      #------------------------------------------------------------------------#
      # Troposphere experiments
      # First set mean and anomaly components of troposphere damping
      ktrop=-${vals[0]}
      [[ $series =~ diag[0-9] ]] && kfric=-${vals[1]} # diagaonal experiment
      if [[ $series =~ -anom$ ]]; then
        ktrop="-40,$ktrop"
      elif [[ $series =~ -mean$ ]]; then
        ktrop="$ktrop,-40"
      fi
      # Next, separately scale boundary layer damping rate
      kbl=""
      blopt=${series%%-*} # e.g. trim -fixedmean
      blopt=${blopt##*[a-z]} # get number
      for iktrop in ${ktrop/,/ }; do
        case "$blopt" in
          [01]) ikbl=-4 ;; # hold boundary layer value constant
          2)    ikbl=-$(bc -l <<< "scale=3; ${iktrop#-}/10") ;; # hold ratio constant; i.e. keep it at 10
          3)    ikbl=-$(bc -l <<< "scale=3; (4^-1 + (${iktrop#-}^-1 - 40^-1))^-1") ;; # preserve 'boundary layer' component
          *) echo "Error: Unknown blopt ${blopt}." && exit 1 ;;
        esac
        kbl=$kbl,$ikbl # mean and anomaly components
      done
      kbl=${kbl#,} # trim leading comma
      # Special fixes background state case
      if [[ $series =~ -fixedmean$ ]]; then
        ktrop="3600,$ktrop" # model breaks on scale of minutes, but seems to handle 1 hour o.k. (i.e. 0.05days)
        kbl="3600,$kbl"
      fi
    ;; tgrad*)
      #------------------------------------------------------------------------#
      # Temp gradient experiments
      delh=${vals[0]} # easy peasy!
    ;; stratrad*)
      #------------------------------------------------------------------------#
      # Stratosphere damping experiments
      kstrat=-${vals[0]}
      kdepth=${series#stratrad}
      kdepth=${kdepth%[a-z]}
      stratdamp=${series##*[0-9]}
      case "$stratdamp" in
        l) stratdamp='linear' ;;
        c) stratdamp='constant' ;;
        *) echo "Error: Unknown stratosphere damping option ${stratdamp}." && exit 1 ;;
      esac
    ;; fric)
      #------------------------------------------------------------------------#
      # Friction experiments
      kfric=-${vals[0]}
    ;; *) echo "Error: Unknown experiment series \"$series\"." && exit 1 ;;
  esac
  Add delh v$delh
  Add strat_mode v\'$forcetype\' strat_damp v\'$stratdamp\'
  Add ktrop v$ktrop kfric v$kfric kbl v$kbl kstrat v$kstrat kmeso v$kmeso z_kdepth v$kdepth
  # Horizontal coordinates
  ntrunc=${reso%l*}
  ntrunc=${ntrunc#t}
  case $ntrunc in
    42)  nlat=64  ;;
    63)  nlat=96  ;;
    85)  nlat=128 ;;
    106) nlat=160 ;;
    170) nlat=256 ;;
    *) echo "Error: Invalid truncation number \"$ntrunc\"."; exit 1 ;;
  esac
  nsphere=$(($ntrunc + 1)) # forget what difference between num fourier and num spherical means
  nlon=$(($nlat * 2)) # always twice the res
  Add num_fourier v$ntrunc num_spherical v$nsphere lat_max v$nlat lon_max v$nlon
  # Now vertical resolution options
  # Will raise error if string-specifier is unknown
  vert=${reso#*l}
  case $vert in
    *e) coord=input;      nlev=60;       levels=levels_era.nml ;;
    *j) coord=input;      nlev=40;       levels=levels_jer.nml ;;
    *p) coord=pk_sigma;   nlev=${vert%p}; levels=               ;;
    *s) coord=even_sigma; nlev=${vert%s}; levels=               ;; # ERA-Interim coordinates
    *) echo "Error: Unknown vertical coordinate identifier \"${vert}\"."; exit 1; ;;
  esac
  Add num_levels v$nlev vert_coord_option v\'$coord\'
  # Timing variables
  Add dt_atmos v$dt days v$days seconds v$secs
  #----------------------------------------------------------------------------#
  # Modify namelist parameters
  # Message
  echo "Updating namelist with:"
  index=0; width=6; while [ $index -le ${#params[@]} ]; do
    message+="${params[@]:$index:$width}\n${values[@]:$index:$width}\n\n"
    let index+=$width
  done
  printf "$message" | column -t
  # Copy over the default namelist
  def=input_default.nml
  nml=input.nml
  cp $def $nml # move over defaut
  # Add forcing namelist
  force=forcing_default.nml
  [ ! -r "$force" ] && echo "Error: File \"$force\" not found." && exit 1
  cat $force >>$nml # append that shit
  # Add coordinate namelist, potentially
  if [ ! -z "$levels" ]; then
    [ ! -r "$levels" ] && echo "Error: File \"$levels\" not found." && exit 1
    cat $levels >>$nml
  fi
  # Now loop through variables and assign them
  # Only modify the parameter sweep variables, resolution variables, and
  # timing variables. For others, just change in the namelist file directly.
  [ ${#params[@]} -ne ${#values[@]} ] && echo "Error: One of the batch script namelist params is unset." && exit 1
  for i in $(seq 0 $((${#params[@]}-1))); do
    param=${params[$i]}
    value=${values[$i]}
    [ -z "$param" ] && continue # e.g. stratosphere timescale should be empty
    ! grep '^[ \t]*\b'${param}'\b' $nml &>/dev/null && \
      echo "Error: Param \"${param}\" not found in namelist." && exit 1
    space='\([ \t]*\)' # space atom; more readable to set it as a variable
    sed -i 's/^'"${space}${param}${space}"'='"${space}"'.*$/\1'${param}'\2=\3'${value}',/g' $nml
  done
  # Remove comments to be safe
  sed -i 's/!.*$//g;/^[ \t]*$/d' $nml # remove comments
  # Message
  return
}
#------------------------------------------------------------------------------#
# Copy over the diag table, and modify a couple params
# Note some of those comments cause parse errors! But want to comment it god damnit
# so will just remove them after the fact
function Diag() {
  # Modify diag table
  [ $testmode -eq 2 ] && diag=diag_table_init || diag=diag_table_default
  cp $diag diag_table
  sed -i 's/filename/"'$filename'"/g;s/outfreq/'$outfreq'/g;s/frequnits/"'$frequnits'"/g' diag_table
  sed -i 's/#.*$//g;/^[ \t]*$/d' diag_table # remove comments, empty lines, for clarity
}

#------------------------------------------------------------------------------#
# Storage information for runscript and post-processing script
storage=/home/ldavis
scratch=/home/ldavis # on Euclid, home is unmounted/not backed up; so disk I/O is quick
case ${HOSTNAME%%.*} in
  olbers)
    mpibin=/usr/local/mpich3/bin
    ;;
  gauss)
    mpibin=/usr/local/mpich3-pgi/bin
    scratch=/birner-scratch/ldavis # need to use special scratch directory
    ;;
  euclid)
    mpibin=/usr/local/bin
    storage=/birner-home/ldavis # this directory is backed up; synced with GAUSS home folder
    ;;
  monde)
    mpibin=/usr/lib64/mpich/bin
    scratch=/mdata1/ldavis
    ;;
  *) echo "Error: Unknown host, must edit batch script before continuing." && exit 1 ;;
esac
PATH="$mpibin:$PATH" # will *not* be exported to invoking shell; so this is nbd
[ ! -d "$storage/data" ] && { mkdir "$storage/data"; echo "Created storage directory."; }
#------------------------------------------------------------------------------#
# Copy over the appropriate executable file
if [ $batchmode -eq 0 ]; then
  execdir=${HOSTNAME%%.*}
  cp $execdir/fms.x ./ # location of executables
  [ $? -ne 0 ] && echo "Error: fms.x not found in \"$execdir\"." && exit 1
  cp $execdir/mppnccombine.x ./ # location of executables
  [ $? -ne 0 ] && echo "Error: mppnccombine.x not found in \"$execdir\"." && exit 1
fi

################################################################################
# Run multiple experiments consecutively
echo
cwd=$(pwd)
counter=0 # counter
expnames=() # record completed experiments
pids=() # record postprocess exit codes
for se in $series; do
  # Simple error checks for experiment series
  if [ "$series" == base ]; then
    params1=(na)
  elif [ -z "$params1" ]; then
    echo "Error: You must define an array of parameters \"\$params1\"." && exit 1
  fi
  if [ "$series" != diag ]; then
    params2=(na)
  elif [ -z "$params2" ]; then
    echo "Error: You must define a second array of parameters \"\$params1\"." && exit 1
  fi
  for reso in $resos; do
    for param1 in "${params1[@]}"; do
      for param2 in "${params2[@]}"; do
        cd $cwd # ensure are still in same directory
        #----------------------------------------------------------------------#
        # Parallelize stuff
        if [ ${#pids[@]} -gt 0 ] && [ $(( ($counter-1) % $parallelmax )) == 0 ]; then
          echo "Waiting for processes: ${pids[@]}."
          for pid in ${pids[@]}; do
            wait $pid
            [ $? -ne 0 ] && echo "Error: A post-processing step failed." && exit 1
          done; pids=() # reset tracked process ids
        fi
        #------------------------------------------------------------------#
        # This loop enables "continuation experiments" -- picking up for new timescale
        # experiment from the end of the control run from an old experiment
        # First *detect* if the so-called "ktrop" is of the form "40 80" e.g., which means
        # pick up from ktrop=40 experiment, and start a ktrop=80 experiment
        let counter=$counter+1
        unset flags suffix expname roverride err
        [ $counter -gt 1 ] && unset rdir # allow override for first experiment
        i=0; for iparam1 in $param1; do for iparam2 in $param2; do let i=$i+1
          #--------------------------------------------------------------------#
          # Error checks
          unset ise ip1 ip2 suffix
          [ $i -gt 2 ] && echo "Error: Cannot do 'diagonal' continuation experiments." && exit 1
          # Record restart directory
          if [ ! -z $expname ]; then
            rdir="$expname"; suffix=c; [[ ! $rdir =~ base ]] && rdir="${rdir}c"
          fi
          #--------------------------------------------------------------------#
          # Check whether this is a 'base' experiment. Experiment series can
          # 'intersect' each other, and this ensures we aren't duplicating results.
          ise=$se; case $se in
            troprad[0-9]-fixedmean) [[ $iparam1 == 40 ]] && ise=base-fixedmean iparam1= ;; # no 'base' because background damping always huge
            troprad[0-9]*) [[ $iparam1 == 40 ]] && ise=base iparam1= ;; # base is 40 day zonal-mean or anomaly damping
            fric)          [[ $iparam1 == 1 ]]  && ise=base iparam1= ;;
            diag[0-9]*)    [[ $iparam1 == 40 && $iparam2 == 1 ]] && ise=base iparam1= iparam2= ;;
            stratrad*)     [[ $iparam1 == 40 ]] && ise=base iparam1= iparam2= ;;
          esac
          [ -n "$iparam1" ] && [ "$iparam1" != na ] && ip1="_p$(printf "%08.3f" $iparam1)"
          [ -n "$iparam2" ] && [ "$iparam2" != na ] && ip2="_p$(printf "%08.3f" $iparam2)"
          expname="${forcetype}_${ise}_${reso}${ip1}${ip2}${suffix}"
        done; done
        if [[ " ${expnames[@]} " =~ " $expname " ]]; then
          echo "Already processed $expname in this loop."
          continue
        else
          echo "Experiment name: $expname"
          expnames+=($expname) # record in list
        fi
        #------------------------------------------------------------------#
        # Set up input.nml and diag_table in current directory
        # Will parse the experiment name designations and change corresponding namelist values
        Namelist "$expname"
        Diag
        #------------------------------------------------------------------#
        # Run model
        if [ $batchmode -eq 0 ]; then
          # Full experiment directory path
          case $testmode in
            0) expdir="$scratch/$expname" ;; # running model
            1) expdir="$scratch/test" ;;
            2) expdir="$scratch/init" ;;
          esac
          # Flags
          $resume   && flags+="--resume "       # do not overwrite existing dXXXX-dYYYY days?
          $newexper && flags+="--new-experiment " # do not write to existing experiment folders?
          [ ! -z "$rdir" ] && [ $runmode -eq 0 ] && echo "Warning: Using \"${rdir}\" for restart files." \
                             && flags+="--restart $scratch/$rdir " # override with this restart directory
          [ ! -z "$tblank" ] && flags+="--days-blank $tblank " # record zero data
          [ ! -z "$tkeep" ]  && flags+="--days-keep $tkeep " # keep XYZ data
          # Run experiment
          $dryrun && cmd="echo ./drycore_run" || cmd="./drycore_run"
          $cmd $expdir $flags --mode $runmode --start $tstart --end $tend \
            --cores $cores --days-init $tinit --extra "$extra" # could be empty string
          [ $? -ne 0 ] && echo "Error: Model run script failed." && exit 1 # keyboard interruption does not trigger this
          # Move initialization files
          if [ $testmode -eq 2 ]; then
            cp $expdir/d0000-d0000/init.nc $HOME/data/init_${forcetype}_${reso}.nc
          fi
        #------------------------------------------------------------------#
        # Process model
        elif [ $batchmode -eq 1 ]; then
          [ $testmode -ne 0 ] && echo "Error: Invalid mode for test run." && exit 1
          continue
          # Process data directly, using the 'full' files as input
          # How da fuck to do this?
          ./process
        #------------------------------------------------------------------#
        # Call post-process script
        elif [ $batchmode -eq 2 ]; then
          [ $testmode -ne 0 ] && echo "Error: Invalid mode for test run." && exit 1
          # Run stuff; will generate individual logs for each 'type' of
          # post-process, and a bigger log that indicates what processes are running
          echo "Current experiment directory: \"${expname}\"."
          input="$scratch/$expname"
          output="$storage/data/$expname"    # saving processed data
          [ ! -d $output ] && mkdir $output
          $dryrun && cmd="echo ./postprocess" || cmd="./postprocess"
          flags="$postprocess"
          echo "Calling postprocess with flags: $flags"
          $cmd "$filename" "$input" "$output" \
            --climate-start $climostart --climate-end $climoend \
            --spin-start $spinstart --spin-end $spinend \
            --mode $runmode $flags &>$output/log &
          pids+=($!) # record process
        fi
      done
    done
  done
done
echo # space
