#!/usr/bin/env bash
usage='process_post [OPTION...] GLOB1 [GLOB2 ...]'
doc="This script processes the parallel-produced results of GFDL model runs,
using saved pressure-level data.

Usage

  $usage

Required arguments

  GLOB1  The quoted glob pattern for experiment directories for which we
         want to process data.

Optional arguments

  -i    Interpolate from pressure levels to isentropes in parallel.
  -s    Spectral decompositions from files and overlapping halves.
  -n=*  Number of parallel processes for splitting NetCDF files.
"
# Notes
# * Feel free to add other random tasks, e.g. deleting dud variables
#   from existing files or re-running some analysis.
# * For debugging/generating small spectral files use:
#   ncwa -O -d plev,500.0,600.0 -d lat,0.0,90.0 -a f,k spectral.nc tmp.nc
# * To check status of isentropic files use:
#   for d in hs*; do for f in $d/netcdf/*isen*; do echo ${d}; echo ${f#*.}; ncvardump thlev $f | xargs; ncvars $f | xargs; done; done
# * Use 'y' (operation tYpe) to do arbitrary transformations with
#   ncwa, e.g. variance, sum, and stuff.
# * To make sure average over longitudes/times equals average over
#   frequencies/wavenumbers use:
#   ncvardump t 2xdaily_inst_spectral.d0500-d0600.nc | xargs
#   ncvardump tvar 2xdaily_inst_full.d0500-d0600.nc | xargs
# Raise error
raise() {
  echo "Usage: $usage" 1>&2
  echo "Error: $1" 1>&2
  exit $2
}
# Initial stuff
shopt -s nullglob
cwd=$(pwd)
nmax=8
daily=2xdaily # ignore the 4xdaily files for the time being
isen_parallel=false
spectra_parallel=false
ncparallel=$HOME/ncparallel/ncparallel
spectra_py=$cwd/pressure_spectra.py
isen_interp_ncl=$cwd/isentropes_interp.ncl
isen_params_ncl=$cwd/isentropes_params.ncl
# repair_ncl=$cwd/repair.ncl
# repair_isen_ncl=$cwd/repair_isen.ncl
while [ $# -gt 0 ]; do
  case $1 in
    -h|-help) echo "$doc"; exit ;;
    -n=*) nmax=${1#*=} ;;
    -i) isen_parallel=true ;;
    -s) spectra_parallel=true ;;
    -*) raise "Unknown flag $1." ;;
    *)  globs+=("$1") ;;
  esac
  shift
done

# Files and experiment folders over which we iterate
case ${HOSTNAME%%.*} in
  # monde*) scratches=(/mdata1/ldavis /mdata2/ldavis) ;;
  cheyenne*) scratches=(/glade/scratch/davislu) ;;
  monde*) scratches=(/mdata1/ldavis) ;;
  *) raise "Unknown host, must edit batch script before continuing." ;;
esac

#------------------------------------------------------------------------------#
# Helper functions
#------------------------------------------------------------------------------#
# NCL log
# "Success" is when the grep fails, i.e. no fatal warning messages
logcheck() { # WARNING: NCL adds '^M' before fatal: messages, so a search for ^fatal: will fail!
  ! cat $1 | grep -v "Execute.c" | grep -v "systemfunc" | grep -E "fatal:|Error" &>/dev/null
}

# NetCDF tools
ncin() {
  command ncdump -h "$1" | sed -n '/variables:/,$p' | sed '/^$/q' | grep -v '[:=]' \
    | cut -d '(' -f 1 | sed 's/.* //g' | xargs | tr ' ' '\n' | grep -v '[{}]' | xargs \
    | grep $2 &>/dev/null
}
ndims() { # just dimensions and their numbers
  command ncdump -h "$1" | sed -n '/dimensions:/,$p' | sed '/variables:/q'  | sed '1d;$d' \
    | tr -d ';' | tr -s ' ' | column -t \
    | grep "$2" | cut -d'(' -f2 | cut -d' ' -f1
}

# Background manager
background() {
  # Receives 2 args:
  # 1. comma-separated list of pids
  # 2. comma-separated list of logs
  # Wait, and run ncl check
  pids=($(echo $1 | tr ',' ' ' | xargs))
  logs=($(echo $2 | tr ',' ' ' | xargs))
  npids=${#pids[@]}
  t=$(date +%s) # time before waiting
  for j in $(seq 1 $npids); do
    wait ${pids[j-1]}
    logcheck ${logs[j-1]} || raise "One of the processes failed. Crap."
  done
  echo "Elapsed time: $(($(date +%s) - t))s."
}

#------------------------------------------------------------------------------#
# 2D spectral decomposition
#------------------------------------------------------------------------------#
# NOTE: This also gives is half-files!
spectra_parallel() {
  # Generate half-file
  if [ -z "$full_half" ] && [ -z "$spectral_half" ]; then
    n=0
    inputs=("$full")
    outputs=("$spectral")
  else
    n=1
    inputs=("$full_half" "$full")
    outputs=("$spectral_half" "$spectral")
  fi

  # Get spectral data
  for i in $(seq 0 $n); do
    # Skip files that exist
    input=${inputs[i]}
    output=${outputs[i]}
    if [ -r "$output" ]; then
      echo "Ouput file exists: ${output##*/}"
      continue
    fi

    # Calculate half-file if necessary
    if [ "$input" == "$full_half" ]; then
      t=$(date +%s)
      hdir=${full%/*}
      tmp1=$hdir/tmp1.nc
      tmp2=$hdir/tmp2.nc
      echo "Generating half-file ${full_half##*/}"
      ts1=$(ncdump -h "$full_prev" | grep 'UNLIMITED' | sed 's/[^0-9]//g')
      ts2=$(ncdump -h "$full" | grep 'UNLIMITED' | sed 's/[^0-9]//g')
      ncks -O --no-abc -d time,$((ts1 / 2)),$((ts1 - 1)) $full_prev $tmp1
      ncks -O --no-abc -d time,0,$((ts2 / 2 - 1)) $full $tmp2
      ncrcat -O $tmp1 $tmp2 $full_half
      rm $tmp1 $tmp2
      echo "Elapsed time: $(($(date +%s) - t))s."
    fi

    # Calculate, ideally in parallel
    # $ncparallel -d=lat -p=4 -n=64 "python $spectra_py" $input $output
    # python "$spectra_py" "$input" "$output"
    t=$(date +%s) # time before waiting
    echo "Getting spectra: ${input##*/} ${output##*/}"
    $ncparallel -d=lat -n=$nmax "python $spectra_py" $input $output
    echo "Elapsed time: $(($(date +%s) - t))s."
  done

  # Remove half-file
  [ -n "$full_half" ] && rm "$full_half" 2>/dev/null
}

#------------------------------------------------------------------------------#
# Isentropic interpolation and summary statistics
#------------------------------------------------------------------------------#
# TODO: Make this work with ncparallel
isen_parallel() {
  # Message
  echo ${full_isen##*/}
  echo ${summary_isen##*/}

  # Loop through segments
  unset ilogs ipids
  rm full.*.nc isen1.*.nc isen2.*.nc 2>/dev/null # make sure deleted
  nt=$(ndims $full time)
  for ii in $(seq 1 $nmax); do
    # NCL times
    # NOTE: Pass stratosphere=1 for stratosphere layers
    t1=$(((ii - 1) * nt / nmax)) # e.g. nmax=10, nt=200, goes 0, 20, 40, 60
    t2=$((ii * nt / nmax - 1)) # e.g. nmax=10, nt=200, goes 19, 39, 59
    ilog=logs/isen${ii}.log
    {
      ncl -n -Q "forcing=\"${full%/*}/../forcing.nc\"" \
        "slice=(/$t1,$t2/)" "filename=\"${full}\"" "output=\"isen1.${ii}.nc\"" \
        $isen_interp_ncl
      ncl -n -Q "filename=\"isen1.${ii}.nc\"" "output=\"isen2.${ii}.nc\"" \
        $isen_params_ncl
    } &>$ilog &
    ipids+=",$!"
    ilogs+=",$ilog"
  done
  background $ipids $ilogs

  # Merge summaries
  t=$(date +%s)
  echo "Merging ${summary_isen##*/}."
  ncrcat -O isen2.*.nc $summary_isen

  # Keep full files if after day 5000, because why not
  if [[ "$full_isen" =~ d5[01]00-d[12]00 ]]; then
    echo "Merging ${full_isen##*/}."
    ncrcat -O isen1.*.nc $full_isen
  fi
  rm full.*.nc isen1.*.nc isen2.*.nc 2>/dev/null
  echo "Elapsed time: $(($(date +%s) - t))s."
}

#------------------------------------------------------------------------------#
# Iterate through experiment folders
#------------------------------------------------------------------------------#
for scratch in "${scratches[@]}"; do
  subfolders=($scratch/. $scratch/timescales-*) # subfolders contain some older experiment series
  for subfolder in ${subfolders[@]}; do
    for glob in "${globs[@]}"; do
      for dir in $subfolder/$glob; do
        # Find full resolution files
        # TODO: Remove hardcoded minimum start day of 500
        # filenames=($dir/netcdf/$daily*full.d?????-d?????.nc)
        echo
        echo "Experiment: ${dir##*/}"
        t=$(date +%s)
        filenames=( \
          $dir/netcdf/$daily*full.d00[5-9]??-d?????.nc \
          $dir/netcdf/$daily*full.d0[1-9]???-d?????.nc \
        )
        if [ ${#filenames[@]} -eq 0 ]; then
          echo "Warning: No files found."
          continue
        fi

        # Loop through files, try to parallelize because very slow
        unset full_prev full_half spectral_half
        for full in ${filenames[@]}; do
          # Input file names
          i=$((i + 1))
          dir=${full%/*}
          summary=${full/full/summary} # YZ file
          summary_base=${summary##*/} # XYZ file
          full_base=${full##*/} # XYZ file

          # For full files
          # full_qgpv=${full/full/qgpv} # file that only stores 2D QGPV
          prefix=${full_base%%.*}
          suffix=${full_base#*.}
          spectral=${full/full/spectral}
          full_isen=${dir}/${prefix}_isen.${suffix}

          # For summary files
          prefix=${summary_base%%.*}
          suffix=${summary_base#*.}
          summary_isen=${dir}/${prefix}_isen.${suffix}

          # For spectral data need the "in-between" files
          if [ -n "$full_prev" ]; then
            days=${full_prev%.nc}
            days=${days##*.} # should be e.g. d00000-d00100
            days=(${days//[^0-9]/ }) # store in array variable
            delta=$(bc <<< "(${days[1]} - ${days[0]}) / 2")
            day1=$(bc <<< "${days[0]} + $delta")
            day2=$(bc <<< "${days[1]} + $delta")
            daystring=d$(printf "%05d" $day1)-d$(printf "%05d" $day2)
            full_half=${full%.d?????-d?????.nc}.${daystring}.nc
            spectral_half=${spectral%.d?????-d?????.nc}.${daystring}.nc
          fi
          full_prev="$full"

          # Isentropic coords
          # if $isen_parallel && { ! [ -r $summary_isen ] || ! ncin $summary_isen stress; }; then
          if $isen_parallel; then
            isen_parallel
          fi

          # Spectra (the isen() function can be parallelized in same way)
          # TODO: Parallelize on pressure levels maybe
          # if $spectral && { ! [ -r $spectral ] || ! ncin $spectral ehf }; then
          if $spectra_parallel; then
            spectra_parallel
          fi
        done
      done
    done
  done
done
echo

