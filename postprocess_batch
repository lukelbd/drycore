#!/usr/bin/env bash
# Processes files in directories matching some glob pattern
# Much much much smarter than the method before
# If you want to process some specific new experiments, just use
# multiple glob patterns matching exact names
storage=/home/ldavis
scratch=/home/ldavis # on Euclid, home is unmounted/not backed up; so disk I/O is quick
case ${HOSTNAME%%.*} in
  olbers)
    mpibin=/usr/local/mpich3/bin
    ;;
  gauss)
    mpibin=/usr/local/mpich3-pgi/bin
    scratch=/birner-scratch/ldavis # need to use special scratch directory
    ;;
  euclid)
    mpibin=/usr/local/bin
    storage=/birner-home/ldavis # this directory is backed up; synced with GAUSS home folder
    ;;
  monde)
    mpibin=/usr/lib64/mpich/bin
    scratch=/mdata1/ldavis
    ;;
  *) echo "Error: Unknown host, must edit batch script before continuing." && exit 1 ;;
esac
# Iterate through
runmode=0 # 0 is control run, the rest are different spindown modes:
  # 1 for radiation off, 2 for radiation off but surface on, 
  # 3 for everything off (radiation, surface, and friction), 4 for friction off
dryrun=false
filename=4xdaily_inst # prefix for files to be read
parallelmax=1 # maximum parallel post-processing events
spinstart=0 spinend=100000
climostart=200 climoend=1200 # skip first 200 days; but for spindown data, want to process all of it usually
# globs=('*tgrad*t42l20s*' '*troprad2*t42l20s*')
# globs=('*tgrad*t42l20s*' '*troprad3*t42l20s*')
# globs=('*troprad[23]*t42l40s*')
# globs=('*stratrad1c*t42l50p*' '*stratrad10c*t42l50p*' '*base*t42')
# globs=('*base*t42*')
globs=('*troprad3*t42l20s*')
postprocess+="--daily --climate "
for glob in ${globs[@]}; do
  for input in $scratch/$glob; do
    # Check
    if ! [ -d $input ]; then
      echo "Warning: No directories for glob pattern ${input}." && sleep 3 && continue
    fi
    echo "Directory: ${input}."
    # sleep 3
    # Crude parallelization across multiple experiments
    if [ ${#pids[@]} -gt 0 ] && [ $(( ($counter-1) % $parallelmax )) == 0 ]; then
      echo "Waiting for processes: ${pids[@]}."
      for pid in ${pids[@]}; do
        wait $pid
        [ $? -ne 0 ] && echo "Error: A post-processing step failed." && exit 1
      done; pids=() # reset tracked process ids
    fi
    # Run stuff; will generate individual logs for each 'type' of
    # post-process, and a bigger log that indicates what processes are running
    expname="${input##*/}"
    output="$storage/data/$expname"    # saving processed data
    echo "Current experiment directory: \"${expname}\"."
    [ ! -d $output ] && mkdir $output
    $dryrun && cmd="echo ./postprocess_run" || cmd="./postprocess_run"
    flags="$postprocess"
    echo "Calling postprocess with flags: $flags"
    $cmd "$filename" "$input" "$output" \
      --climate-start $climostart --climate-end $climoend \
      --spin-start $spinstart --spin-end $spinend \
      --mode $runmode $flags
      # --mode $runmode $flags &>$output/log &
    pids+=($!) # record process
  done
done
